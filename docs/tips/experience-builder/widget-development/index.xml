<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>カスタム ウィジェット開発ガイド on ArcGIS for Developer 開発リソース集</title>
    <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/widget-development/</link>
    <description>Recent content in カスタム ウィジェット開発ガイド on ArcGIS for Developer 開発リソース集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
	<atom:link href="https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/widget-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ウィジェット開発のスタート</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/widget-development/getting-started-widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/widget-development/getting-started-widget/</guid>
      <description>ArcGIS Experience Builder は、React と ArcGIS API for JavaScript を使用して構築されています。これにより、特定のワークフローに合わせて、カスタム ウィジェットを作成することができます。独自のウィジェットを作成するには、以下の基本的な理解が必要となります。
 TypeScript React JSX Jimu  TypeScript TypeScript は JavaScript のスーパーセットです。TypeScript はウィジェットの開発に使用されている言語です。TypeScript とは何か、なぜ TypeScript が使われているのか、どのように使えるのかについて詳しく説明しているオンラインリソースが多くあります。
React React はユーザーインターフェイスを作成するための JavaScript ライブラリです。React は DOM からの抽象化であり、アプリケーションと UI は、さまざまな状態で連携し、それらの状態をレンダリングすることで UI の一貫性を保つことを容易にします。例えば、Experience Builder では、ウィジェットの状態を更新してから、この新しい状態に基づいて UI をレンダリングするだけです。インターフェースの構築を容易にするために、Experience Builder では reactstrap を使用しています。これは Bootstrap 4 をベースにした React コンポーネントの UI ライブラリです。
React を使った開発については、React のドキュメントを参照してください。
JSX JSX は JavaScript の拡張構文で、React を通してウィジェットの UI がどのように表示されるかを記述することができます。
Jimu Jimu は、ウィジェットの作成に使用する Experience Builder の JavaScript ライブラリです。</description>
    </item>
    
    <item>
      <title>ウィジェット manifest</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/widget-development/widget-manifest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/widget-development/widget-manifest/</guid>
      <description>各 ArcGIS Experience Builder ウィジェットには、ウィジェットの属性とプロパティを記述した manifest.json ファイルがあります。ウィジェットの manifest には、name、type、version、exbVersion、および translatedLocales プロパティを含める必要があります。ウィジェットの manifest を作成する簡単な方法は、demo widget から manifest.json ファイルをコピーすることです。以下は manifest.json ファイルの例です。
{ &amp;quot;name&amp;quot;: &amp;quot;count-features&amp;quot;, &amp;quot;label&amp;quot;: &amp;quot;Count Features&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;widget&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;1.1.0&amp;quot;, &amp;quot;exbVersion&amp;quot;: &amp;quot;1.1.0&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;Esri R&amp;amp;D Center Beijing&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;This is widget is designed to display the numeric attributes of features.&amp;quot;, &amp;quot;copyright&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;license&amp;quot;: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0&amp;quot;, &amp;quot;publishMessages&amp;quot;: [ &amp;quot;EXTENT_CHANGE&amp;quot;, &amp;quot;DATA_RECORDS_SELECTION_CHANGE&amp;quot; ], &amp;quot;messageActions&amp;quot;: [], &amp;quot;defaultSize&amp;quot;: { &amp;quot;width&amp;quot;: 360, &amp;quot;height&amp;quot;: 80 }, &amp;quot;properties&amp;quot;: {}, &amp;quot;translatedLocales&amp;quot;: [ &amp;quot;en&amp;quot;, &amp;quot;es&amp;quot;, &amp;quot;zh-cn&amp;quot; ] }  widget&amp;rsquo;s manifest で利用可能なプロパティの詳細を参照してください。</description>
    </item>
    
    <item>
      <title>ウィジェット UI の作成</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/widget-development/widget-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/widget-development/widget-ui/</guid>
      <description>Experience Builder のベースとなる Widget クラスは、React のコンポーネントサブクラスから拡張されています。PureComponent から拡張されており、render() と呼ばれる関数を提供しています。UI の作業のほとんどは、この関数の内部で行われることが予想されます。
JSX の記述 UI テンプレートの作成に使用される React の構文は JSX と呼ばれています。これは HTML を書くのと非常に似ていますが、JavaScript の機能を完全に組み込んでいます。
JSX の詳細を参照してください。
ここでは、ウィジェットの UI にいくつかの基本的な HTML 要素を追加する簡単な例を示します。
// in widget.tsx: import { React, BaseWidget, AllWidgetProps } from &#39;jimu-core&#39;; export default class Widget extends BaseWidget&amp;lt;AllWidgetProps&amp;lt;{}&amp;gt;, any&amp;gt;{ render() { return &amp;lt;div className=&amp;quot;myWidget&amp;quot;&amp;gt; &amp;lt;p&amp;gt;This is a sample widget&amp;lt;/p&amp;gt; &amp;lt;button type=&amp;quot;button&amp;quot; style={{background: &#39;orange&#39;}}&amp;gt;I&#39;m a button&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt;; } }  Output 例: Jimu UI ライブラリの使用 Jimu フレームワークは、開発者がウィジェット開発で使用するコンポーネントの UI ライブラリを提供しています。</description>
    </item>
    
  </channel>
</rss>