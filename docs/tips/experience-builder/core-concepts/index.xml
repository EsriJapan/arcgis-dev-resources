<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>コア コンセプト on ArcGIS Developers 開発リソース集</title>
    <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/</link>
    <description>Recent content in コア コンセプト on ArcGIS Developers 開発リソース集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language><atom:link href="https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ページ（Page）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/page/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - page
ページとは ArcGIS Experience Builder では、ページはレイアウトの表現であり、物理的な HTML の Web ページではありませんが、そのように動作します。ページは、エクスペリエンス内でコンテンツを整理するための基盤です。
エクスペリエンスには最低 1 ページが必要で、複数ページも可能です。ページは 2 つのレイアウト タイプでデザインできます。
 フルスクリーン アプリ： アプリケーション インターフェースに似ています。 スクロール ページ：従来の Web ページに似ています。  ウィジェット、セクション、スクリーンなどのページ コンテンツは、固定レイアウトやフロー レイアウトなどのレイアウト ルールに基づいて配置されます。さまざまな画面サイズに対応できるよう、レイアウトは3つのサイズ モード大画面、中画面、小画面）に設定できます。この構成により、さまざまな機器に対応したカスタマイズ設計が可能になります。
アプリの設定では、ページは pages プロパティで定義され、その構造は pageStructure プロパティで概説されます。
ページの使用方法 ArcGIS Experience Builder でページを使用する一般的な手順は次のとおりです。
  ページの追加 エクスペリエンスにページを追加してください。
  ページにコンテンツを追加 ページにウィジェット、セクション、またはスクリーンを追加します。
  ページ レイアウトの設定 ページのレイアウト タイプとサイズ モードを設定します。
  1. ページの追加 エクスペリエンスにページを追加するには、以下の手順に従ってください。
 ArcGIS Experience Builder のページ パネルに移動します。 ページの追加ボタンをクリックしてください。 ページのレイアウト タイプを選択します。  フルスクリーン アプリ：このレイアウトはアプリケーションのインターフェイスに似ており、固定レイアウトやグリッド レイアウトをサポートしています。 スクロール ページ：このレイアウトは従来の Web ページに似ており、縦スクロールが可能です。    2.</description>
    </item>
    
    <item>
      <title>ウィンドウ（Window）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/window/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Window
ウィンドウとは ArcGIS Experience Builder では、ウィンドウはエクスペリエンスの上にコンテンツまたはウィジェットを表示できるパネルです。ウィンドウズでは、ユーザーはメインのエクスペリエンスから離れることなく、集中してコンテンツに触れることができます。ウィンドウは固定モーダルまたはアンカー付きポップアップとして表示するように設定できます。
ウィンドウにコンテンツを表示するには、主に2つの設定があります。
   ウィンドウ タイプ 説明     固定ウィンドウ 閉じるまでメイン ウィンドウとのインタラクションを無効にするモーダル オーバーレイ。スプラッシュ画面や重要なメッセージによく使われます。   アンカー ウィンドウ ボタンやテキストなどのウィジェットに固定されたポップアップで、通常、コンテキスト情報やアクションに使用されます。    アプリの設定では、ウィンドウはダイアログ プロパティで定義されます。
なぜウィンドウを使うのか ArcGIS Experience Builder のウィンドウでは、メインのエクスペリエンスからナビゲートすることなく、追加のコンテンツや機能を表示できます。フォーム、メディア、その他のウィジェットを集中的に表示し、ユーザーとのインタラクションやエンゲージメントを高めることができる。
ウィンドウを使用して、次を提供します。
 メインコンテンツから離れることなく、重要な情報や行動を提示します。 追加の詳細、フォーム、またはメディアを専用のオーバーレイで表示します。 ユーザーが別のスペースでウィジェットやコンテンツとやりとりできるようにします。 特定のウィジェットからウィンドウをトリガーして、関連情報やオプションを提供します。  ウィンドウの使用方法 ArcGIS Experience Builder でウィンドウを使用する一般的な手順は次のとおりです。
 ウィンドウの追加 エクスペリエンスにウィンドウを追加します。 ウィンドウの設定 ウィンドウのモード、サイズ、位置を設定します。 ウィンドウのトリガーを設定 ウィンドウの表示タイミングと表示方法を設定します。  1. ウィンドウの追加 エクスペリエンスにウィンドウを追加するには、以下の手順に従ってください。
 ページ パネルに移動し、ウィンドウ タブを選択し、ウィンドウの追加をクリックします。 ウィンドウのテンプレートを選択します。 ウィンドウ タイプを決定します。  固定：画面上の固定位置に表示されます。 アンカー：リンクされたウィジェットに隣接して表示されます。 ウィンドウがエクスペリエンスに追加され、プロパティの設定を開始できます。    2.</description>
    </item>
    
    <item>
      <title>セクションとビュー（Section and view）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/section-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/section-view/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Section and view
このページでは、ArcGIS Experience Builder のセクション コンポーネントとビュー コンポーネントについて説明します。また、セクションが複数のビューのコンテナとしてどのように機能するか、セクション内でビューがページやウィンドウとどのように同じように機能するか、ビュー ナビゲーション ウィジェットを使用してビュー間を移動する方法についても学びます。
セクションとは セクションは、ページに追加できるレイアウト コンテナーです。セクションは、アプリケーション内のコンテンツを整理し、構造化します。セクションはモジュール レイアウトに便利で、関連するコンテンツをグループ化できます。ヘッダー、フッター、サイドバー、メイン コンテンツ エリアに使用できます。
セクションには、そのセクションの代替レイアウトやコンテンツ領域である複数のビューを含めることができます。これにより、ページを離れることなく異なるコンテンツ セットを切り替えることで、よりダイナミックなユーザー エクスペリエンスを生み出すことができます。
ビューとは ビューはセクションに追加されるレイアウト コンテナーです。ページやウィンドウの機能に類似しますが、セクションで使用されます。ビューは、ウィジェットとコンテンツのための明確な領域を作成します。
ビューは、タブ、ワークフローのステップ、異なる情報の状態など、同じセクションで別のコンテンツやレイアウトを表示するのに便利です。ビューの切り替えは、ビュー ナビゲーション ウィジェットなどのナビゲーション コントロールを使用するか、トリガーを設定することで行うことができます。
ビューは、関連するコンテンツへのアクセスを維持しながら、ユーザーが一度に 1 つのコンテンツ セットに集中できるようにすることで、アプリケーションを整理するのに役立ちます。これは、ユーザーがページを離れることなく異なる情報やツールの間を移動する、ガイド付きエクスペリエンス、ウィザード、またはダッシュボードに役立ちます。
ビューは異なるレイアウトやウィジェットを持つことができ、切り替え時にトランジション アニメーションを適用できます。
セクションとビューの使用方法 セクションとビューをナビゲーション ウィジェットと一緒に使うことで、インタラクティブで、整理された、モジュール化されたエクスペリエンスを作ることができます。
セクションとビューを使用するには、次の手順に従います。
 ページにセクションを追加します。 セクションにビューを追加します。 ビューを設定し、ビュー間のナビゲーションを設定する。 オプションで、よりスムーズなユーザー エクスペリエンスのためにトランジション アニメーションを適用する。  セクションとビューの追加方法については、セクションの追加とビューの追加のトピックを参照してください。
セクションとビューの違い セクションとビューはどちらもコンテンツを整理するために使用されますが、構造、レンダリング、ユーザー インタラクションが異なります。以下の表は、主な違いをまとめたものです。
   観点 セクション ビュー     定義 コンテンツをグループ化し、レイアウトを管理するためにページに追加されるコンテナー 代替コンテンツやレイアウトを表示するためにセクションに追加されるコンテナー   階層 ページレベルまたは他のビュー内に存在 セクション内に存在   コンテンツ 複数のビューを含むことが可能 そのビューに固有のウィジェットやコンテンツを含むことが可能   ナビゲーション ナビゲーションはセクション内のビュー間で行われる ビューナビゲーションウィジェットやトリガーを使ってナビゲート可能   レンダリング セクション内のすべてのビューがレンダリングされるが、アクティブなビューだけが表示される 一度に表示されるのは1つのビューのみで、他のビューは非表示になるがレンダリングはされる   アニメーション ビューの切り替えにトランジション アニメーションを設定可能 セクションのアニメーションを継承   ユースケース ページレイアウトの整理、関連するコンテンツのグループ化、モジュール化されたデザインの作成 タブ、ワークフローのステップ、代替状態、ガイド付きエクスペリエンス    セクションとビューの主な違いは以下の通りです。</description>
    </item>
    
    <item>
      <title>スクリーン グループ（Screen groups）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/screen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/screen/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Screen groups
スクリーン グループとは ArcGIS Experience Builder のスクリーン グループは、複数のスクリーンを含むことができるレイアウト コンテナーです。スクロール ページのコンテンツやウィジェットを整理するために使用されます。スクリーン グループ内の各スクリーンにはメイン ステージがあり、スクリーン グループによってはスクロール パネルもあります。
ユーザーがスクリーン グループにスクロールすると、スクリーンの高さ全体を占めます。スクリーン グループにスクロール パネルがある場合、ユーザーがパネル内のコンテンツをスクロールする間、メイン ステージはその場に留まります。メイン ステージが変わるのは、最後のパネルがスクロールするときだけです。 パネルがない場合、メイン ステージはスクリーン一杯の高さまでスクロールするまでその場に留まります。
スクリーン グループでの操作方法 アプリケーションにスクリーン グループを追加して構成するには、以下の手順に従います。
 スクリーン グループを追加したいキャンバスに移動します。 キャンバス上のスクリーン グループの挿入ボタンをクリックします。 ギャラリーからスクリーン グループ テンプレートを選択します。 スクリーン数やレイアウト オプションなどのプロパティを設定します。 スクリーン グループ内のスクリーンの追加ボタンをクリックして、必要に応じて新しいスクリーンを追加します。  スクリーン グループの詳細については、add screen groupsを参照してください。
スクリーン グループ テンプレート スクリーン グループで利用可能なテンプレートをいくつか紹介します。
   テンプレート 説明     カスケード マルチスクリーン、フローティング パネル、メインステージのフェード、パネルのプッシュ スルー   インデックス ドッキングされたパネル、カスケードと同様のトランジション   フライヤー ブックマーク付きの地図用にデザインされたシングルスクリーンで、パネルのスクロールに合わせて地図が移動   ストリーム マルチスクリーン、フローティング パネル、パララックス効果、次の画面へのフェード    スクリーン グループ テンプレートの詳細については、Add Screen groups &amp;gt; templates を参照してください。</description>
    </item>
    
    <item>
      <title>レイアウト（Layout）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/layout/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Layout
レイアウト（Layout） レイアウトは、レイアウト コンテナーにコンテンツを配置する方法を定義します。コンテンツには、ウィジェット、セクション、または画面グループが含まれ、レイアウト コンテナーには、ページ、ビュー、またはダイアログなどがあります。ArcGIS Experience Builder には、いくつかのレイアウト規則があります。たとえば、新しいページを作成するときに、Fixed レイアウトまたは Flow レイアウトを選択したり、Layout ウィジェットを使用して異なるレイアウトを作成したりすることができます。
アプリ コンフィグでは、レイアウトは layouts プロパティで定義され、レイアウト コンテナーは layout id でレイアウトを参照します。レイアウト コンテナーには、異なるサイズ モードでのレイアウトを定義する layout オブジェクト プロパティがあります。Experience Builder では、Large、Medium、Small の各サイズ モードをサポートしています。レイアウトが定義されていないサイズ モードでは、アプリの設定で定義された mainSizeMode レイアウトが使用されます。
フレームワークのレイアウト コンテナーの他に、ウィジェットもレイアウト コンテナーになることができます。ウィジェットがレイアウト コンテナになると，ユーザーは他のウィジェットをドラッグ アンド ドロップすることができます。例えば、Map や Card はレイアウト コンテナー ウィジェットです。レイアウト コンテナー ウィジェットは、manifest.json で layouts プロパティを宣言し、LayoutEntry コンポーネントを使用する必要があります。パフォーマンス上の理由から、以下のロジックを使用する必要があります。
import {LayoutEntry} from &amp;#39;jimu-layouts/layout-runtime&amp;#39; let LayoutEntryComponent if (window.jimuConfig.isInBuilder) { LayoutEntryComponent = this.props.builderSupportModules.LayoutEntry } else { LayoutEntryComponent = LayoutEntry } </description>
    </item>
    
    <item>
      <title>テーマ（Theme）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/theme/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Theme
テーマ（Theme） テーマは、エクスペリエンスの外観と使用感を定義します。エクスペリエンスは、すぐに使える (OOB) テーマがあり、カスタム テーマの作成も可能です。テーマ開発については、theme development をご覧ください。
app config では、アプリが使用するテーマは theme で定義されます。テーマをカスタマイズした場合、そのカスタマイズ内容は customTheme に保存されます。</description>
    </item>
    
    <item>
      <title>ウィジェット（Widget）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/widget/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Widget
ウィジェット（Widget） ウィジェットは設定可能な機能単位で、エクスペリエンスのページを作成するために使用されるビルディング ブロックです。Experience Builder は、マップ、ボタン、リストなどのすぐに使える（OOB）ウィジェットが用意されており、カスタム ウィジェットを作成することも可能です。ウィジェットは通常、ユーザーがビルダー環境で機能を設定できるように設定 UI を提供します。ウィジェットに設定可能なオプションがありますが、設定 UI が含まれていない場合は、JSON エディタを使用して設定することが可能です。
ウィジェットの実装についてはこちらをご覧ください。
app config では、widgets でウィジェットを定義します。</description>
    </item>
    
    <item>
      <title>Jimu</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/jimu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/jimu/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Jimu
Jimu Jimu は、設定可能なエクスペリエンスを作成するために使用される JavaScript ライブラリーで、以下のようなパッケージで構成される拡張フレームワークです。
 jimu-arcgis パッケージは、ArcGIS Maps SDK for JavaScript を実行するためのクラスとメソッドが含まれています。よく使われるクラスは JimuMapView と JimuMapViewComponent です。 jimu-core パッケージは、ウィジェットのプロパティ、メッセージ アクション、データ ソースを扱うためのインターフェイスと型を提供します。また、エクスペリエンスを通じて使用されるいくつかのクラスも定義しています。 jimu-for-builder パッケージは、SettingChangeFunction や WidgetSettingProps といったウィジェット設定ページを開発するためのクラスを提供します。 jimu-for-test パッケージは、ユニット テストに使用できるクラス、型、関数が含まれています。 jimu-ui パッケージは、エクスペリエンスが使用するすべての UI コンポーネントが含まれています。パフォーマンス上の理由から、UI コンポーネントは 3 つのカテゴリに分かれています。jimu-ui のエントリーには、Button や Input などの一般的な UI コンポーネントが含まれています。jimu-ui/basic 以下のエントリーには、ColorPicker や QRCode などの目的に応じたコンポーネントが含まれます。jimu-ui/advanced 以下のエントリーは重く、複雑です。例えば、setting-components エントリーには、ウィジェットの設定で使用される可能性のある複数のコンポーネントが含まれています。  これらのパッケージは同じ構造パターンを使用しているため、同じベストプラクティスに沿って使用することができます。各パッケージは import するためのいくつかのエントリーを定義し、これらのエントリーはパッケージのルート フォルダーの下に置かれます。lib フォルダー内のコンテンツは，パッケージの内部コンテンツとみなされますので，ウィジェットには import しないでください。例えば、jimu-ui の Button コンポーネントを使用する必要がある場合は、import {Button} from &#39;jimu-ui&#39; ではなく、import {Button} from &#39;jimu-ui/lib/components/button&#39; のようにインポートする必要があります。</description>
    </item>
    
    <item>
      <title>データ ソース（Data source）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/data-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/data-source/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Data sources
データ ソース（Data source） データ ソースは、ウィジェットがどのようにデータにアクセスするかを定義します。例えば、データがリモートサーバーからのものである場合、ウィジェットはクライアント側にクエリーするために、データ ソース クラスを使用します。ウィジェットでデータが生成された場合、それ自身をデータ ソース クラスに入れることで、別のウィジェットで使用することができます。
高レベルでは、データ ソースはスキーマといくつかのレコードを持ち、子/親データ ソースを持つ場合があります。さらに、すべてのデータ ソースは、それを識別するのに役立つ型、ID、ステータスがあります。 DataSource インターフェイスは jimu-core パッケージで定義されており、これは以下のメソッドとプロパティのいくつかを定義しています。
 id: データ ソースID。 type: どのタイプのデータ ソースを使っているかチェックするため、ウィジェットで使っているプロパティ。 fetchSchema: すべてのデータ ソースは、スキーマを返すためにこのメソッドを実装しなければなりません。これは、リモート データ サービスで定義されたスキーマです。例えば、ユーザーがExperience Builder でデータ ソースを追加した場合、データ ソースのスキーマはアプリ構成に保存されません。代わりに、最新のデータ ソース スキーマを取得するために fetchSchema メソッドが呼び出されます。 getSchema: ウィジェットがデータ ソースのスキーマとフィールドにアクセスするために使用するメソッドです。 getRecords: ウィジェットがデータ ソースのデータ レコードにアクセスするために使用するメソッドです。 getStatus: ウィジェットはこのメソッドを使用してデータ ソースのステータスを取得します。これらのステータスには、NotReady、Unloaded、Loading、Loaded および LoadError があります。NotReady はウィジェットの出力データ ソース専用です。出力データ ソースのインスタンスが作成されても、そのインスタンスは使用する準備ができていません。出力データ ソースを生成するウィジェットはデータ ソースを使用可能な状態にするアクション (DataSourceChanged) を送る必要があります。データ ソースのステータスが準備できていない場合、クエリーは空の結果を返します。その他のクエリー可能なデータ ソースでは、既定のステータスは Unloaded です。データが要求されると Loading に変更され、最後に Loaded または LoadError に変更されます。  データ ソースは DataSourceManager によって管理され、作成および取得できます。</description>
    </item>
    
    <item>
      <title>データ アクション（Data action）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/data-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/data-action/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Data action
データ アクション（Data action） データ アクションは、データ レコードのコレクションを拡張可能な方法で処理する方法を提供します。
データ アクションは Data Action インターフェイスによって定義され、isSupported と onExecute という 2 つの重要なメソッドを持っています。
 isSupported が呼び出されると、アクションがデータを処理できるかがチェックされます。サポートされていないデータアクションは実行中は非表示になります。 onExecute メソッドはユーザーがデータ アクションをクリックしたときに呼び出されます。  どちらのメソッドも、データ ソース、オプションのデータ レコード配列およびフィールドを含む DataRecordSet インスタンスの配列を取得できます。これら 2 つのメソッドは、DataLevel と widgetId パラメーターも受け取ります。DataLevel は、DataRecordSet がすべてのレコードを含むか、レコードのサブセットを含むかを示すために使用されます。
フレームワークは CSV へのエクスポートや JSON へのエクスポートなどのデータ アクションを提供します。ウィジェットもデータ アクションを提供できます。例えば、Map ウィジェットは &amp;ldquo;画面移動 (pan to)&amp;rdquo; と &amp;ldquo;ズーム (zoom to)&amp;rdquo; というデータアクションを提供します。ウィジェットにデータ アクションを実装するには、manifest.json でデータアクションを宣言し、AbstractDataAction を継承したクラスを作成します。
データ アクションによっては、アクションの動作を設定するための UI が必要な場合があります。これを実現するには、manifest.json で settingUri を宣言します。アクション設定の UI コンポーネントは、いくつかの差し込まれたプロパティを持つ React コンポーネントです。ユーザーが設定を変更したら、this.</description>
    </item>
    
    <item>
      <title>メッセージとアクション（Message and action）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/message-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/message-action/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Message and action
メッセージとアクション（Message and action） メッセージ/アクションは、ウィジェットからウィジェット、ウィジェットからフレームワーク、フレームワークからウィジェットへの通信をサポートする方法です。 ウィジェット/フレームワークはメッセージを公開したり、メッセージを聞いたりすることができます。メッセージは jimu フレームワークによって定義される MessageType によって識別されます。jimu には ExtentChange や DataRecordsSelectionChange のようないくつかのメッセージタイプが定義されています。
メッセージの発行（Publishing a message） ウィジェットは、MessageManager.getInstance().publishMessage(message) を呼び出してメッセージを発行します．例えば、List ウィジェットでは，リストアイテムがクリックされたときに DataRecordsSelectionChange メッセージを発行したり，Map ウィジェットでは，ビューが変更されたときに ExtentChange メッセージを発行して，List ウィジェットのコンテンツを更新したりします。以下の MessageTypes がサポートされています。
 StringSelectionChange ExtentChange DataRecordsSelectionChange DataRecordSetChange  各メッセージには、それを定義するクラスがあります。例えば、ExtentChange メッセージは ExtentChangeMessage クラスで定義され、このクラスはメッセージのペイロードである extent プロパティを定義します。
メッセージを発行するために、ウィジェットは manifest.json ファイルで発行メッセージを宣言する必要があります。
&amp;#34;publishMessages&amp;#34;: [ &amp;#34;DATA_RECORDS_SELECTION_CHANGE&amp;#34; ] メッセージ アクションの作成（Creating a message action） メッセージ アクションを作成するには、AbstractMessageAction クラスを継承する必要があります。メッセージ アクションの開発に役立つメソッドや関数がいくつかあります。
filterMessageType メソッドは、利用可能なアクションのフィルタリングに使用されます。
export default class QueryAction extends AbstractMessageAction{ filterMessageType(messageType: MessageType, messageWidgetId?</description>
    </item>
    
    <item>
      <title>マップ/シーン ビュー（Map/Scene View）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/map-scene-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/map-scene-view/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Map/Scene View
マップ/シーン ビュー（Map/Scene View） ビューの概念は ArcGIS Maps SDK for JavaScript と同じですが、Experience Builder では、ウィジェットやメッセージ/アクションなどを作成する際に一貫した拡張性モデルを確保するために、ビューは JimuMapView としてラップされます。JimuMapView オブジェクトを作成するには、ウィジェットは JimuMapViewManager.createJimuMapView() メソッドを使用します。JimuMapView オブジェクトは、主に以下のプロパティを持っています。
 view: マップ/シーン ビュー オブジェクト datasourceId: ビューを作成するデータソース (webmap/webscene) mapWidgetId: オブジェクトを作成するビュー jimuLayerViews: レイヤー ビュー オブジェクトのラッパー  Experience Builder では、マップ ウィジェットが JimuMapView オブジェクトを作成します。ウィジェットが JimuMapView オブジェクトを使用する必要がある場合、設定ページの MapWidgetSelector コンポーネントを使用して マップ ウィジェットを選択することができます。マップ ウィジェットの ID を取得した後、ウィジェットは &amp;lt;JimuMapViewComponent&amp;gt; を使って、作成された JimuMapView オブジェクトを取得することができます。JimuMapView オブジェクトを選択するには、設定ページの JimuMapViewSelector コンポーネントを利用します。</description>
    </item>
    
    <item>
      <title>拡張ポイント（Extension points）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/extension-points/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/extension-points/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Extension points
拡張ポイント（Extension points） Jimu ライブラリーを使用すると、ArcGIS Experience Builder を拡張することができます。多くの場合、カスタム ウィジェットやテーマを作成することで Experience Builder を拡張します。また、Jimu エクステンションにより、より深いカスタマイズを行うことができます。
Jimu ライブラリーでは、特定の拡張ポイントが定義されています。拡張ポイントとは、エクステンションが準拠すべきインターフェイスを定義したものです。エクステンションとは、拡張ポイントのインターフェイスを実装したクラスのことです。このインターフェイスは、jimu-core からエクスポートされた extensionSpec です。ウィジェットでエクステンションを提供するには、ウィジェットの manifest.json ファイルでエクステンションを宣言する必要があります。
&amp;#34;extensions&amp;#34;: [ { &amp;#34;point&amp;#34;: &amp;#34;&amp;lt;拡張ポイント名&amp;gt;&amp;#34;, &amp;#34;uri&amp;#34;: &amp;#34;&amp;lt;拡張される URI、関連するソース フォルダー&amp;gt;&amp;#34; } ] Jimu では、API ドキュメントで定義されている様々な拡張ポイントが定義されています。よく使われる拡張ポイントは以下の 2 つです。
  AppConfigProcessor - この拡張ポイントのエクステンションは、AppConfig を受け取り、処理された app config を解決するプロミスを返す必要があります。これは、文字列の翻訳（Translation サンプルを参照）のように、app config を実行時に修正するために使用できます。この処理は、app config がロードされた直後に起動されます。
  DependencyDefine - この拡張機能を使用すると、初期化が必要なサード パーティーのライブラリーを使用できます。
  ReduxStore - この拡張機能を使用すると、ウィジェットの Redux 状態の actions と reducers を定義できます。</description>
    </item>
    
    <item>
      <title>AppConfig</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/appconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/appconfig/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - AppConfig
AppConfig とは ArcGIS Experience Builder における AppConfig オブジェクトは、エクスペリエンスの構成を定義する JSON ベースの設定ファイルです。アプリケーションの動作、レイアウト、外観、データ接続などを定義するための、すべての重要な設定や要素が含まれています。これには、ページ、レイアウト、ウィジェット、データ ソースなどを管理するためのプロパティも含まれます。
AppConfig は、エクスペリエンスに関連するすべての設定のリポジトリーとして機能し、開発者がアプリケーションを簡単に、管理、カスタマイズできるようにします。新しいエクスペリエンスが初期化されると作成され、アプリケーションの state の appConfig プロパティに保存されます。
AppConfig を更新する方法 AppConfig はイミュータブル (不変) なオブジェクトです。設定値を更新するには、更新された設定を含む新しい appConfig インスタンスをプログラムで作成する必要があります。
以下は、ウィジェットの実行時に jimu-core ライブラリーを使用して appConfig を更新する方法の例です。プログラムで appConfigChanged() アクションを割り当てることで、appConfig を更新できます。
import { appActions, ReactRedux } from &amp;#34;jimu-core&amp;#34; // get the appConfig const appConfig = ReactRedux.useSelector((state: IMState) =&amp;gt; state.appConfig) // modify the appConfig const newAppConfig = appConfig.setIn([&amp;#34;pages&amp;#34;, pageId, &amp;#34;label&amp;#34;], theNewLabel) dispatch(appActions.appConfigChanged(newAppConfig)) appConfig を更新する最も一般的な方法は、ウィジェット構成画面でウィジェットの設定を更新することです。このとき、プログラムで props.</description>
    </item>
    
  </channel>
</rss>
