<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>コア コンセプト on ArcGIS Developers 開発リソース集</title>
    <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/</link>
    <description>Recent content in コア コンセプト on ArcGIS Developers 開発リソース集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language><atom:link href="https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ページ（Page）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/page/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - page
ページ（Page） エクスペリエンスの中のページは、物理的な HTML Web ページでなく、概念的なページですが、実際の HTML Web ページのように振る舞います。これは div HTML タグを使って実装されます。エクスペリエンスは少なくとも 1 つのページを持たなければならず、複数のページを持つこともできます。Experience Builder のページ レイアウトにはフル スクリーンのアプリ ページと直線的なスクロール ページの2種類があり、前者はアプリのように見え、後者はウェブ ページのように見えます。
ページの内容（ウィジェット/セクション/スクリーン）は、固定レイアウトやフロー レイアウトなどのレイアウト ルールで整理されています。異なる画面サイズでもページが反応するようにするために、Experience Builder はサイズ モードによるレイアウトの設定をサポートしています。これらは Large, Medium, Small で定義されています。各レイアウトの設定はエクスペリエンスの適応であり、アプリケーションをよりカスタマイズし、画面サイズをより有効に利用できるようにすることで、より大きな柔軟性を提供します。このデザインの良い例としては、City Explorer のテンプレートがあります。アプリケーションを大・中画面で見た場合、地図は表示され、構成に含まれていますが、モバイル デバイスで見た場合、マップ ウィジェットは最初のページから削除され、ユーザーがリスト ウィジェットで機能を選択した後、2番目のページにのみ表示されるようになります。
app config では、ページは pages で定義され、ページ構造は pageStructure で定義されます。</description>
    </item>
    
    <item>
      <title>ウィンドウ（Window）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/window/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Window
ウィンドウ（Window） ウィンドウはページに似ていて、任意のウィジェットを追加することができ、コンテンツを表示するための2つの設定（固定とアンカー設定）があります。 固定ウィンドウはモーダルを作成し、メイン ウィンドウを無効にしますが、ユーザーがエクスペリエンスに戻る前にウィンドウと対話できるように表示を維持します。固定ウィンドウはスプラッシュ スクリーンとして使用したり、ページで開いたり、ウィジェットから開いたりすることができます。アンカー ウィンドウは、ボタンやテキスト ウィジェットなどのウィジェットからトリガーされます。
app config では、ウィンドウは dialogs で定義されます。</description>
    </item>
    
    <item>
      <title>セクションとビュー（Section and view）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/section-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/section-view/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Section and view
セクションとビュー（Section and view） セクションは、複数のビューを追加できる領域を占めています。ビューはレイアウト コンテナで、ページやウィンドウに似ていますが、セクションの中にしか置くことができません。ビュー ナビゲーション ウィジェットは、セクション内のビューをナビゲートします。メニュー ウィジェットで複数のページを使用したり、ビュー ナビゲーション ウィジェットでセクションとビューを使用して同様の操作感を得ることができますが、両者には主な違いがあります。
 レンダリングについて - 複数のページを読み込む場合、最初は現在のページのコンテンツのみがレンダリングされます。セクション内の複数のビューを読み込む場合、ビュー内のすべてのコンテンツがレンダリングされますが、現在のビューのみが表示され、他はすべて非表示になります。 アニメーションについて - セクションでのみトランジションアニメーションを定義できます。  app config では、セクションは sections で定義され、ビューは views で定義されます。</description>
    </item>
    
    <item>
      <title>画面グループ（Screen groups）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/screen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/screen/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Screen groups
画面グループ（Screen groups） 画面グループは、複数の画面を持つレイアウト コンテナで、スクロールするページのコンテンツやウィジェットを整理するためのものです。各画面はメイン ステージを持ち、画面グループのテンプレートによってはスクロール パネルを持つこともできます。画面グループにスクロールすると、画面の高さ全体を占めます。画面グループにスクロール パネルがある場合、エンド ユーザーがパネル内のコンテンツをスクロールしても、メイン ステージはその場に留まり、最後のパネルがスクロールしたときにのみ切り替わります。画面グループにパネルがない場合は、メイン ステージは画面の高さいっぱいにスクロールするまで固定されます。
app config では、画面グループは screenGroups で定義され、画面は screens で定義されます。</description>
    </item>
    
    <item>
      <title>レイアウト（Layout）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/layout/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Layout
レイアウト（Layout） レイアウトは、レイアウト コンテナにコンテンツを配置する方法を定義します。コンテンツには、ウィジェット、セクション、または画面グループが含まれ、レイアウト コンテナには、ページ、ビュー、またはダイアログなどがあります。ArcGIS Experience Builder には、いくつかのレイアウト規則があります。たとえば、新しいページを作成するときに、Fixed レイアウトまたは Flow レイアウトを選択したり、Layout ウィジェットを使用して異なるレイアウトを作成したりすることができます。
アプリ コンフィグでは、レイアウトは layouts プロパティで定義され、レイアウト コンテナは layout id でレイアウトを参照します。レイアウト コンテナには、異なるサイズ モードでのレイアウトを定義する layouts オブジェクト プロパティがあります。Experience Builder では、Large、Medium、Small の各サイズ モードをサポートしています。レイアウトが定義されていないサイズ モードでは、アプリの設定で定義された mainSizeMode レイアウトが使用されます。
フレームワークのレイアウト コンテナの他に、ウィジェットもレイアウト コンテナになることができます。ウィジェットがレイアウト コンテナになると，ユーザーは他のウィジェットをドラッグ アンド ドロップすることができます。例えば、Map や Card はレイアウト コンテナ ウィジェットです。レイアウト コンテナ ウィジェットは、manifest.json で layouts プロパティを宣言し、LayoutEntry コンポーネントを使用する必要があります。パフォーマンス上の理由から、以下のロジックを使用する必要があります。
import {LayoutEntry} from &amp;#39;jimu-layouts/layout-runtime&amp;#39; let LayoutEntryComponent if (window.jimuConfig.isInBuilder) { LayoutEntryComponent = this.props.builderSupportModules.LayoutEntry } else { LayoutEntryComponent = LayoutEntry } </description>
    </item>
    
    <item>
      <title>テーマ（Theme）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/theme/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Theme
テーマ（Theme） テーマは、エクスペリエンスの外観と使用感を定義します。エクスペリエンスは、すぐに使える (OOB) テーマがあり、カスタム テーマの作成も可能です。テーマ開発については、theme development をご覧ください。
app config では、アプリが使用するテーマは theme で定義されます。テーマをカスタマイズした場合、そのカスタマイズ内容は customTheme に保存されます。</description>
    </item>
    
    <item>
      <title>ウィジェット（Widget）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/widget/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Widget
ウィジェット（Widget） ウィジェットは設定可能な機能単位で、エクスペリエンスのページを作成するために使用されるビルディング ブロックです。Experience Builder は、マップ、ボタン、リストなどのすぐに使える（OOB）ウィジェットが用意されており、カスタム ウィジェットを作成することも可能です。ウィジェットは通常、ユーザーがビルダー環境で機能を設定できるように設定 UI を提供します。ウィジェットに設定可能なオプションがありますが、設定 UI が含まれていない場合は、JSON エディタを使用して設定することが可能です。
ウィジェットの実装についてはこちらをご覧ください。
app config では、widgets でウィジェットを定義します。</description>
    </item>
    
    <item>
      <title>Jimu</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/jimu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/jimu/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Jimu
Jimu Jimu は、設定可能なエクスペリエンスを作成するために使用される JavaScript ライブラリで、以下のようなパッケージで構成される拡張フレームワークです。
 jimu-arcgis パッケージは、ArcGIS Maps SDK for JavaScript を実行するためのクラスとメソッドが含まれています。よく使われるクラスは JimuMapView と JimuMapViewComponent です。 jimu-core パッケージは、ウィジェットのプロパティ、メッセージ アクション、データ ソースを扱うためのインターフェイスと型を提供します。また、エクスペリエンスを通じて使用されるいくつかのクラスも定義しています。 jimu-for-builder パッケージは、SettingChangeFunction や WidgetSettingProps といったウィジェット設定ページを開発するためのクラスを提供します。 jimu-for-test パッケージは、ユニット テストに使用できるクラス、型、関数が含まれています。 jimu-ui パッケージは、エクスペリエンスが使用するすべての UI コンポーネントが含まれています。パフォーマンス上の理由から、UI コンポーネントは 3 つのカテゴリに分かれています。jimu-ui のエントリには、Button や Input などの一般的な UI コンポーネントが含まれています。jimu-ui/basic 以下のエントリには、ColorPicker や QRCode などの目的に応じたコンポーネントが含まれます。jimu-ui/advanced 以下のエントリは重く、複雑です。例えば、setting-components エントリには、ウィジェットの設定で使用される可能性のある複数のコンポーネントが含まれています。  これらのパッケージは同じ構造パターンを使用しているため、同じベストプラクティスに沿って使用することができます。各パッケージは import するためのいくつかのエントリを定義し、これらのエントリはパッケージのルートフォルダの下に置かれます。lib フォルダ内のコンテンツは，パッケージの内部コンテンツとみなされますので，ウィジェットには import しないでください。例えば、jimu-ui の Button コンポーネントを使用する必要がある場合は、import {Button} from &#39;jimu-ui&#39; ではなく、import {Button} from &#39;jimu-ui/lib/components/button&#39; のようにインポートする必要があります。</description>
    </item>
    
    <item>
      <title>データ ソース（Data source）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/data-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/data-source/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Data sources
データ ソース（Data source） データ ソースは、ウィジェットがどのようにデータにアクセスするかを定義します。例えば、データがリモートサーバーからのものである場合、ウィジェットはクライアント側にクエリするために、データ ソース クラスを使用します。ウィジェットでデータが生成された場合、それ自身をデータ ソース クラスに入れることで、別のウィジェットで使用することができます。
高レベルでは、データ ソースはスキーマといくつかのレコードを持ち、子/親データ ソースを持つ場合があります。さらに、すべてのデータ ソースは、それを識別するのに役立つ型、ID、ステータスがあります。 DataSource インターフェースは jimu-core パッケージで定義されており、これは以下のメソッドとプロパティのいくつかを定義しています。
 id: データ ソースID。 type: どのタイプのデータ ソースを使っているかチェックするため、ウィジェットで使っているプロパティ。 fetchSchema: すべてのデータ ソースは、スキーマを返すためにこのメソッドを実装しなければなりません。これは、リモート データ サービスで定義されたスキーマです。例えば、ユーザーがExperience Builder でデータ ソースを追加した場合、データ ソースのスキーマはアプリ構成に保存されません。代わりに、最新のデータ ソース スキーマを取得するために fetchSchema メソッドが呼び出されます。 getSchema: ウィジェットがデータ ソースのスキーマとフィールドにアクセスするために使用するメソッドです。 getRecords: ウィジェットがデータ ソースのデータレコードにアクセスするために使用するメソッドです。 getStatus: ウィジェットはこのメソッドを使用してデータ ソースのステータスを取得します。これらのステータスには、NotReady、Unloaded、Loading、Loaded および LoadError があります。NotReady はウィジェットの出力データ ソース専用です。出力データ ソースのインスタンスが作成されても、そのインスタンスは使用する準備ができていません。出力データ ソースを生成するウィジェットはデータ ソースを使用可能な状態にするアクション (DataSourceChanged) を送る必要があります。データ ソースのステータスが準備できていない場合、クエリは空の結果を返します。その他のクエリ可能なデータ ソースでは、既定のステータスは Unloaded です。データが要求されると Loading に変更され、最後に Loaded または LoadError に変更されます。  1 つのデータ ソースには、サブ データ ソースを含めることができます。その結果、使いやすくするために複数のデータ ソースを含めることができます。このようなデータ ソースを DataSourceSet と呼びます。WebMapDataSource は DataSourceSet です。DataSourceSet も、isDataSourceSet プロパティをtrue に設定していれば、データ ソースの一種です。データ ソースは DataSourceManager で管理し、データ ソースの作成や取得を行います。</description>
    </item>
    
    <item>
      <title>データアクション（Data action）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/data-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/data-action/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Data action
データアクション（Data action） データアクションは、データレコードのコレクションを拡張可能な方法で処理する方法を提供します。
データアクションは Data Action インターフェイスによって定義され、isSupported と onExecute という 2 つの重要なメソッドを持っています。
 isSupported が呼び出されると、アクションがデータを処理できるかがチェックされます。サポートされていないデータアクションは実行中は非表示になります。 onExecute メソッドは DataRecordSet インスタンスとオプションのアクション構成を受け取ります。DataRecordSet インスタンスには、データ ソース、オプションのデータ レコードの配列、フィールドが含まれます。  どちらのメソッドも、データ ソース、オプションのデータ レコード配列およびフィールドを含む DataRecordSet インスタンスの配列を取得できます。これら 2 つのメソッドは、DataLevel と widgetId パラメーターも受け取ります。DataLevel は、DataRecordSet がすべてのレコードを含むか、レコードのサブセットを含むかを示すために使用されます。
フレームワークは CSV へのエクスポートや JSON へのエクスポートなどのデータアクションを提供します。ウィジェットもデータアクションを提供できます。例えば、Map ウィジェト手ゃ &amp;ldquo;画面移動 (pan to)&amp;rdquo; と &amp;ldquo;ズーム (zoom to)&amp;rdquo; というデータアクションを提供します。ウィジェットにデータアクションを実装するには、manifest.json でデータアクションを宣言し、AbstractDataAction を継承したクラスを作成します。
データアクションによっては、アクションの動作を設定するための UI が必要な場合があります。これを実現するには、manifest.json で settingUri を宣言します。アクション設定の UI コンポーネントは、いくつかの差し込まれたプロパティを持つ React コンポーネントです。ユーザーが設定を変更したら、this.props.onSettingChange を呼び出して設定を保存し、onExecute メソッドで利用できるようにします。</description>
    </item>
    
    <item>
      <title>メッセージ と アクション（Message and action）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/message-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/message-action/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Message and action
メッセージ と アクション（Message and action） メッセージ/アクションは、ウィジェットからウィジェット、ウィジェットからフレームワーク、フレームワークからウィジェットへの通信をサポートする方法です。 ウィジェット/フレームワークはメッセージを公開したり、メッセージを聞いたりすることができます。メッセージは jimu フレームワークによって定義される MessageType によって識別されます。jimu には ExtentChange や DataRecordsSelectionChange のようないくつかのメッセージタイプが定義されています。
メッセージの発行（Publishing a message） ウィジェットは，MessageManager.getInstance().publishMessage(message) を呼び出してメッセージを発行します．例えば、List ウィジェットでは，リストアイテムがクリックされたときに DataRecordsSelectionChange メッセージを発行したり，Map ウィジェットでは，ビューが変更されたときに ExtentChange メッセージを発行して，List ウィジェットのコンテンツを更新したりします。以下の MessageTypes がサポートされています。
 StringSelectionChange ExtentChange DataRecordsSelectionChange DataRecordSetChange  各メッセージには、それを定義するクラスがあります。例えば、ExtentChange メッセージは ExtentChangeMessage クラスで定義され、このクラスはメッセージのペイロードである extent プロパティを定義します。
メッセージを公開するために、ウィジェットは manifest.json ファイルで公開メッセージを宣言する必要があります。
&amp;#34;publishMessages&amp;#34;: [ &amp;#34;DATA_RECORDS_SELECTION_CHANGE&amp;#34; ] メッセージアクションの作成（Creating a message action） メッセージアクションを作成するには、AbstractMessageAction クラスを継承する必要があります。メッセージアクションの開発に役立つメソッドや関数がいくつかあります。
filterMessageType メソッドは、利用可能なアクションのフィルタリングに使用されます。
export default class QueryAction extends AbstractMessageAction{ filterMessageType(messageType: MessageType, messageWidgetId?</description>
    </item>
    
    <item>
      <title>マップ/シーン ビュー（Map/Scene View）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/map-scene-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/map-scene-view/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Map/Scene View
マップ/シーン ビュー（Map/Scene View） ビューの概念は ArcGIS Maps SDK for JavaScript と同じですが、Experience Builder では、ウィジェットやメッセージ/アクションなどを作成する際に一貫した拡張性モデルを確保するために、ビューは JimuMapView としてラップされます。JimuMapView オブジェクトを作成するには、ウィジェットは JimuMapViewManager.createJimuMapView() メソッドを使用します。JimuMapView オブジェクトは、主に以下のプロパティを持っています。
 view: マップ/シーン ビュー オブジェクト datasourceId: ビューを作成するデータソース (webmap/webscene) mapWidgetId: オブジェクトを作成するビュー jimuLayerViews: レイヤー ビュー オブジェクトのラッパー  Experience Builder では、マップ ウィジェットが JimuMapView オブジェクトを作成します。ウィジェットが JimuMapView オブジェクトを使用する必要がある場合、設定ページの MapWidgetSelector コンポーネントを使用して マップ ウィジェットを選択することができます。マップ ウィジェットの ID を取得した後、ウィジェットは JimuMapViewComponent を使って、作成された JimuMapView オブジェクトを取得することができます。JimuMapView オブジェクトを選択するには、設定ページの JimuMapViewSelector コンポーネントを利用します。</description>
    </item>
    
    <item>
      <title>拡張ポイント（Extension points）</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/extension-points/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/experience-builder/core-concepts/extension-points/</guid>
      <description>出典：ArcGIS Experience Builder - Guide - Extension points
拡張ポイント（Extension points） Jimu ライブラリを使用すると、ArcGIS Experience Builder を拡張することができます。多くの場合、カスタム ウィジェットやテーマを作成することで Experience Builder を拡張します。また、Jimu エクステンションにより、より深いカスタマイズを行うことができます。
Jimu ライブラリでは、特定の拡張ポイントが定義されています。拡張ポイントとは、エクステンションが準拠すべきインターフェイスを定義したものです。エクステンションとは、拡張ポイントのインターフェイスを実装したクラスのことです。このインターフェイスは、jimu-core からエクスポートされた extensionSpec です。ウィジェットでエクステンションを提供するには、ウィジェットの manifest.json ファイルでエクステンションを宣言する必要があります。
&amp;#34;extensions&amp;#34;: [ { &amp;#34;point&amp;#34;: &amp;#34;&amp;lt;Extension point name&amp;gt;&amp;#34;, &amp;#34;uri&amp;#34;: &amp;#34;&amp;lt;Extension uri, relative to src folder&amp;gt;&amp;#34; } ] Jimu では、API ドキュメントで定義されている様々な拡張ポイントが定義されています。よく使われる拡張ポイントは以下の 2 つです。
  AppConfigProcessor - この拡張ポイントのエクステンションは、AppConfig を受け取り、処理された app config を解決するプロミスを返す必要があります。これは、文字列の翻訳（Translation サンプルを参照）のように、app config を実行時に修正するために使用できます。この処理は、app config がロードされた直後に起動されます。
  DependencyDefine - この拡張機能を使用すると、初期化が必要なサードパーティのライブラリを使用できます。
  ReduxStore - この拡張機能を使用すると、ウィジェットの Redux 状態の actions と reducers を定義できます。</description>
    </item>
    
  </channel>
</rss>
