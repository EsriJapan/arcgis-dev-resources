<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ArcGIS API for Python on ArcGIS for Developer 開発リソース集</title>
    <link>https://esrijapan.github.io/arcgis-dev-resources/tips/python/</link>
    <description>Recent content in ArcGIS API for Python on ArcGIS for Developer 開発リソース集</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
	<atom:link href="https://esrijapan.github.io/arcgis-dev-resources/tips/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ArcGIS API for Python のコンセプト</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-concepts/</guid>
      <description>ArcGIS API for Python のコンセプト ArcGIS API for Python (以下、Python API) は、Web GIS (ArcGIS Online / ArcGIS Enterprise) を活用してマップと地理空間データを扱うための Python ベースの API です。Python のベスト プラクティスに基づき、標準的なイディオムやデータ構造を用いた、シンプルで使いやすい設計になっており、GIS データの可視化や解析の実行だけでなく、ユーザー、グループ、アイテムなどを管理するためのシンプルで使いやすいツールを提供します。 さらに、自身が所有しているデータだけでなく、Esri 等が提供するすぐに使えるマップやデータにアクセスすることも可能です。 また、Pandas や Jupyter Notebook といった、他の Python 向けのライブラリやツールとの連携で、より豊富な機能を活用することが可能です。
 Python API のアーキテクチャ Python API は、Web GIS プラットフォームを使用する目的で実装されています。 Python API には、ArcGIS プラットフォーム上で利用するデータやユーザの認証情報など、各オブジェクトを管理して作業するためのモジュール、クラス、関数、およびタイプがあります。
Python API は arcgis パッケージとして配布されています。 このパッケージの中には、最も基本になる gis モジュールを中心に、Web GIS で使用できる機能がさまざまなモジュールとして編成されています。
gisは最も重要なモジュールで、Web GIS への入口となり、ユーザー、グループ、およびコンテンツを管理 (作成、読み込み、更新、削除) する機能を提供します。Web GIS の管理者権限をもつユーザーは、自身の組織のメンバー、グループなどの管理にこのモジュールを使用します。
緑色のモジュールは、さまざまな空間解析に用いる地理情報データセットにアクセスするために使用します。これらのモジュールには、特定のタイプの空間データを操作するための関数、ジオプロセシング処理、ArcGIS で使用できる様々なデータに対応したクラス、およびそれらを補助するようなヘルパー クラスなどが含まれています。
青色のモジュールは、GIS のワークフローをサポートする追加的な機能を提供します。住所から緯度経度を特定するジオコーディング モジュール、フィーチャのジオメトリを表すモジュール、そしてサード パーティーのジオプロセシング ツールをインポートして使用するためのジオプロセシング モジュール等が含まれています。</description>
    </item>
    
    <item>
      <title>ArcGIS API for Python のための基礎環境：conda入門</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-conda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-conda/</guid>
      <description>ArcGIS API for Python (以下、Python API) を使用する際、conda を利用すると Python の環境やパッケージを管理することが容易になります。ここでは、conda の基本について簡単に説明します。conda について基本的な事項を把握しておきますと、この後のインストールガイドでの環境作成を行いやすくなります。
conda の基本 conda の基本について説明します。conda は Python と Python で使用できるライブラリのインストールやバージョンを管理するためのツールです。 conda を使用する場合、次の 2 つの選択肢があります。
 Anaconda Distribution : Python とデータサイエンス向けの Python パッケージなどを提供するプラットフォームです (以下、Anaconda)。 Miniconda : Anaconda をコンパクトにしたもので、Python、conda、それらの依存パッケージ、その他の最小限のパッケージをインストールします。ArcGIS Pro をインストールした場合、Miniconda も同時にインストールされます。  Anaconda と Miniconda の詳しい違いは Anaconda or Miniconda (英語) のページをご覧ください。※ pip でも Python API をインストールすることができますが、初心者には conda が推奨されています。参考: ArcGIS API for Python - Install and set up (英語)
conda をより深く理解したい方は Getting Started with Conda (英語) チュートリアルをご覧ください。</description>
    </item>
    
    <item>
      <title>インストール ガイド</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-install/</guid>
      <description>ArcGIS API for Python (以下、Python API) を使用するための環境構築は主に 2 つあります。一つは ArcGIS Pro でインストールする方法、もう一つは Anaconda でインストールする方法です。Python API は、arcgis という名前のパッケージで Anaconda Cloud 等で配布されています。Anaconda Cloud 上のパッケージは conda を使用してインストールやバージョン管理を行うことができます。conda の詳細については ArcGIS API for Python のための基礎環境：conda入門 を参照してください。
ArcGIS Pro と Anaconda の違いについては以下のブログもご参照ください。
 ArcGIS API for Python のコアコンセプト その 2：Anaconda、Conda、Jupyter Notebook、そしてArcGIS Pro  STEP 1: Python API をインストールする  ArcGIS Pro でインストールする Aaconda 経由でインストールする  STEP 2: arcgis パッケージをアップグレードする  ArcGIS Pro 2.3 以上の環境の場合 ArcGIS Pro 2.</description>
    </item>
    
    <item>
      <title>Jupyter Notebook を使ってみよう</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-jnsetup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-jnsetup/</guid>
      <description>ここでは、対話的に Python コードを実行し、出力を地図やグラフとして視覚化することができる Jupyter Notebook をご紹介します。Jupyter Notebook はオープンソ－スとして公開されている開発ツールのひとつで、ArcGIS API for Python (以下、Python API)はこのツール上でマップ等を表示することができます。Jupyter Notebook の詳細については、Jupyter の公式マニュアルおよびクイックスタートガイドを参照してください。また、サポートされているブラウザについてもご確認ください。Jupyter Notebook がサポートしていないブラウザ（Internet Explorer 等）ではマップ等が表示されないことがあります。
Jupyter Notebook の起動 conda と Python API がインストールされたら、Python コマンドプロンプト (ArcGIS Pro 経由でインストールした場合) または、Anaconda Prompt (Anaconda でインストールした場合) 等のターミナル アプリケーションに次のコマンドを入力して Jupyter Notebook を起動します。
jupyter notebookもし起動できなかった場合は次のコマンドをお試しください (参考: Jupyter fails to start)。
jupyter-notebook他、Windows OS を実行している場合はコマンド プロンプトまたは PowerShell ウィンドウでも代用できます。以下は、Windows のコマンドプロンプトからコマンドを実行した場合の画面のスクリーンショットです。
Python API を root 以外の仮想環境を作成しインストールした場合、Jupyter Notebook を起動する前にその仮想環境をアクティベートする必要があります。root 以外の仮想環境を使用するメリットと仮想環境の作成および管理する方法の詳細については、公式のマニュアルページを参照してください。
Esri では GitHub 上でサンプルのノートブック (*.ipynb) を公開していますが、こうしたノートブックをダウンロードしてを実行したい場合は、Jupyter Notebook を起動する前に、ノートブックを格納したディレクトリに移動 (cd) する必要があります。 上の例では、ノートブックが C:\code ディレクトリに配置されています。</description>
    </item>
    
    <item>
      <title>Jupyter Lab を使ってみよう</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-jnlabsetup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-jnlabsetup/</guid>
      <description>JupyterLab は、コード、データ、そして Jupyter Notebook のファイル形式（*.ipynb）を扱う最新の対話型開発環境（IDE）です。Jupyter Notebook 同様、オープンソースとして公開されています。ArcGIS API for Python（以下、Python API ）のバージョン 1.5.0 以降で対応しています。
JupyterLab は、より柔軟で強力なユーザー体験を実現するために Jupyter Notebook の主要コンポーネント (ノートブック、ターミナル、テキスト エディター、ファイル ブラウザー、ipywidgets など) をベースに構築されています。JupyterLab の詳細は JupyterLab のブログや GitHub をご参照ください。
JupyterLab をはじめる Python API を JupyterLab で使用するためには、いくつかインストールなどの設定が必要です。
インストール   バージョン 1.5.0 以上の Python API をインストールするか、既存の環境を 1.5.0 以上にアップデートするターゲットの仮想環境がある場合は、アクティベート（activate）してから行います。Python API のインストールまたはアップデートの方法はインストールガイドをご覧ください。
  次の 2 つのコマンドを実行します jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter labextension install arcgis-map-ipywidget@バージョン番号      以上の設定が完了したら、次のコマンドで JupyterLab を起動します。</description>
    </item>
    
    <item>
      <title>スクリプト実行の自動化</title>
      <link>https://esrijapan.github.io/arcgis-dev-resources/tips/python/automate-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://esrijapan.github.io/arcgis-dev-resources/tips/python/automate-tasks/</guid>
      <description>ArcGIS API for Python や ArcPy は、タスク スケジューラなどと組み合わせることで、様々な GIS タスクの実行を自動化することが可能です。ここでは、例として以下のようなディレクトリ構成で実行する Python スクリプトを作成したと想定し、そのスクリプトを Windows 及び Linux で 30 分ごとに無期限で定期実行する方法を紹介します。
py-script/├ config.ini└ task.py
task.py は実行する Python スクリプト、config.ini は task.py の実行に必要なパラメータを記載した設定ファイルとします。
Windows のタスク スケジューラを使用する場合 Windows ではタスク スケジューラを使用することでプログラムやスクリプトを決められた時間や一定の間隔で実行することができます。
タスク スケジューラは以下の手順で設定します。
 タスク スケジューラを開く  スタート メニューからタスク スケジューラを検索して開く     右側の [操作] ペインから [タスクの作成] をクリック  新規タスクを作成するウィザードが開きます     [全般] タブ内のパラメーターを設定する  名前：タスクの名前 説明：タスクの説明を記載 セキュリティ オプション：  タスク実行時に使う Windows のユーザーアカウントを指定 [ユーザーがログオンしているかどうかにかかわらず実行する] をクリック [最上位の特権で実行する] にチェックを入れる   [構成] は使用している Windows のバージョンに合わせる (今回は Windows 10)     [トリガー] タブ内のパラメーターを設定する  [新規] をクリックし、新しいトリガーを作成 [タスクの開始] は [スケジュールに従う] をドロップダウンから選択 任意の開始時間を指定 [繰り返し間隔] にチェックを入れ、30分間を指定 [継続時間] は [無期限] を指定     [操作] タブのパラメーターを設定する  [操作] のドロップダウンから [プログラムの開始] を選択 [プログラム/スクリプト] で実行する Python の エグゼキュータブル ファイルのパスを指定  上の画像では ArcGIS Pro の Python パッケージ マネージャー で作成した環境の Python を指定しています。 パスが不明な場合、実行したい環境で ArcGIS Pro を起動し、Python ウィンドウを表示させて以下のコードを実行することで確認することができます。  import sys sys.</description>
    </item>
    
  </channel>
</rss>