[
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/javascript/",
	"title": "ArcGIS API for JavaScript",
	"tags": [],
	"description": "ArcGIS API for JavaScript の開発に役立つガイド集です。",
	"content": "ArcGIS API for JavaScript の開発に役立つガイド集です。\n\rインストール ガイド\rArcGIS API for JavaScript ライブラリのインストール方法を紹介します。\n\r\rバージョン 4.x と 3.x の選択\r3.x と 4.x で提供されている機能の比較表です。\n\r\rバージョン 3.x から 4.x への移行\rバージョン 3.x の API で作成した既存のアプリケーションを 4.x に移行するために必要な情報を紹介します。\n\r\rウィジェット開発\rウィジェットと呼ばれる、再利用可能な UX コンポーネント作成の基礎を紹介します。\n\r\rArcade\rArcGIS プラットフォーム標準で利用できる条件式のためのスクリプト言語 Arcade について紹介します。\n\r\rカスタム フォント\r独自のフォントを使用する手順を紹介します。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-concepts/",
	"title": "ArcGIS API for Python のコンセプト",
	"tags": [],
	"description": "ArcGIS API for Python のプロダクト コンセプトと動作要件について紹介します。",
	"content": " ArcGIS API for Python のコンセプト ArcGIS API for Python (以下、Python API) は、Web GIS (ArcGIS Online / ArcGIS Enterprise) を活用してマップと地理空間データを扱うための Python ベースの API です。\nPython のベスト プラクティスに基づき、標準的なイディオムやデータ構造を用いた、シンプルで使いやすい設計になっており、GIS データの可視化や解析の実行だけでなく、ユーザー、グループ、アイテムなどを管理するためのシンプルで使いやすいツールを提供します。 さらに、自身が所有しているデータだけでなく、Esri 等が提供するすぐに使えるマップやデータにアクセスすることも可能です。 また、Pandas や Jupyter Notebook といった、他の Python 向けのライブラリやツールとの連携で、より豊富な機能を活用することが可能です。\n ArcGIS API for Python がどのようなモジュールから成り立っているのかを解説します。 * [動作要件](#動作要件) OS などシステム要件と推奨する開発環境をご紹介します。 * [ガイドページとサンプルコード](#ガイドページとサンプルコード) 用途別に、初めの一歩として有用なサンプルをご紹介します。 -- Python API のアーキテクチャ Python API は、Web GIS プラットフォームを使用する目的で実装されています。 Python API には、ArcGIS プラットフォーム上で利用するデータやユーザの認証情報など、各オブジェクトを管理して作業するためのモジュール、クラス、関数、およびタイプがあります。\nPython API は arcgis パッケージとして配布されています。 このパッケージの中には、最も基本になる gis モジュールを中心に、Web GIS で使用できる機能がさまざまなモジュールとして編成されています。\nPython API のモジュールを表したダイアグラム\n gisは最も重要なモジュールで、Web GIS への入口となり、ユーザー、グループ、およびコンテンツを管理 (作成、読み込み、更新、削除) する機能を提供します。Web GIS の管理者権限をもつユーザーは、自身の組織のメンバー、グループなどの管理にこのモジュールを使用します。\n緑色のモジュールは、さまざまな空間解析に用いる地理情報データセットにアクセスするために使用します。これらのモジュールには、特定のタイプの空間データを操作するための関数、ジオプロセシング処理、ArcGIS で使用できる様々なデータに対応したクラス、およびそれらを補助するようなヘルパー クラスなどが含まれています。\n青色のモジュールは、GIS のワークフローをサポートする追加的な機能を提供します。住所から緯度経度を特定するジオコーディング モジュール、フィーチャのジオメトリを表すモジュール、そしてサード パーティーのジオプロセシング ツールをインポートして使用するためのジオプロセシング モジュール等が含まれています。\nオレンジ色のモジュールは、GIS データの分析結果を可視化して共有することを可能にします。 widgets モジュールには、Jupyter Notebook でマップとレイヤーを可視化する機能を実装しています。 mapping モジュールには、Web マップと Web シーンに対応し、それぞれのレイヤーを操作するためのタイプと関数があり、apps モジュールは ArcGIS で構築された Web アプリケーションの作成と管理に役立ちます。\n各モジュールの詳しい内容は、米国Esri ガイドページ（英語）をご覧ください。\n動作要件 Python API は次の環境と動作要件が必要です。\n オペレーティング システム  Windows (32 /64 ビット) /macOS/ Linux ※macOS/Linux は国内サポート対象外となります  Python バージョン 3.5+\n 開発環境\n Jupyter Notebook※ Jpyter Lab※ 他、Python 開発環境/テキスト エディター   ※ Jupyter Notebook および Jupyter Lab はオープンソースとして利用できる開発環境のひとつです。 Python API はこれらの開発ツールでの地図出力をサポートしてます。利用可能なブラウザは次の通りですが、詳細については Jupyter Notebook のシステム要件をご覧ください。\n Google Chrome FireFox Safari  サポートする最新の動作環境につきましては米国Esri システム要件（英語）または、動作環境もご参照ください。\nEsri サンプル ガイド ページ\n * [`gis`を使って、ユーザー情報やコンテンツを検索してみる](https://developers.arcgis.com/python/guide/using-the-gis/#Using-the-GIS) * [【開発者向け】:ノートブックをはじめる](https://developers.arcgis.com/python/sample-notebooks/your-first-notebook/) * [【管理者向け】:グループをバッチで作成する](https://developers.arcgis.com/python/sample-notebooks/batch-creation-of-groups/) * [【GISデータ解析者向け】:自然現象を解析する](https://developers.arcgis.com/python/sample-notebooks/chennai-floods-analysis/) * [【コンテンツ公開者向け】:シェープファイルや CSV からコンテンツを作成する](https://developers.arcgis.com/python/sample-notebooks/publishing-sd-shapefiles-and-csv/) -- 次は、Python API を利用するArcGIS API for Python のための基礎環境：conda入門についてご紹介します。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-app/create-startup-app-js/",
	"title": "JavaScript",
	"tags": [],
	"description": "ArcGIS API for JavaScript を用いた Web ブラウザー向け地図アプリの作成方法を紹介します。",
	"content": " サンプル プロジェクトのダウンロード このリポジトリ（arcgis-dev-resources）には開発を試してみたい方向けのサンプル コードが含まれています。ダウンロードする際の方法は 2 通りあります。\n リポジトリをご自身のアカウントに Fork（複製）\n GitHub にログインして、arcgis-dev-resources ページを開いて [Fork] をクリックすると、ご自身のアカウントに同じリポジトリが作成されます。 Fork 後はご自身のローカル マシンにクローンを作成します。  zip ファイルでダウンロード（※GitHub アカウントをお持ちでない方向け）\n  arcgis-dev-resources ページを開いて [Download ZIP] をクリックするとプロジェクト ファイル一式が手に入ります。\n地図の表示 まずはダウンロードしたサンプル コードを実行してみましょう。\n ダウンロードしたサンプル コード（arcgis-dev-resources/startup/javascript/4.x/map/index.html）を Web ブラウザーにドラッグ＆ドロップします。\n Web サーバーをお持ちの方はサンプル コードを Web サーバーにホストしてアクセスすることを推奨します。http://localhost/arcgis-dev-resources/startup/javascript/4.x/map/index.html のように localhost を指定してアクセスできます。  この状態では地図は表示されません。サンプル コードをテキスト エディターで開いてみましょう。\n 26 行目にある以下のコードの \u0026lt;Web マップ ID\u0026gt; と記載されている箇所に Web マップの作成で作成した Web マップ ID を上書きします。このコードで Web マップを参照します。\n// Web マップの参照 var map = new WebMap({ portalItem: { id: \u0026quot;\u0026lt;Web マップ ID\u0026gt;\u0026quot; } });  まだ Web マップを作成しておらず、すぐに試してみたい方はサンプル Web マップをご利用ください。\n 31～34 行目のコードは地図のビューを作成しています。先のコードで参照した Web マップを地図データのソースとして、実際に地図の表示を行います。2D 地図は MapView、3D 地図は SceneView を使用します。\n2D の場合\n// 地図ビュー var view = new MapView({ map: map, container: \u0026quot;viewDiv\u0026quot; });  3D の場合\n// 地図ビュー var view = new SceneView({ map: map, container: \u0026quot;viewDiv\u0026quot; });   このように地図のビューを切り替えるだけで簡単に 2D と 3D を使い分けることができます。\n Web アプリを実行すると、以下のように地図が表示されます。\n2D 3D   検索機能の追加 検索機能の実装方法はいくつかありますが、ここではもっとも簡単な方法をご紹介します。検索機能の実装には esri/widgets/Search モジュール（検索ウィジェット）を使用します。検索ソースにはサンプル Web マップに含まれる東京都 23 区のデータを使用します。 検索ウィジェットは住所検索/属性検索機能を組み込んだ文字入力フォームの UI を提供します。\n ArcGIS API for JavaScript から使用したいモジュールを追加します。モジュールのインポートは require 関数の第一引数に入力される配列内で行います。配列内に検索機能の実装に必要なモジュールを追加します。\nrequire([\u0026quot;esri/views/MapView\u0026quot;, \u0026quot;esri/WebMap\u0026quot;, \u0026quot;esri/widgets/Search\u0026quot;, \u0026quot;esri/layers/FeatureLayer\u0026quot;], function(MapView, WebMap, Search, FeatureLayer) { ... });  以下は検索機能に必要なモジュール一覧です。\n \u0026quot;esri/widgets/Search\u0026quot;: 検索ウィジェット \u0026quot;esri/layers/FeatureLayer\u0026quot;: フィーチャ レイヤー（オプション）  フィーチャ レイヤーは検索ソース、情報テンプレートは検索結果の属性表示を設定するために利用します。 ここで以下の点に注意してください。\n require 関数の第ニ引数の無名関数の引数にはモジュールに対応したクラス名（任意）を定義しますが、これは配列内のモジュールの順序と対応している必要があります  検索ウィジェット作成のスクリプトを記述します。\n// 検索ウィジェット var search = new Search({ view: view, allPlaceholder: \u0026quot;検索キーワードの入力\u0026quot;, sources: [{ layer: new FeatureLayer({ url: \u0026quot;//services.arcgis.com/wlVTGRSYTzAbjjiC/arcgis/rest/services/tokyo_23/FeatureServer/0\u0026quot;, popupTemplate: { title: \u0026quot;東京都 {Name}\u0026quot;, overwriteActions: true } }), // 検索ソースとなるフィーチャ レイヤー placeholder: \u0026quot;検索キーワードの入力\u0026quot;, // プレースホルダー searchFields: [\u0026quot;Name\u0026quot;], // 検索対象となる属性フィールド displayField: \u0026quot;Name\u0026quot;, // 検索結果のポップアップに表示する属性フィールド outFields: [\u0026quot;*\u0026quot;], // 結果として返す属性フィールド name: \u0026quot;東京都\u0026quot;, // 検索ソースの名前 exactMatch: false }] }); search.startup();  \u0026quot;esri/widgets/Search\u0026quot; モジュールが定義する Search クラスは require 関数内でのみ動作します。\n対応するマップを指定するための map プロパティにはマップのオブジェクトを、検索ソースを指定するための sources プロパティには検索ソースの情報を定義します。検索ソースがない状態でも ArcGIS のクラウド サービスが提供する住所検索サービスが標準で含まれています。\nsources.layer には検索ソースとなるレイヤーを定義しますが、必ずしも地図上に表示されているレイヤーを使う必要はありません。サンプルはマップ オブジェクトに存在しない別のレイヤーを検索ソースとして利用します。\nフィールド名の確認は次の手順で紹介します。\n 検索対象とするレイヤーの詳細ページにて、[レイヤー] の項目から対象とするレイヤーをクリックして [サービスの URL] を選択します。  [Fields] という項目にレイヤーのフィールド情報のリストが表示されているので、検索対象とするフィールド名をコピーして searchFields の配列に追加します。\n 検索結果のポップアップに表示する属性情報として利用したい場合は displayField にも入力してください。  最後に検索ウィジェットを地図ビュー上に配置します。\n// 地図ビューに検索ウィジェットを配置 view.ui.add(search, { position: \u0026quot;top-right\u0026quot; });  positon プロパティで地図ビュー上の四隅への配置位置が指定できます。\n Web アプリを実行すると、以下のように地図上に検索ウィジェットが表示され、設定した検索ソースでの検索が可能になります。   アプリの動作が確認できたら ArcGIS の OAuth 認証について学びましょう！\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/android/install-android-100.x/",
	"title": "インストール ガイド",
	"tags": [],
	"description": "初めて ArcGIS Runtime SDK for Android を使用してモバイル マッピング アプリケーションを構築する開発者の方に最も基本的な開発手順を紹介します。",
	"content": " このインストール ガイドでは、初めて ArcGIS Runtime SDK for Android を使用してモバイル マッピング アプリケーションを構築する開発者の方に最も基本的な開発手順を紹介します。このインストール ガイドをお読み頂くことで、ArcGIS Runtime SDK for Android を使用したモバイル マッピング アプリケーション開発の基礎を理解することができます。\nArcGIS Runtime SDK for Android とは ArcGIS Runtime SDK for Android を使うと ArcGIS の機能を Android のネイティブ アプリケーションとして実装することができます。 この SDK には API やリファレンス、サンプルコードなどが含まれています。 詳細は ArcGIS Runtime SDK for Android をご参照ください。\nArcGIS Runtime SDK for Android の開発環境 ここでは次の開発環境にて ArcGIS Runtime SDK for Android を用いたモバイル マッピング アプリケーションの開発手順を説明します。\n Android Studio Android 4.4 (Kitkat: API レベル 19) 以降 OpenGL ES 3.0 以上  ArcGIS Runtime SDK for Android がサポートする最新の動作環境につきましては動作環境をご参照ください。\nJava 8 の使用 Android Studio 3.0 以降では、プラットフォームのバージョンごとに異なる Java 7 のすべての言語機能と Java 8 の言語機能のサブセットをサポートしています。 これらの言語機能は、ArcGIS Runtime SDK の Android ドキュメントおよびサンプルでも使用されています。 これらのコード例がアプリで使用されるときにコンパイルされるようにするには、Java 8 言語機能を使用するように Android Studio でアプリケーションモジュールの互換性を設定します。 設定方法はArcGIS Runtime SDK の設定内を参照してください。\nモバイル マッピング アプリケーションの開発 ここでは、次の構成で ArcGIS Runtime SDK for Android を使ってモバイル マッピング アプリケーションを作成するための基本的な手順を説明します。\n プロジェクトの作成 ArcGIS Runtime SDKの設定 地図表示の実装 モバイル マッピング アプリケーションの実行  プロジェクトの作成 まず Android Studio 上に新しいプロジェクトを作成します。\n Android Studio を起動し [Start a new Android Studio project] をクリックします。すでに Android Studio のプロジェクトが開いている場合は Android Studio のメニューから [File] → [New Project] をクリックします。  [Application name] にアプリケーションの名称を入力します。ここでは「HelloMap」としています。[Company Domain] にドメインを、[Project Location] に作成するディレクトリを入力して [Next] をクリックします。 ここではドメインを「tutorials.esri.com」としています。  [Phone and Tablet] のみにチェックを入れ、ドロップダウン リストから 「API 24: Android 7.0 (Nougat)」を選択して [Next] をクリックします。  Activity を選択します。ここでは「Empty Activity」を選択して [Next] をクリックします。  [Finish] をクリックします。  以上で新しいプロジェクトが作成されます。   ArcGIS Runtime SDKの設定 次に ArcGIS Runtime SDK for Android の API を使えるようにするための設定を行います。\n まずはこのアプリケーションが使用する機能に対して権限を付与します。 Project ツールウィンドウ で「Android」を選択して「Manifests」フォルダの AndroidManifest.xml をダブルクリックして開きます。 インターネットへのアクセス許可するための Permission を追加します。使用する機能に応じて、必要な Permission を追加してください。 java \u0026lt;uses-permission android:name=\u0026quot;android.permission.INTERNET\u0026quot; /\u0026gt; \u0026lt;uses-feature android:glEsVersion=\u0026quot;0x00020000\u0026quot; android:required=\u0026quot;true\u0026quot; /\u0026gt;   build.gradle (Project:HelloMap) をダブルクリックして開きます。ArcGIS の Maven リポジトリの URL を追加します。 java allprojects { repositories { jcenter() // esri arcgis maven リポジトリの追加 maven { url 'https://esri.bintray.com/arcgis' } } }   build.gradle (Module: app) をダブルクリックして開きます。dependencies セクション内に「implementation \u0026lsquo;com.esri.arcgisruntime:arcgis-android:100.6.0\u0026rsquo;」を追加します。 java dependencies { implementation 'com.esri.arcgisruntime:arcgis-android:100.6.0' … }   続いて、Java 8 での機能を使用する設定をandroid中に追加します。 Java 8 で使用可能なラムダ式や特殊なアノーテーションを使用する場合ために、次のようにアプリケーションモジュールの互換性を設定します。 java android { … compileOptions { targetCompatibility 1.8 sourceCompatibility 1.8 } }   ツールバーの [Sync Project with Gradle Files] または build.gradle を変更した後に表示されるメッセージの右にある [Sync Now] をクリックします。 これで準備が整いました。  地図表示の実装 ArcGIS の機能を実装する準備ができたので、アプリケーションに ArcGIS Online のベースマップを表示するための実装を加えます。\n Project ツールウィンドウで [app] → [res] → [layout] と展開し activity_main.xml をダブルクリックして開きます。  左下の [Text] タブをクリックして XML 形式で開きます。TextView 部分を全て削除して以下の MapView エレメントを追加します。 java \u0026lt;com.esri.arcgisruntime.mapping.view.MapView android:id=\u0026quot;@+id/mapView\u0026quot; android:layout_width=\u0026quot;fill_parent\u0026quot; android:layout_height=\u0026quot;fill_parent\u0026quot; \u0026gt; \u0026lt;/com.esri.arcgisruntime.mapping.view.MapView\u0026gt;   Project ツールウィンドウで [app] → [res] → [java] と展開し MainActivity クラスを ダブルクリックして開き、地図表示のためのコードを設定します。\n MainActivity クラスへ次のクラスをインポートします。  import com.esri.arcgisruntime.mapping.view.MapView; import com.esri.arcgisruntime.mapping.ArcGISMap; import com.esri.arcgisruntime.mapping.Basemap;   MainActivity クラスの先頭に次のクラス変数宣言を追加します。  private MapView mMapView;   onCreate() メソッド内の setContentView() を呼び出している後に以下のコードを追加します。 このコードは、レイアウトに定義している MapView の参照を取得し、ベースマップのタイプや初期表示の範囲、縮尺レベルを設定した地図を MapView に設定します。 ここではベースマップに地形図を設定し、初期表示範囲は永田町付近を表示するようにしています。 java mMapView = (MapView) findViewById(R.id.mapView); ArcGISMap map = new Map(Basemap.Type.TOPOGRAPHIC, 35.665731,139.731088, 16); mMapView.setMap(map);  MainActivity クラスへ onPause() メソッド(一時停止)と onResume() メソッド(再開)を追加します。2つのメソッドへはそれぞれ次のコードを追加します。  @Override protected void onPause(){ mMapView.pause(); super.onPause(); } @Override protected void onResume(){ super.onResume(); mMapView.resume(); }   MainActivity は以下のようになります。   ツールバーの [Make Project] または [Build] メニューから [Make Project] をクリックします。   モバイル マッピング アプリケーションの実行 ベースマップを表示するアプリケーションが作成できたので Android 端末にインストールして実行します。\n ツールバーの [Run ‘app’] をクリックします。  接続しているデバイスを選択し [OK] をクリックします。  アプリケーションが起動し東京ミッドタウン付近の地図が表示されます。 スワイプやピンチイン/ピンチアウトで地図を移動したり拡大/縮小したりすることができます。   "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/dotnet/install-dotnet-100.x/",
	"title": "インストール ガイド",
	"tags": [],
	"description": "ArcGIS Runtime SDK for .NET をご使用のマシンにインストールする手順を紹介します。",
	"content": " このインストール ガイドは、ArcGIS Runtime SDK for .NET をご使用のマシンにインストールする手順を紹介します。\nArcGIS Runtime SDK for .NET とは ArcGIS Runtime SDK for .NET は、Windows 及び iOS、Android プラットフォーム向け GIS アプリケーションの開発キット（SDK）です。この SDK を利用することで、データ編集、ジオコーディング、ルート解析など様々な GIS 機能を持ったアプリケーションを Windows デスクトップや Windows タブレット、iOS、Android などの多様なプラットフォーム向けに開発することができます。 詳細は、ArcGIS Runtime SDK for .NET をご参照ください。\nArcGIS Runtime SDK for .NET の開発環境 ArcGIS Runtime SDK for .NET を用いて、Windows や iOS、Android プラットフォーム向けの GIS アプリケーションを開発するには、統合開発環境として Microsoft Visual Studio を使用します。本インストールガイドの手順を行う前に、ご使用のマシンに ArcGIS Runtime SDK for .NET がサポートするバージョンの Windows OS 、Mac OS 及び Microsoft Visual Studio が適切にセットアップされている必要があります。ArcGIS Runtime SDK for .NET がサポートする最新の動作環境につきましては動作環境をご参照ください。\n簡易 アプリケーションの開発 ここでは、WPF、UWP、Xamarin.Forms の新規プロジェクトを作成し、ArcGIS Runtime SDK for .NET を使って地図を表示する簡易アプリケーションを作成するための基本的な手順を説明します。\n WPF アプリケーション UWP アプリケーション Xamarin.Forms アプリケーション  WPF アプリケーション  Visual Studio を起動して [ファイル] メニューから [新規作成] → [プロジェクト] を選択します。\n [新しいプロジェクト] ダイアログが表示されます。ツリー ペインから [インストール済み] → [Visual C#] → [Windows デスクトップ] → [WPF アプリ] を選択します。プロジェクトの名前とプロジェクトを保存するディレクトリを指定して [OK] をクリックします。  新しい WPF アプリケーションのプロジェクトが作成されます。  ArcGIS Runtime SDK for .NET をインストールするために「NuGet パッケージの管理」を開きます。[ソリューション エクスプローラー] から [参照] を右クリックし、[NuGet パッケージの管理] を選択します。  NuGet パッケージの管理から ArcGIS Runtime SDK をインストールします。 検索ボックスに『ArcGIS Runtime』と入力して検索を行います。検索されたリストから「Esri.ArcGISRuntime.WPF」を選択して、インストールをクリックします。  [ライセンスへの同意] 画面が表示されるので、[同意する] をクリックします。[同意する] をクリックすることでインストールが実行されます。 ※インストールが正常に終了した場合は、以下の画面のようにインストール済みの一覧に Esri.ArcGISRuntime.WPF が表示されます。  [ソリューション エクスプローラー] から MainWindow.xaml の [XAML] ビューを開きます。\n Window XAML エレメント内に以下の XML 名前空間参照を追加します。\nxmlns:esri=\u0026quot;http://schemas.esri.com/arcgis/runtime/2013\u0026quot;  \u0026lt;Window x:Class=\u0026quot;MyDesktopApp.MainWindow\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:d=\u0026quot;http://schemas.microsoft.com/expression/blend/2008\u0026quot; xmlns:mc=\u0026quot;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026quot; xmlns:local=\u0026quot;clr-namespace:MyDesktopApp\u0026quot; xmlns:esri=\u0026quot;http://schemas.esri.com/arcgis/runtime/2013\u0026quot; mc:Ignorable=\u0026quot;d\u0026quot; Title=\u0026quot;MainWindow\u0026quot; Height=\u0026quot;450\u0026quot; Width=\u0026quot;800\u0026quot;\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/Window\u0026gt;  上記のコードでは、esri と言う名称で API ライブラリへの参照が宣言されました。これにより、esri という名前空間で API ライブラリ内のコントロールを参照することができるようになります。\n Grid XAML エレメント内に以下のコードを追加します。\n\u0026lt;esri:MapView x:Name=\u0026quot;MyMapView\u0026quot; /\u0026gt;  \u0026lt;Window x:Class=\u0026quot;MyDesktopApp.MainWindow\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:d=\u0026quot;http://schemas.microsoft.com/expression/blend/2008\u0026quot; xmlns:mc=\u0026quot;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026quot; xmlns:local=\u0026quot;clr-namespace:MyDesktopApp\u0026quot; xmlns:esri=\u0026quot;http://schemas.esri.com/arcgis/runtime/2013\u0026quot; mc:Ignorable=\u0026quot;d\u0026quot; Title=\u0026quot;MainWindow\u0026quot; Height=\u0026quot;450\u0026quot; Width=\u0026quot;800\u0026quot;\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;esri:MapView x:Name=\u0026quot;MyMapView\u0026quot; /\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/Window\u0026gt;  [ソリューション エクスプローラー] から MainWindow.xaml.cs を開きます。以下のように Esri.ArcGISRuntime.Mapping 名前空間と ArcGIS Online のベースマップ（道路地図）を表示するコードを追加します。\nusing Esri.ArcGISRuntime.Mapping; namespace MyDesktopApp { public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); Initialize(); } private void Initialize() { var map = new Map(Basemap.CreateStreets()); MyMapView.Map = map; } } }  [F5] キーをクリックして、プロジェクトをデバッグ実行します。WPF アプリケーションが起動し、地図が表示されれば完了です。\n  \nUWP アプリケーション  Visual Studio を起動して [ファイル] メニューから [新規作成] → [プロジェクト] を選択します。\n [新しいプロジェクト] ダイアログが表示されます。ツリー ペインから [インストール済み] → [Visual C#] → [Windows ユニバーサル] → [空白のアプリ] を選択し、プロジェクトの名前とプロジェクトを保存するディレクトリを指定して [OK] をクリックします。  アプリケーションがサポートするプラットフォームのバージョンを選択します。  新しい UWP アプリケーションのプロジェクトが作成されます。  ArcGIS Runtime SDK for .NET をインストールするために「NuGet パッケージの管理」を開きます。[ソリューション エクスプローラー] から [参照] を右クリックし、[NuGet パッケージの管理] を選択します。  NuGet パッケージの管理から ArcGIS Runtime SDK をインストールします。検索ボックスに『ArcGIS Runtime』と入力して検索を行います。検索されたリストから「Esri.ArcGISRuntime.UWP」を選択して、インストールをクリックします。  [ライセンスへの同意] 画面が表示されますので、[同意する] をクリックします。[同意する] をクリックすることでインストールが実行されます。 ※インストールが正常に終了した場合は以下の画面ように、インストール済みの一覧に Esri.ArcGISRuntime.UWP が表示されます。  [ソリューション エクスプローラー] から MainPage.xaml の [XAML] ビューを開きます。\n Window XAML エレメント内に以下の XML 名前空間参照を追加します。\nxmlns:esriUI=\u0026quot;using:Esri.ArcGISRuntime.UI.Controls\u0026quot;  \u0026lt;Page x:Class=\u0026quot;MyUWPApp.MainPage\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:local=\u0026quot;using:MyUWPApp\u0026quot; xmlns:d=\u0026quot;http://schemas.microsoft.com/expression/blend/2008\u0026quot; xmlns:mc=\u0026quot;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026quot; xmlns:esriUI=\u0026quot;using:Esri.ArcGISRuntime.UI.Controls\u0026quot; mc:Ignorable=\u0026quot;d\u0026quot; Background=\u0026quot;{ThemeResource ApplicationPageBackgroundThemeBrush}\u0026quot;\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/Page\u0026gt;  上記のコードでは、esriUI と言う名称で API ライブラリへの参照が宣言されました。これにより、esriUI という名前空間で API ライブラリ内のコントロールを参照することができるようになります。\n Grid XAML エレメント内に以下のコードを追加します。\n\u0026lt;esriUI:MapView x:Name=\u0026quot;MyMapView\u0026quot; /\u0026gt;  \u0026lt;Page x:Class=\u0026quot;MyUWPApp.MainPage\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:local=\u0026quot;using:MyUWPApp\u0026quot; xmlns:d=\u0026quot;http://schemas.microsoft.com/expression/blend/2008\u0026quot; xmlns:mc=\u0026quot;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026quot; xmlns:esriUI=\u0026quot;using:Esri.ArcGISRuntime.UI.Controls\u0026quot; mc:Ignorable=\u0026quot;d\u0026quot; Background=\u0026quot;{ThemeResource ApplicationPageBackgroundThemeBrush}\u0026quot;\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;esriUI:MapView x:Name=\u0026quot;MyMapView\u0026quot; /\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/Page\u0026gt;  [ソリューション エクスプローラー] から MainPage.xaml.cs を開きます。以下のように Esri.ArcGISRuntime.Mapping 名前空間と ArcGIS Online のベースマップ（道路地図）を表示するコードを追加します。\nusing Esri.ArcGISRuntime.Mapping; namespace MyUWPApp { public sealed partial class MainPage : Page { public MainPage() { this.InitializeComponent(); Initialize(); } private void Initialize() { var map = new Map(Basemap.CreateStreets()); MyMapView.Map = map; } } }  [F5] キーをクリックして、プロジェクトをデバッグ実行します。UWP アプリが起動し、地図が表示されれば完了です。   \nXamarin Forms アプリケーション macOS を使用した開発の手順を紹介します。\n Visual Studio for Mac を起動して [ファイル] メニューから [新しいソリューション] を選択します。\n [新しいプロジェクト] 画面が表示されます。ツリー ペインから [マルチプラットフォーム] → [アプリ] → [空白フォームのアプリ] を選択します。  アプリ名を入力し、ターゲット プラットフォームを選択します。[次へ] をクリックします。  プロジェクト名やソリューション名、プロジェクトの場所などを確認して、問題がなければ [作成] をクリックしてプロジェクトを作成します。  新しい Xamarin.Forms アプリケーションのプロジェクトが作成されます。  ArcGIS Runtime SDK for .NET を NuGet パッケージからインストールします。NuGet パッケージのインストールは、Android、iOS とそれぞれに対してインストールを行います。はじめに Android に対してインストールを行います。Android プロジェクトの [パッケージ] を右クリックして、[パッケージの追加] をクリックします。  [パッケージを追加] 画面が起動するので、検索項目の欄に『ArcGIS Runtime』と入力して検索を行います。いくつかパッケージが表示されますが　Xamarin.Forms 用の [Esri.ArcGISRuntime.Xamarin.Forms] を選択して、[パッケージを追加] をクリックします。  [ライセンスの同意] 画面で [同意する] をクリックしてパッケージの追加を行います。  同様の手順で iOS に対してもインストールを行います。iOS プロジェクトの [パッケージ] を右クリックして、[パッケージの追加] をクリックします。  [パッケージを追加] 画面が起動するので、検索項目の欄に『ArcGIS Runtime』と入力して検索を行います。いくつかパッケージが表示されますが　Xamarin.Forms 用の [Esri.ArcGISRuntime.Xamarin.Forms] を選択して、[パッケージを追加] をクリックします。  [ライセンスの同意] 画面で [同意する] をクリックしてパッケージの追加を行います。  [ソリューション エクスプローラー] から MainPage.xaml の [XAML] ビューを開きます。  XAML エレメント内に以下の XML 名前空間参照を追加します。\nxmlns:esriUI=\u0026quot;clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms\u0026quot;  \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;ContentPage xmlns=\u0026quot;http://xamarin.com/schemas/2014/forms\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2009/xaml\u0026quot; xmlns:local=\u0026quot;clr-namespace:MyXamarinFormsApp\u0026quot; xmlns:esriUI=\u0026quot;clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms\u0026quot; x:Class=\u0026quot;MyXamarinFormsApp.MainPage\u0026quot;\u0026gt; \u0026lt;StackLayout\u0026gt; \u0026lt;!-- Place new controls here --\u0026gt; \u0026lt;Label Text=\u0026quot;Welcome to Xamarin.Forms!\u0026quot; HorizontalOptions=\u0026quot;Center\u0026quot; VerticalOptions=\u0026quot;CenterAndExpand\u0026quot; /\u0026gt; \u0026lt;/StackLayout\u0026gt; \u0026lt;/ContentPage\u0026gt;  上記のコードでは、esriUI と言う名称で API ライブラリへの参照が宣言されました。これにより、esriUI という名前空間で API ライブラリ内のコントロールを参照することができるようになります。\n StackLayout エレメントを以下のコードに置き換えます。\n\u0026lt;Grid\u0026gt; \u0026lt;esriUI:MapView x:Name=\u0026quot;MyMapView\u0026quot;/\u0026gt; \u0026lt;/Grid\u0026gt;  \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;ContentPage xmlns=\u0026quot;http://xamarin.com/schemas/2014/forms\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2009/xaml\u0026quot; xmlns:local=\u0026quot;clr-namespace:MyXamarinFormsApp\u0026quot; xmlns:esriUI=\u0026quot;clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms\u0026quot; x:Class=\u0026quot;MyXamarinFormsApp.MainPage\u0026quot;\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;esriUI:MapView x:Name=\u0026quot;MyMapView\u0026quot;/\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/ContentPage\u0026gt;  [ソリューション エクスプローラー] から MainPage.xaml.cs を開きます。以下のように Esri.ArcGISRuntime.Mapping 名前空間と ArcGIS Online のベースマップ（道路地図）を表示するコードを追加します。\nusing Esri.ArcGISRuntime.Mapping; namespace MyXamarinFormsApp { public partial class MainPage : ContentPage { public MainPage() { InitializeComponent(); Initialize(); } private void Initialize() { var map = new Map(Basemap.CreateStreets()); MyMapView.Map = map; } } }  iOS または Android プロジェクトを選択して、ビルドします。  アプリが起動し地図が表示されれば完了です。   ※ Android プロジェクトのビルドで「The Esri.ArcGISRuntime.Xamarin.Android package does not currently support building for the x86_64 architecture. 」のエラーが発生してビルドに失敗する場合は、ソリューション エクスプローラーの Android プロジェクトの右クリックから [オプション] を選択して「プロジェクト オプション」画面を開き、[ビルド] → [Android のビルド] → [詳細設定] → [サポートされる ABI] で x86_64 のチェックを外します。 "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/ios/install-ios-100.x/",
	"title": "インストール ガイド",
	"tags": [],
	"description": "初めて ArcGIS Runtime SDK for iOS を使用してモバイル マッピング アプリケーションを構築する開発者の方に最も基本的な開発手順を紹介します。",
	"content": " このインストール ガイドでは、初めて ArcGIS Runtime SDK for iOS を使用してモバイル マッピング アプリケーションを構築する開発者の方に最も基本的な開発手順を紹介します。\nこのインストール ガイドをお読み頂くことで、ArcGIS Runtime SDK for iOS を使用したモバイル マッピング アプリケーション開発の基礎を理解することができます。\nArcGIS Runtime SDK for iOS とは ArcGIS Runtime SDK for iOS を使うと ArcGIS の機能を iOS のネイティブ アプリケーションとして実装することができます。\nこの SDK には API やリファレンス、サンプルコードなどが含まれています。 詳細は ArcGIS Runtime SDK for iOS をご参照ください。\nArcGIS Runtime SDK for iOS の開発環境 ここでは次の開発環境にて ArcGIS Runtime SDK for iOS を用いたモバイル マッピング アプリケーションの開発手順を説明します。\n開発手順を進める前に以下のご使用のマシン（macOS）に Xcode をインストールしてください。\nArcGIS Runtime SDK for iOS がサポートする最新の動作環境につきましては動作環境をご参照ください。\nモバイル マッピング アプリケーションの開発 ここでは、ArcGIS Runtime SDK for iOS を使ってモバイル マッピング アプリケーションを作成するための基本的な手順を説明します。\n プロジェクトの作成 ArcGIS Runtime SDK の設定 地図表示の実装 モバイル マッピング アプリケーションの実行  プロジェクトの作成 まず Xcode 上に新しいプロジェクトを作成します。\n Xcode を起動して、表示されたダイアログで [Create a new Xcode project] をクリックします。 [Single View App] テンプレートを選択して、[Next] をクリックします。  [Product Name] に sample と入力し、[Next] をクリックします（[Language] に Swift が選択されていることを確認してください）。  プロジェクトの作成場所を指定して、[Create] をクリックするとプロジェクトが作成されます。  ArcGIS Runtime SDK の設定 次に ArcGIS Runtime SDK for iOS の API を使えるようにするための設定を行います。設定を行うには2つの方法があります。\n CocoaPods を使用して Xcode ワークスペースに SDK をインストールする macOS の共通ディレクトリに SDK をインストールし、Xcode プロジェクトに SDK へのリンクを手動で設定する  CocoaPods を使用して SDK をインストールする ArcGIS Runtime SDK for iOS は、CocoaPods を利用してインストールできます（CocoaPods のインストール等で問題が発生した場合は、Troubleshooting のページをご参照ください）。\n CocoaPods を開発に使用するマシンにインストールします。ターミナル アプリケーションを開き、以下のコマンドを実行します。\n$ sudo gem install cocoapods  プロジェクトの作成 で作成したプロジェクトに [Empty] テンプレート ファイルを追加し、ファイル名を Podfile とします。  追加した Podfile に以下のコードを書いて保存します。\ntarget '\u0026lt;プロジェクト名\u0026gt;' do use_frameworks! pod 'ArcGIS-Runtime-SDK-iOS', '100.7' end  ターミナル アプリケーションで、cd コマンドを使用して作成したプロジェクト ファイルのルートフォルダーに移動します。\n$ cd /\u0026lt;プロジェクト フォルダーのパス\u0026gt;/  以下のコマンドを実行して、CocoaPods をセットアップします。\n$ pod setup  CocoaPods のセットアップに成功したら、以下のコマンドを実行して、ArcGIS Runtime SDK for iOS をインストールします。これにより ArcGIS フレームワークがマシンにダウンロードされ、プロジェクトの Pods ディレクトリに配置されます。また、ArcGIS フレームワークを正しく参照するために、必要な変更が自動で設定されます。\n$ pod install  Xcode プロジェクトを一度閉じて、プロジェクト フォルダを参照し、新しく作成されたワークスペース ファイル（.xcworkspace）を開きます。\n  SDK を手動でインストールする マシンに手動で SDK をインストールして、すべてのプロジェクトで使用できる場所に配置することができます。\nSDK のインストール  ArcGIS for Developers サイトのダウンロード ページから SDK をダウンロードします。\n ArcGIS for Developers の認証ページに遷移します。ArcGIS for Developers の開発者アカウント情報を入力してサインインして下さい。ArcGIS for Developers 開発者アカウントを お持ちでない方は、ArcGIS for Developers 開発リソース集の開発者アカウントの作成を参考にしてアカウントを作成してください。\n 表示された画面で ArcGIS Runtime SDK for iOS の [Download] ボタンをクリックします。  ダウンロードした .pkg ファイルをダブルクリックし、表示された画面に従って SDK をインストールします。  ${HOME}/Library フォルダへの書き込み権限があることを確認してください。 マシンに以前のバージョンの ArcGIS Runtime SDK for iOS をインストールしている場合は、アンインストールしてください。アンインストールするには、ターミナル アプリケーションで、${HOME}/Library/Application Support/AGSiOSRuntimeSDK にある uninstallAGSiOSSDK スクリプトを実行してください。   Xcode プロジェクトの設定 SDK を手動でインストールした場合、各 Xcode プロジェクトで API を使用できるように設定を行う必要があります。設定項目は以下です。\n ArcGIS フレームワークの追加 Run Script フェーズの追加  ArcGIS フレームワークの追加  プロジェクトの作成 で作成した Xcode プロジェクトの Project Navigator でプロジェクト名を選択して、[TARGETS (プロジェクト名)] を選択します。\n [General] タブを開き、$(HOME)/Library/SDKs/ArcGIS/iOS/Frameworks/Dynamic フォルダにある ArcGIS.framework ファイルを [Embedded Binaries] セクションにドラッグ\u0026amp;ドロップします。\n   ${HOME}/Library フォルダはデフォルトで非表示になっています。ターミナル アプリケーションで以下のコマンドを入力して、フォルダを表示することができます。\n$ chflags nohidden ~/Library/   Run Script フェーズの追加  [Build Phases] タブを開き、[+] ボタンをクリックして [New Run Script Phase] を選択し、bash \u0026quot;${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/ArcGIS.framework/strip-frameworks.sh\u0026quot; を入力します。   ArcGIS フレームワークの追加とRun Script フェーズの追加の設定順序が正しいことを確認してください。順序が異なる場合、スクリプトが正しく実行されない可能性があります。  これでモバイル マッピング アプリケーションを開発するための準備が整いました。\n地図表示の実装 ArcGIS の機能を実装する準備ができたので、アプリケーションに ArcGIS Online のベースマップを表示するための実装を加えます。\n 最初に ArcGIS Runtime SDK for iOS の API を使用できるようにするために、import 文を追加します。Project Navigator で「ViewController.swift」ファイルを選択して、下記のようにコードを記述します。\nimport ArcGIS   Project Navigator で Main.storyboard ファイルを選択します。\n View Controller にデフォルトで追加されている View オブジェクトを選択します。  Identity Inspector を開き [Custom Class] セクションの [Class] で AGSMapView と入力し、[return] キーを押して View オブジェクトの名前が Map View に変わったことを確認します。  ツールバーで Assistant Editor を選択し、Main.storyboard ファイルと ViewController.h ファイルを表示します。\n View (Map View) オブジェクトを [control] キーを押しながら ViewController.swift ファイル上にドラッグ\u0026amp;ドロップします。  表示されたダイアログで [Name] に mapView（任意の値で構いません）と入力し、[Connect] ボタンをクリックします。  ViewController.swift に IBOutlet 宣言が追加されます。\n Project Navigator で ViewController.swift ファイルを選択し、viewDidLoad メソッド内で下記のようにコードを記述します。下記のコードでは、地図の種類（道路地図）、初期表示の中心位置（緯度・経度）、ズームレベルを指定して地図を表示します。\n  self.mapView.map = AGSMap(basemapType: .streets, latitude: 35.658581, longitude: 139.745433, levelOfDetail: 18)  モバイル マッピング アプリケーションの実行 ベースマップを表示するアプリケーションが作成できたので iOS シミュレータにインストールして実行します。\n Xcode のツールバーで、適当な端末を選択し [Run] をクリックして、iOS シミュレータでプロジェクトをデバッグします。  iOS シミュレータ上でアプリケーションが起動し、地図が表示されます。スワイプやピンチイン/ピンチアウトで地図を移動したり拡大/縮小したりすることができます。   "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/javascript/install-jsapi/",
	"title": "インストール ガイド",
	"tags": [],
	"description": "ArcGIS API for JavaScript ライブラリのインストール方法を紹介します。",
	"content": " ArcGIS API for JavaScript のライブラリを Windows® Server の IIS（インターネット インフォメーション サービス）上に配置して Web アプリからアクセスできる環境を作るまでの流れを紹介します。なお、IIS 以外の Web サーバーや Linux 上の Web サーバー（Apache Tomcat® など）へインストールする場合も基本的な流れは変わりません。\nEsri がホストしている CDN にインターネット経由で参照する場合には、ライブラリをインストールする必要はありません。\nライブラリのダウンロード ライブラリとヘルプ ドキュメントは ArcGIS for Developers の Downloads ページからダウンロードできます。[Product] のドロップダウン リストから [ArcGIS API for JavaScript] を選択し、ダウンロードしたいバージョンの [API] ボタンをクリックするとダウンロードが開始します。\n [Documentation] ボタンをクリックすると https://developers.arcgis.com/javascript/ で公開されているヘルプ ドキュメントとサンプル一式をダウンロードできます。\n Web サーバー（IIS）に配置 まずはダウンロードしたサンプル コードを実行してみましょう。\n ダウンロードしたライブラリの zip ファイルを解凍します。 \\arcgis_js_api\\library とすべてのコンテンツをコピーして Web サーバー上に移動します（C:\\inetpub\\wwwroot\\arcgis_js_api\\library）。  ビルドのインストール ライブラリ ファイルに配置した Web サーバーの FQDN とトップレベル ドメインを指定します。\n C:\\inetpub\\wwwroot\\arcgis_js_api\\library\\4.14\\init.js をテキスト エディターで開きます。 [HOSTNAME_AND_PATH_TO_JSAPI] を検索して fqdn.tld/arcgis_js_api/library/4.14/ に置き換えます。 C:\\inetpub\\wwwroot\\arcgis_js_api\\library\\4.14\\dojo\\dojo.js をテキスト エディターで開きます。 [HOSTNAME_AND_PATH_TO_JSAPI] を検索して fqdn.tld/arcgis_js_api/library/4.14/ に置き換えます。  インストールのテスト ここまでの手順が完了したら、以下の URL で ArcGIS API for JavaScript のライブラリにアクセスできるようになります。\n\u0026lt;script src=\u0026quot;https://www.example.com/arcgis_js_api/library/4.14/init.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  インストールのテストには以下のコードを利用してください。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026quot;Content-Type\u0026quot; content=\u0026quot;text/html; charset=utf-8\u0026quot; /\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;initial-scale=1, maximum-scale=1,user-scalable=no\u0026quot; /\u0026gt; \u0026lt;title\u0026gt;Test Map\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://www.example.com/arcgis_js_api/library/4.14/dijit/themes/claro/claro.css\u0026quot; /\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://www.example.com/arcgis_js_api/library/4.14/esri/css/main.css\u0026quot; /\u0026gt; \u0026lt;style\u0026gt; html, body, #ui-map-view { margin: 0; padding: 0; width: 100%; height: 100%; } \u0026lt;/style\u0026gt; \u0026lt;script src=\u0026quot;https://www.example.com/arcgis_js_api/library/4.14/init.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var myMap, view; require([ \u0026quot;esri/Basemap\u0026quot;, \u0026quot;esri/layers/TileLayer\u0026quot;, \u0026quot;esri/Map\u0026quot;, \u0026quot;esri/views/MapView\u0026quot; ], function (Basemap, TileLayer, Map, MapView){ // -------------------------------------------------------------------- // パブリックなインターネット アクセスができない環境の場合、 // Basemap クラスとローカルにアクセス可能なキャッシュ サービスを利用します。 // -------------------------------------------------------------------- var layer = new TileLayer({ url: \u0026quot;https://www.example.com/arcgis/rest/services/Folder/Custom_Base_Map/MapServer\u0026quot; }); var customBasemap = new Basemap({ baseLayers: [layer], title: \u0026quot;Custom Basemap\u0026quot;, id: \u0026quot;myBasemap\u0026quot; }); myMap = new Map({ basemap: customBasemap }); view = new MapView({ center: [139, 35], container: \u0026quot;ui-map-view\u0026quot;, map: myMap, zoom: 5 }); }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026quot;claro\u0026quot;\u0026gt; \u0026lt;div id=\u0026quot;ui-map-view\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/webappbuilder/install-guide/",
	"title": "インストール ガイド",
	"tags": [],
	"description": "Web AppBuilder for ArcGIS (Developer Edition) をインストールする手順を紹介します。",
	"content": " Web AppBuilder for ArcGIS は ArcGIS Online あるいは Portal for ArcGIS に組み込まれた機能として提供されており、ウィジェット（機能）やテーマ（デザイン）を組み合わせることにより、GIS やプログラミングなどの専門知識がなくても誰でも簡単に Web アプリケーションを作成できるソフトウェアです。 Developer Edition（開発者向けエディション）はこれらの機能に加え、開発者のためにウィジェットやテーマを独自に開発するためのフレームワークを提供します。また、作成したアプリケーションをダウンロードし、独自のサーバーにホストすることも可能です。\nここでは、Web AppBuilder for ArcGIS (Developer Edition) (以下 Web AppBuilder) のインストール手順を説明します。\n インストール Web AppBuilder の起動 ポータル URL の指定 アプリケーション ID の設定 インストールの確認  インストール  Web AppBuilder の ZIP ファイルをローカルにダウンロードし、解凍します。\nサインイン ページが表示される場合は、ArcGIS for Developers 開発者アカウント（あるいは ArcGIS Online 組織向けプランのアカウント）のユーザー名およびパスワードを入力しサインインします。 Web AppBuilder は Node.js 上で動作するため、インストールする端末に Node.js が必要です。Web AppBuilder のインストール ファイルには Windows バージョンの Node.js が含まれていますが、Mac や Linux など他の OS をお使いの場合は Web AppBuilder を起動する前に Node.jsをインストールする必要があります。  ArcGIS API for JavaScript の参照先を変更する（オプション） Web AppBuilder はデフォルトでは Esri の CDN で配信されている ArcGIS API for JavaScript を参照します。そのため、インターネットに接続できない環境で Web AppBuilder を使用する場合、ArcGIS API for JavaScript の参照先を変更する必要があります。ここでは Portal for ArcGIS に内蔵されている ArcGIS API for JavaScript へ参照先を変更する手順を説明します。\n \u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\client\\stemapp\\env.js ファイルをテキストエディターで開きます。 //apiUrl を検索します。  API のバージョンは Web AppBuilder のバージョンにより異なります。通常、Web AppBuilder がリリースされた時点の最新バージョンの API が使われています。  apiUrl= \u0026quot;https://\u0026lt;ポータル URL\u0026gt;/jsapi/jsapi/\u0026quot; に書き換え、上書き保存します。  Portal for ArcGIS が内蔵する API を使用する際は、内蔵されている API のバージョンに注意が必要です。Web AppBuilder が使用する API のバージョンと異なるバージョンの API の利用はサポートされません。\nWeb AppBuilder のバージョンと API のバージョンの関係については About release versions を参照ください。   Web AppBuilder の起動  Web AppBuilder を起動します。\n Windows 端末\nWindows をお使いの場合、解凍したフォルダーにある startup.bat ファイルをダブルクリックします。このバッチファイルはコマンド プロンプト上で Node.js サーバーを起動します。 その他の端末 Windows 以外のマシンにインストールする場合は、直接 Node.js サーバーを起動するコマンドを実行します。\nコマンド プロンプトを開き、\u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\server のパスを指定します。続けて node server.js と入力します。\nWeb AppBuilder は Web ブラウザーで http://[マシン名]:3344/webappbuilder にアクセスすると起動します。コマンド プロンプト上で Node.js が起動している間はいつでも、どの Web ブラウザーからでも Web AppBuilder を開くことができます。利用するマシンがドメインに参加しているとき、Web AppBuilder へのアクセスにドメインを含める必要がある場合があります。その際は、http://[マシン名].[ドメイン]:3344/webappbuilder のようにドメインを含めてアクセスしてください。\n  Node.js がデフォルトで使用するポート番号は 3344 です。パラメーターを追加したり、他のポート番号を割り当てたり、Windows サービスとして起動したりしたい場合は、以下の手順を参照してください。\n パラメーターを追加し、他のポート番号を割り当てる\n コマンド プロンプトを開き、Web AppBuilder のサーバー ディレクトリ（\u0026lt;Web AppBuilderのインストール ディレクトリ\u0026gt;\\server）へ移動します。割り当てたいポート番号と必要に応じてプロキシの URL を入力します。  64 ビット版 Windows\nnode_x64.exe server.js [-port=value] [-proxy=value] 32 ビット版 Windows\nnode_x32.exe server.js [-port=value] [-proxy=value] その他のマシン\nnode server.js [-port=value] [-proxy=value]  Web ブラウザーを開き、上記で設定したポート番号を指定し、Web AppBuilder を起動します。\nhttp://[マシン名]:[ポート番号]/webappbuilder  Windows サービスとして起動する\nWeb AppBuilder は、startup.bat ファイルをクリックして起動させるほかに、Windows サービスとして起動させることもできます。\n Windows プラットフォームに Node.js をインストールします。 管理者としてコマンドプロンプトを開きます。 Web AppBuilder のサーバー ディレクトリ（\u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\server）へ移動します。 npm install コマンドを実行します。 npm run-script install-windows-service コマンドを実行します。 Windows の [サービス] ウィンドウを開き、ArcGISWebAppBuilder サービスを起動します。 ArcGISWebAppBuilder サービスを削除するには、npm run-script uninstall-windows-service コマンドを実行します。 プロキシを利用したい場合は、/~server/package.json ファイルを開き、\u0026quot;start\u0026quot;: \u0026quot;node server.js\u0026quot; を \u0026quot;start\u0026quot;: \u0026quot;node server.js -proxy=\u0026lt;http://your proxy\u0026gt;\u0026quot; に変更してください。    ポータル URL の指定  Web AppBuilder で使用するアカウントに紐づく ArcGIS Online またはPortal for ArcGIS の URL を指定します。開発者アカウントをご利用の方は、ArcGIS for Developers の [Account Settings] ページにて URL をご確認ください。\n [続行] をクリックします。Web 層認証を使用している場合、次のセクションはスキップしてください。ログイン後、インストールの確認をしてください。\nArcGIS Online または Portal for ArcGIS で OAuth2 認証を使用する場合は、次のセクションでアプリケーション ID を設定する必要があります。\n  アプリケーション ID の設定 上記で指定した ArcGIS Online または Portal for ArcGIS ではじめて Web AppBuilder を使用する場合、OAuth2 認証を利用できるようにするため、アプリケーション ID を設定する必要があります。\nアプリケーション ID を入手するには ArcGIS Online または Portal for ArcGIS に Web AppBuilder をアイテムとして追加します。\n 指定したポータルへログインします。 Web AppBuilder をポータルにアイテムとして追加します。\n [マイコンテンツ] を開きます。[アイテムの追加] をクリックし、[アプリケーション] を選択します。\n [アプリケーション] ダイアログが表示されたら、[URL] オプションに Web AppBuilder の URL を入力します。任意のタイトルとタグを設定し、 [アイテムの追加] をクリックします。これで Web AppBuilder はアイテムとしてポータルに追加されました。\n  アイテムの追加が完了すると、追加したアイテムの詳細情報のページが表示されます。  ArcIGS Online：[設定] タブをクリックします。[アプリケーションの登録] セクションまでスクロールし、[登録] をクリックします。 Portal for ArcGIS：[アプリケーションの登録] セクションまでスクロールし、[登録] をクリックします。  [登録] ダイアログが表示されます。[リダイレクト URI] オプションに http://[マシン名] または https://[マシン名] を入力して、[追加] をクリックします。HTTP と HTTPS プロトコルは異なる URI として認識されることに注意してください。リダイレクトに関する問題を避けるため、両方のプロトコルを登録することを推奨しています。\n [登録] をクリックします。これでアプリケーションの登録は完了です。 Web AppBuilder の起動画面に戻ります。[アプリケーション ID] オプションに入手したアプリケーション ID を入力し、[続行] をクリックします。\nInvalid redirect_uri エラー ページが表示される場合は、以下の手順に従ってください。\nアプリケーション ID を入手する際に登録したリダイレクト URI に誤りがある場合、アプリケーション ID オプションにアプリケーション ID を入力し、[続行] をクリックすると、エラー ページが表示されることがあります。この場合、登録したアプリケーションの情報を修正する必要があります。\n Web AppBuilder のサーバー ディレクトリ（\u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\server）を開き、signininfo.json ファイルを削除します。 手順 3 に戻り、入力したリダイレクト URI を更新するか、アプリケーションを新しく登録して、新しいアプリケーション ID を入手します。 起動中の Web AppBuilder のページを再読み込みします。 [アプリケーション ID] オプションにアプリケーション ID を入力し、[続行] をクリックします。  [権限のリクエスト] ダイアログが表示されます。表示されたアカウント情報が正しいことを確認し [承認] をクリックします。\n  アプリケーション ID は OAuth2 認証に必要です。詳細は 認証をご参照ください。ログインに関する問題は、FAQs および アプリの追加とアプリの登録をご参照ください。\nWeb AppBuilder は、デフォルトで HTTPS をサポートするために Node.js で自己署名証明書を使用しています。\n独自に用意した証明書を使用したい場合は、Web AppBuilder のサーバー ディレクトリ（\u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\server）にある cakey.pem と cacert.pem を置き換えてください。\nアプリケーション ID の登録手順の説明は以上です。これで 登録先のポータルへ OAuth2 認証を使用してサインインできるようになりました。次回からは Web AppBuilder を起動すると直接 Web AppBuilder のトップページが表示されます。\nこれで Web AppBuilder のインストールは終了です。\nインストールの確認 ここでは Web AppBuilder が正常にインストールされていることを確認するために、アプリケーションの起動確認を行います。\n Web AppBuilder を起動します。 トップページが表示されたら [新規作成] をクリックします。 [デフォルト（2D）] を選択し、[次へ] をクリックします。 新しい Web アプリの作成ページが開きます。任意のタイトルと説明を入力して [OK] をクリックします。 アプリケーションの作成のページが表示されたらインストールの確認は完了です。  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/",
	"title": "スタートアップ ガイド",
	"tags": [],
	"description": "ArcGIS をはじめて使う開発者の方向けに、開発者アカウントの作成から、マップの作成、API/SDK を利用したアプリの開発まで、ArcGIS for Developers を利用したアプリ開発の基本的な流れを紹介します。",
	"content": "開発者アカウントの作成から、マップの作成、API/SDK を利用したアプリの開発まで、ArcGIS for Developers を利用したアプリ開発の基本的な流れが理解できます。\n\rマップの作成\rArcGIS をはじめて使う方向けに開発者アカウントやマップの作成方法を紹介します。\n\r\rアプリの作成\rシンプルな地図アプリの作成方法を紹介します。\n\r\r認証\r開発したアプリを公開するための認証方法について紹介します。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/visualization/workflow-with-arcgis/",
	"title": "データ可視化のワークフロー",
	"tags": [],
	"description": "マップ ビューアーを使用した地図上でのデータ可視化のプロセスを紹介します。",
	"content": " ArcGIS 開発者向けクラウド サービス（ArcGIS for Developers）で提供されているビジュアライゼーション ツール（マップ ビューアー）を使用した地図上でのデータ可視化のプロセスを紹介します。最終的には地図作成にとどまらず、サードパーティのチャートなどのコンポーネントを組み合わせたアプリ開発をゴールとしています。\n本ワークフローで伝える方法はあくまで作成済みのデータに簡単な加工を施して可視化を行うことをクラウド上で実施することを前提としています。よって、デスクトップ GIS ソフトウェアなどを使ったデータ編集は除外しています。\nワークフロー ５ステップをベースに、各ステップで使用するツールやプラットフォームとその簡単な使用方法を以下で紹介していきます。\n データ取得\n データ可視化のテーマとなるデータを取得します。  データ加工\n 取得したデータを地図上にプロットします。必要に応じてデータ変換を行います。  データ処理\n 必要に応じてテーマとなるデータをもとに解析処理を施します。  グラフィック表現\n 可視化対象であるデータをテーマに従って表現を加えます。  アプリ作成/ページ埋め込み\n ステップ４までに作成した Web マップをページ上に表示し、データ可視化によるテーマを伝えるためにページの編集を行います。   以下は上記５ステップをチャートで表現した図です。必ずしもすべてのステップを踏む必要はなく、また柔軟なアウトプットを行うために開発が担う作業範囲を大きくすることも考えられますが、ここでは、もっとも簡易で効率的な手段として、ステップ４までのプロセスをクラウド上で完了できるようなフローを紹介します。\nデータ取得 ArcGIS のクラウド サービスが提供するビジュアライゼーション ツールではさまざまなデータ形式をサポートしており、異なる形式のデータをインポートし、地図上に可視化することができます。\nサポートするデータ形式は以下の通りです。\n ArcGIS Server サービス（GeoServices） シェープファイル GeoJSON CSV TXT GPX GeoRSS KML OGC  上記の形式で座標情報あるいは住所情報があればお好きなデータ カタログから取得したデータをすぐに地図上に可視化できます。特に ArcGIS Web サービスを使うことで、動的な属性/空間検索が可能な API を経由したデータ可視化が可能なため、より柔軟な可視化に対応できます。\n以下は、ArcGIS Web サービスを配信しているデータ元の参考です。\n ArcGIS Online ArcGIS Open Data Koop  データ加工 ここで紹介するデータ加工はさまざまなデータ形式を１つの地図上に重ねて可視化する作業にあたります。前のステップで取得したデータをデータ ビジュアライゼーション ツールを使って地図上に可視化します。\n Web サービス（ArcGIS Server サービス、GeoRSS、KML、OGC）の場合\n 静的ファイル（シェープファイル、CSV、TXT、GPX）の場合\n  ArcGIS Online で全世界に配信されているデータの検索および可視化\nデータ処理 可視化したデータをもとに GIS の空間解析を実施することで、より高度な分析結果を２次データとしてそのまま地図上で扱うことができます。\n例：ポイントの集約 たとえば、喫茶店の場所を示すポイント フィーチャと区のエリア フィーチャがあり、喫茶店の売上を区別にまとめるとします。喫茶店に TOTAL_SALES 属性情報があれば、区ごとの TOTAL_SALES の合計値、各区の TOTAL_SALES の最小値または最大値、各区における総売上の標準偏差を取得できます。\nこのプロセスは必須ではないので、必要に応じて行ってください。\nArcGIS の解析サービスの利用については「解析の実行 | ArcGIS Online ヘルプ」を参照してください。\nグラフィック表現 可視化対象であるデータをテーマに従って表現を加えます。データ ビジュアライゼーション ツールには直感的な操作で地図上のデータの表現を操作するための機能が備わっています。主な表現方法は以下の通りです。\n 場所（単一シンボル）   単一シンボルを使用してデータを描画すると、フィーチャの分布状態 (クラスター化されているか分散されているか) を把握し、隠れているパターンを明らかにできます。\n ヒート マップ   ヒート マップはレイヤー内のポイントを使用して、マップ上のポイントの相対的な密度を計算し、寒色 (ポイントの密度が低い) から暖色 (ポイントの密度が高い) まで滑らかに変化する一連の色の配列で表示します。\n 種類（個別値シンボル）   個別値シンボルを使用すると、数値測定の数ではなく、さまざまな種類 (カテゴリ データ) を表示できます。たとえば、さまざまな色を使用して、レストランが提供する料理の種類を表すことができます。レイヤーに表示するカテゴリを 10 種類未満にするのが理想的です。\n 数と量（色）   数値データが存在する場合、色のグラデーションによってフィーチャを区別できます。使用できる色のグラデーションには、さまざまな種類があります。たとえば、薄い色から濃い色に変化する単純な方式は、年齢や収入など、高低を表すデータ値の表示に適しています。\n 数と量（サイズ）   数値データまたはランク付けされたカテゴリを表すために、順序付けできる異なるサイズの並びを使用します。この方法を使用して、ポイント、ライン、およびエリアをすべて描画できます。この比例シンボル マップでは、シンボルが大きいほど大きい数値を表すという直感的な論理を使用します。伝えたい内容を明確に表すようにシンボルのサイズを調整します。たとえば、等級シンボルを使用して、各都市の相対的な人口密度を表示できます。\n 色とサイズ   データ内の 2 つの属性を選択し、マップ上のポイント シンボルの色とサイズを完了します。または、同じ属性を 2 回使用して、強調するデータの部分に基づき、シンボルのサイズを設定し、色を設定できます。これは、一人親の世帯数などの数情報を、貧困率などの比率で陰影処理して表示する場合に適したスタイルです。\n 個別値シンボルとサイズ   学士号を持つ人などの数属性を表示し、郡名など別のフィールドの値ごとに一意の色を使用する場合に使用します。一意の値を持つテキストまたは数値フィールドと、数値フィールドを選択し、必要に応じて、各属性のマップ シンボル設定を調整します。\n A を B と比較   2 つの数値の比率をマッピングして、その関係をパーセンテージまたは単純な比率で表現できます。たとえば、総人口に対する大学の学位を持つ人の比率をマッピングできます。\nスタイリング機能を使った地図データにもとづくグラフィック表現\nアプリ作成/ページ埋め込み 上記ステップまでに作成した Web マップは１つの完結した地図データとして管理が可能です。Web マップには対応する一意の ID が割り当てられており、JavaScript API を使って ID を参照するだけで可視化した地図をそのまま Web ページ上に表示することができます。\nvar webmap = new WebMap({ portalItem: { id: \u0026quot;\u0026lt;Web マップ ID\u0026gt;\u0026quot; } }); var view = new MapView({ map: webmap, container: \u0026quot;viewDiv\u0026quot; });  \u0026lt;div id=\u0026quot;viewDiv\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  参照した地図上のデータをスクリプトで取得し、D3.js などのサードパーティのチャート コンポーネントと容易に連携が可能です。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/authentication/authentication/",
	"title": "認証パターン",
	"tags": [],
	"description": "有償のサービスやプライベート コンテンツへアクセスするアプリに必要な認証について紹介します。",
	"content": " 認証が必要なケース ArcGIS for Developers で作成したアプリでは以下のように認証が必要となるケースがあります。\n ユーザーが保有するプライベートなコンテンツへのアクセス コンテンツの作成と公開 米国 Esri 社が提供する有償のコンテンツ（ジオコーディングやルート解析など）へのアクセス  認証パターン ArcGIS for Developers の認証方法は以下の 2 つのパターンが存在します。\n ユーザー ログイン認証: アプリを利用するユーザーがユーザー名とパスワードを入力して認証を行います アプリ認証: 特定のアプリをログインなしで認証を行います  ユーザー ログインは組織契約の ArcGIS クラウド サービスである ArcGIS Online 組織向けプランのユーザーが利用することを想定しています。ArcGIS for Developers の開発者であれば、ArcGIS Online 組織向けプランを導入している組織に対してアプリを配布/販売することが可能です。\n一方、ユーザーが ArcGIS ユーザーではなく、アノニマスにアクセスされる場合、特定のアプリでのみアクセスできるようにするためにアプリ認証の実装が必要となります。たとえば、有償のサービスであるルート解析機能を持ったアプリを開発する場合にアプリ認証を実装することで、クレジットの消費を開発者が担保し、ユーザーはログインの操作を行うことなくルート解析機能を利用することができます。\n認証パターンの比較    機能 ユーザー ログイン認証 [1] アプリ認証 [2]     ジオコーディング ✔ ✔   ルート解析 ✔ ✔   統計データ ✔ ✔   プレミアム レイヤー/イメージ ✔ ✔   高度解析 ✔ ✔   空間解析 ✔ -   ユーザーが保有するプライベート コンテンツの参照 ✔ -   ユーザーによって組織内共有されたコンテンツの参照 ✔ -   ユーザー コンテンツの作成/更新/削除 ✔ -   共有コンテンツの作成/更新/削除 ✔ -   他ユーザーのコンテンツの共有 ✔ -     [1] ユーザーの所属する組織（ArcGIS Online 組織向けプラン）にクレジットを請求します [2] アプリを作成したユーザーにクレジットを請求します  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-map/get-dev-account/",
	"title": "開発者アカウントの作成",
	"tags": [],
	"description": "ArcGIS for Developers の利用を開始するために新規アカウントを作成する手順を紹介します。",
	"content": " ArcGIS for Developers とは ArcGIS for Developers は、Esri 製品を利用して様々なアプリを開発する開発者のための総合ポータルサイトであり、地図/GIS アプリ開発者のための開発者向けサービスを提供しています。このサイトに開発者としてアカウントを作成することで、開発キット（SDK）をダウンロードして地図/GIS アプリの開発を開始することができます。\nArcGIS for Developers では、システム開発に必要なリソース（開発キット、サービス/コンテンツ、ソフトウェア）を揃えるためのサブスクリプション プログラム（ArcGIS Developer Subscription）を提供します。\nArcGIS for Developers に開発者アカウントを作成すると ArcGIS Online (開発者向け) Subscription が有効になり、開発キットのダウンロードとアプリの開発を無償で開始することができます。また 米国 Esri 社がホストする GIS クラウド サービスであるジオコーディング サービス（住所⇄緯度経度）やネットワーク サービス（ルート検索、到達圏解析）などの様々な GIS サービスを利用したり、お手持ちのデータを GIS サービスとして配信したりすることが、50 クレジット/月の範囲で可能です。\nアプリを商用利用で運用される場合は、別途 ArcGIS Developer Subscription の有償プランを契約いただく必要があります。\nArcGIS Developer Subscription の各プランの詳細や提供しているサービスについては ESRIジャパン製品ページをご参照ください。\nアカウントの作成 ArcGIS for Developers 開発者アカウントの作成 以下の手順で ArcGIS for Developers に新規アカウントを作成します。アカウントの作成中に問題が発生した場合は、ESRI ジャパンまでお問い合わせください。\n ArcGIS for Developers のサイト（英語）にアクセスし、[Sign Up For Free] をクリックします。\n 名前（※名前には半角英字のみを使用してください）および作成するアカウントで使用する E メールアドレスを入力し、[Send Confirmation Email] をクリックします。\n 登録確認の E メール（Confirmation email）が送信された旨を報告するメッセージが表示されます。受信ボックスに Esri Customer Service からアカウントを有効化するためのメールが届きます（メールが届くまで時間がかかる場合があります）。\n 手順 2 で入力した Eメールアドレスの受信ボックスに届いた Esri Customer Service からのメールを開き、メール本文内のリンクをクリックするか、リンク URL をブラウザーにコピーしてページを表示します。 新規に作成する開発者アカウントの詳細情報を入力するページが表示されます。必要な情報を入力し、[Create Developer Account] をクリックします。\n 使用できない文字を入力した場合は入力欄が赤くハイライトされエラーメッセージが表示されます。その場合はエラーメッセージに従い、入力する情報を修正してください。  ArcGIS Online の設定ページが表示されます。必要な情報を入力し、[Complete Sign Up] をクリックします。\n 入力ホーム内で指定する ”ArcGIS Online URL” は、開発者アカウントで利用できる ArcGIS Online 管理サイトの URL です。管理サイトから開発したアプリケーションや ArcGIS Online 上にホストする GIS データの管理などを行うことができます。  アカウントの作成に成功するとダッシュボードページが表示されます。\n  以上で ArcGIS for Developers の開発者アカウントの作成は完了です。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-app/create-startup-app-dotnet/",
	"title": ".NET",
	"tags": [],
	"description": "ArcGIS Runtime SDK for .NET を用いたネイティブ地図アプリの作成方法を紹介します。",
	"content": " 開発環境 ArcGIS Runtime SDK for .NET を使用した開発には、Visual Studio が必要です。\nなお、ArcGIS Runtime SDK を使用するには ArcGIS Online 開発者アカウントが必要です。作成方法は「開発者アカウントの作成」をご参照ください。\nサンプル プロジェクトのダウンロード このリポジトリ（arcgis-dev-resources）には開発を試してみたい方向けのサンプル コードが含まれています。ダウンロードする際の方法は 2 通りあります。\n リポジトリをご自身のアカウントに Fork（複製）\n GitHub にログインして、arcgis-dev-resources ページを開いて [Fork] をクリックすると、ご自身のアカウントに同じリポジトリが作成されます。 Fork 後はご自身のローカル マシンにクローンを作成します。  zip ファイルでダウンロード（※GitHub アカウントをお持ちでない方向け）\n  arcgis-dev-resources ページを開いて [Download ZIP] をクリックするとプロジェクト ファイル一式が手に入ります。\n地図の表示 まずはダウンロードしたサンプル プロジェクトを実行してみましょう。 ここでは Windows デスクトップアプリケーション（WPF） の例で説明していますが、UWP、Xamarin でも同じアプリを実行することができます。\n UWP サンプル プロジェクト(arcgis-dev-resources/startup/dotnet/100.x/uwp/sample.sln)\n Xamarin サンプル プロジェクト(arcgis-dev-resources/startup/dotnet/100.x/xamarin/sample.sln)\n   ダウンロードしたサンプル プロジェクト（arcgis-dev-resources/startup/dotnet/100.x/desktop/sample.sln）を Visual Studio で開きます。\n MainWindow.xaml.cs の 49 行目にある以下のコードの \u0026lt;Web マップ ID\u0026gt; と記載されている箇所に Web マップの作成で作成した Web マップ ID を上書きします。\n  var item = await PortalItem.CreateAsync(portal, \u0026quot;Web マップ ID\u0026quot;);  まだ Web マップを作成しておらず、すぐに試してみたい方はサンプル Web マップをご利用ください。\n サンプル プロジェクトを実行すると、以下のように地図が表示されます。  Web マップを表示するには、ポータル サイトから指定した ID を持つ Web マップを取得し、MapView のマップとして表示します。\n住所検索機能の追加 ArcGIS Online のジオコーディング サービスを利用した住所検索機能を追加します。[検索] ボタンをクリックすることで、テキスト ボックス内の文字列を使用して、住所検索を行います。\n MainWindow.xaml.cs に住所検索機能で使用する以下のメンバー変数を定義します。\n WORLD_GEOCODE_SERVICE_URL\nArcGIS Online のジオコーディング サービスの URL です。ArcGIS for Developers の開発者はこのクラウド サービスを利用して住所検索を実行することができます。\n onlineLocatorTask\n住所検索を実行するための OnlineLocatorTask クラスです。\n   //ArcGIS Online ジオコーディングサービスの URL private const string WORLD_GEOCODE_SERVICE_URL = \u0026quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer\u0026quot;; //住所検索用のジオコーディング タスク private LocatorTask onlineLocatorTask;   メンバー変数として定義した OnlineLocatorTask クラスを初期化します。初期化時のパラメーターとして ArcGIS Online のジオコーディング サービスの URL を指定します。OnlineLocatorTask クラスが住所検索のリクエストを発行する際にこの URL が使用されます。  //住所検索用のジオコーディング タスクを初期化 onlineLocatorTask = await LocatorTask.CreateAsync(new Uri(WORLD_GEOCODE_SERVICE_URL));   住所検索に使用する検索文字列などを指定する住所検索パラメーターを作成します。パラメーターの作成には GeocodeParameters クラスを使用します。  //住所検索用のパラメータを作成 var geocodeParams = new GeocodeParameters { MaxResults = 5, CountryCode = \u0026quot;Japan\u0026quot;, OutputLanguage = new System.Globalization.CultureInfo(\u0026quot;ja-JP\u0026quot;), };   OnlineLocatorTask クラスの GeocodeAsync 非同期メソッドを使用して住所検索を実行します。パラメーターとして事前に作成した住所検索パラメーターを指定しています。  //住所の検索 var resultCandidates = await onlineLocatorTask.GeocodeAsync(addressTextBox.Text, geocodeParams);   住所検索を実行し結果の取得に成功したら、検索結果に対して地図上に表示するなどの何らかの処理を実行します。サンプル アプリケーションでは、ジオコーディング サービスから返された検索結果候補の一番最初の検索結果候補（最も一致している検索結果）を地図上に拡大表示します。  //常に最初の候補を採用 var candidate = resultCandidates.FirstOrDefault(); //最初の候補からグラフィックを作成 Graphic locatedPoint = new Graphic() { Geometry = candidate.DisplayLocation }; //住所検索結果表示用のグラフィックス オーバーレイにグラフィックを追加 geocodeResultGraphicsOverlay.Graphics.Add(locatedPoint); //追加したグラフィックの周辺に地図を拡大 await MyMapView.SetViewpointCenterAsync((MapPoint)locatedPoint.Geometry, 30000);  アプリの動作が確認できたら ArcGIS の OAuth 認証について学びましょう！\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-conda/",
	"title": "ArcGIS API for Python のための基礎環境：conda入門",
	"tags": [],
	"description": "conda の基本について簡単に紹介します。",
	"content": " ArcGIS API for Python (以下、Python API) を使用する際、conda を利用すると Python の環境やパッケージを管理することが容易になります。 ここでは、conda の基本について簡単に説明します。conda について基本的な事項を把握しておきますと、この後のインストールガイドでの環境作成を行いやすくなります。\n conda の基本 conda の基本について説明します。conda は Python と Python で使用できるライブラリのインストールやバージョンを管理するためのツールです。 conda を使用する場合、次の 2 つの選択肢があります。\n Anaconda Distribution : Python とデータサイエンス向けの Python パッケージなどを提供するプラットフォームです (以下、Anaconda)。 Miniconda : Anaconda をコンパクトにしたもので、Python、conda、それらの依存パッケージ、その他の最小限のパッケージをインストールします。ArcGIS Pro をインストールした場合、Miniconda も同時にインストールされます。  Anaconda と Miniconda の詳しい違いは Anaconda or Miniconda (英語) のページをご覧ください。 ※ pip でも Python API をインストールすることができますが、初心者には conda が推奨されています。参考: ArcGIS API for Python - Install and set up (英語)\nconda をより深く理解したい方は Getting Started with Conda (英語) チュートリアルをご覧ください。\nconda の環境 conda をインストールすると、Python のインタープリターと環境にインストールしたパッケージを隔離するディレクトリが作成されます。これにより、Python を含む異なるバージョンのソフトウェアを持つ複数の環境を作成することが可能になります。新しい環境は簡単に作成することができ、他の環境に影響を与えることなくそれらを切り替えて使用することができます。詳細な説明と手順については、環境の管理に関する conda のドキュメント (英語)を参照してください。\nインストール手順は次章で詳しくご説明しますが、以降では ArcGIS Pro を通じて conda をインストールした場合と、Anaconda でインストールした場合のデフォルトの環境について説明します。\nAnaconda 上の仮想環境イメージ\n -- デフォルトの環境 conda をどのようにインストールしたか (ArcGIS Pro 経由か Anaconda 経由か) によってデフォルトの環境は異なります。 コマンド プロンプト等で conda env list とコマンドを入力することで作成されている環境の一覧を確認することができます。\nArcGIS Pro の場合 ArcGIS Pro をインストールした後で環境を確認すると、以下の 2 つが作成されています。\n arcgispro-py3 この環境には、Python、ArcPy の機能を含む arcgispro パッケージが含まれています。\n root この環境には、必要最小限の conda、Python、依存するパッケージなどが含まれる Minaconda がインストールされています。\n  ArcGIS Pro の conda 上の初期環境\n conda の環境を ArcGIS Pro で管理する ArcGIS Pro の conda の環境は、次の 3 つの方法を使用して管理できます。どの方法でも、それぞれパッケージのインストール、更新、削除などを行うことができます。\n Python パッケージ マネージャー ArcGIS Pro プロジェクトタブからアクセス可能な GUI ツール。\n Python コマンド プロンプト 上述した arcgispro-py3 の環境に直接アクセスしアクティブにするコマンドライン ショートカット。\n コマンド プロンプト (windows) 標準の MS-DOS Windows コマンドライン アプリケーション。\n  (左) Python パッケージ マネージャー、(中) Python コマンド プロンプト、(右) コマンド プロンプト (windows)  Anaconda の場合 Anaconda をインストールすると Python、conda、その他多数のパッケージが base という 1 つの環境にインストールされます。\nAnaconda Prompt 初期の環境  conda の環境を Anaconda で管理する 主に以下の 2 つの方法で conda の環境を管理することができます。\n ターミナル アプリケーション 標準的なコマンドラインターミナルアプリケーション。\n※ Anaconda をインストールすると Anaconda Prompt が一緒にインストールされます。Anaconda Prompt を使用すると環境変数を操作せずに conda のコマンドを利用できます。\n Anaconda Navigator conda の環境を包括的に管理するための GUI アプリケーション。\n  Anaconda Navigator (左) と Anaconda Prompt (右)  環境をアクティベートする 環境を利用するためには、対象となる環境をアクティベートする必要があります。以下のコマンドを実行することで対象の環境をアクティベートできます。\n activate \u0026lt;環境名\u0026gt;  ArcGIS Pro と共にインストールした場合は、Python コマンド　プロンプトから以下のコマンドで環境を切り替えることができます。\n proswap \u0026lt;環境名\u0026gt;  ` -- その他のコマンドの詳細については、環境のアクティブ化 (英語)を参照してください。\n新しいパッケージを追加する アクティベートした環境に新しいパッケージを追加したい場合は次のコマンドを使用します。\nconda install \u0026lt;package_name\u0026gt;\nまた、--name や --channel オプションを使用して、特定の環境およびチャネルを指定することもできます。\nconda install --name \u0026lt;environment_name\u0026gt; --channel \u0026lt;channel_name\u0026gt; \u0026lt;package_name\u0026gt;\nconda コマンドや 他オプションの使用方法の詳細についてはパッケージの管理 (英語)を参照してください。\n 参考：conda からパッケージをインストールできる仕組み\nConda は、プラットフォームに依存しないパッケージ マネージャー アプリケーションで、Python パッケージをインストール、更新、および削除できます。 パッケージは、チャネルと呼ばれるさまざまなリポジトリのいずれかに格納されているソフトウェアおよびサポートファイルのバンドルです。 チャネルは、Anaconda クラウドなどの既定のクラウド ロケーションのセット、または個人または組織によって作成されたプライベートレポジトリである場合があります。 condaは、パッケージのリスト表示またはインストール時にデフォルトのチャネルセットを検索します。\narcgis パッケージを格納するために esri という名前のチャネルに conda リポジトリが作成されています。 conda install コマンドは、チャネルにアクセスし、特定の conda 環境にパッケージをインストールしています。\nAnaconda クラウド上の esri チャネル   このページの内容の詳細については 米国Esri ガイドページ：Understanding Conda (英語)をご覧ください。\n次の章では、ArcGIS API for Python の環境構築方法を紹介します。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/webappbuilder/",
	"title": "Web AppBuilder for ArcGIS (Developer Edition)",
	"tags": [],
	"description": "Web AppBuilder for ArcGIS (Developer Edition) の開発に役立つガイド集です。",
	"content": "Web AppBuilder for ArcGIS (Developer Edition) の開発に役立つガイド集です。\n\rインストール ガイド\rWeb AppBuilder for ArcGIS (Developer Edition) をインストールする手順を紹介します。\n\r\rカスタム ウィジェット開発ガイド\rカスタム ウィジェットを開発する手順を紹介します。\n\r\rデプロイ パターン\rWeb AppBuilder for ArcGIS (Developer Edition) で作成したアプリやウィジェットのデプロイ パターンを紹介します。\n\r\rWeb アプリケーションのデプロイ\rWeb AppBuilder for ArcGIS (Developer Edition) で作成したアプリケーションをダウンロードし、独自のサーバーにホストする手順を紹介します。\n\r\rウィジェット一覧表\rWeb AppBuilder for ArcGIS で提供されているウィジェットの一覧表です。\n\r\r カスタム ウィジェットのサンプル集（外部サイト）  　Web AppBuilder for ArcGIS (Developer Edition) を使用して開発されたカスタム ウィジェットのサンプルを確認できるサイトです。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/authentication/register-app/",
	"title": "アプリの登録と認証",
	"tags": [],
	"description": "ArcGIS for Developers サイト上でのアプリ登録と、アプリ登録で付与された情報を用いたアプリの認証方法について紹介します。",
	"content": " アプリの登録  ArcGIS for Developers 開発者アカウントで ArcGIS for Developers にサイン インします。\n アプリ リストを開きます。\n [Create Your First App] または [Create a New App] をクリックします。\n アプリが登録されたら、アプリの概要（アプリ ID と秘密鍵）を確認します。  [Authentication] タブをクリックします。\n 認証を許可するアプリの URL を [Redirect URIs] に追加します。\n  ユーザー ログイン認証 ユーザー名とパスワードを入力して認証を行うユーザー ログイン認証の概要を紹介します。\nアプリの登録を行って取得したアプリ ID（client_id）を使ってユーザー ログイン認証を行います。異なる環境でアクセス トークンをセキュアに取得するために OAuth 2.0 は複数の異なる承認タイプ（grant_types）を定義します。各承認タイプとアプリの種類の対応関係は以下の通りです。\n   承認タイプ クライアントの種類     Implicit ブラウザー ベース   Authorization モバイル、ネイティブ、サーバー サイド    アプリと ArcGIS for Developers 間で行われるユーザー ログイン認証のフローは基本的には変わりません。以下はブラウザー ベースのアプリにおける認証フローです。\n ユーザーのアプリ ID（client_id）、response_type=token、リダイレクト URI（redirect_uri）とオプションで有効期限（expiration）を使って、ブラウザー内で認証用エンドポイント（https://www.arcgis.com/sharing/rest/oauth2/authorize ）にユーザーをダイレクトします。 \u0026lt;img src=\u0026ldquo;http://apps.esrij.com/arcgis-dev/guide/img/auth/oauth-userlogin1.png\u0026quot; width=\u0026ldquo;300px\u0026rdquo;\n ユーザー名とパスワードによる認証に成功したら、ステップ１のリダイレクト URI（redirect_uri）からアプリにリダイレクトされます。アクセス トークン（access_token）と追加情報がハッシュとして URL の末尾に追加されます（例：http://app.example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA\u0026amp;expires_in=3600 ）。アプリはユーザーのトークンによって URL をパースすることができます。\n アクセス トークンが付与されたら、トークン（token）を要求する ArcGIS for Developers へのリクエストにトークンを含めます。   アプリ認証 特定のアプリをログインなしで認証を行うアプリ認証の概要を紹介します。\nアプリの登録を行って取得したアプリ ID（client_id）と秘密鍵（client_secret）を使ってアプリ認証を行います。なお、ブラウザー ベースの Web アプリに秘密鍵を埋め込むことはセキュリティのリスクが高まるため、プロキシ サービスの利用を推奨しています。詳細はプロキシ サービスの利用をご参照ください。\n以下は、アプリと ArcGIS for Developers 間で行われるアプリ認証のフローです。\n アプリ ID と秘密鍵を使って https://www.arcgis.com/sharing/rest/oauth2/token/ への POST リクエストを作成します。  JSON レスポンス内のアクセス トークン（access_token）を取得します。\n token パラメーターが要求されるリクエストにはすべてアクセス トークンを追加します。   "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/android/distribution-android-100.x/",
	"title": "アプリケーション配布ガイド",
	"tags": [],
	"description": "ArcGIS Runtime SDK for Android を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を紹介します。",
	"content": " ArcGIS Runtime SDK for Android を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を説明します。\nライセンス認証のステップ 開発したアプリケーションのライセンス認証のステップは以下の通りです。\n 使用するライセンスの選択 ライセンスの認証方法  Lite ライセンスの認証方法 Basic ライセンスの認証方法 Standard ライセンスの認証方法 Analysis Extension ライセンスの認証方法  ライセンスの認証  Lite ライセンスキーを使用した認証 配布パックのライセンスキーを使用した認証 指定ユーザー アカウントを使用した認証   使用するライセンスの選択 ArcGIS Runtime SDK for Android には Lite、Basic、Standard の 3 つのライセンス レベルがあります。開発したアプリケーションが使用する機能に応じて、適切なライセンス レベルを選択してください。\n各ライセンスで利用可能な機能の概要は以下の表をご参照ください。\n   ライセンス 利用できる機能     Lite ・地図表示（2D/3D）\n・フィーチャの表示/検索\n・フィーチャのオンライン編集（パブリックなフィーチャ サービス）\n・ルート検索/到達圏解析/最寄り施設検索\n・住所検索/リバース ジオコーディング   Basic ・Lite ライセンスで利用できるすべての機能\n・フィーチャのオンライン編集（セキュアなフィーチャ サービス）\n・フィーチャのオフライン編集\n・ArcGIS Online/Portal for ArcGIS のコンテンツの編集   Standard ・Basic ライセンスで利用できるすべての機能\n・シェープファイルの表示/編集\n・GeoPackage の表示/編集\n・KML（ローカル ファイル）の表示\n・ラスター データの表示/解析\n・航海用電子海図（ENC）の表示   Analysis Extension ・Standard ライセンス以上で利用可能なエクステンション\n・オフラインでの到達圏解析/最寄り施設検索    ライセンスの詳細はESRIジャパン製品ページをご参照ください。\nライセンスの認証方法 ライセンスの認証は次の2つの方法があります。\n ライセンスキーを使用した認証  ライセンスキーを使用した認証は、ArcGIS Runtime の配布パックを購入し、取得したライセンスキーを利用して、アプリケーションを認証します。 \n  指定ユーザーによるアカウント認証\n 指定ユーザーによるアカウント認証とは、ArcGIS Online または ArcGIS Enterprise の組織のメンバーである ArcGIS 組織アカウントを使用してログイン認証を行います。\n ログインを行う指定ユーザーアカウントのタイプによって関連付けられたライセンスのレベルが異なり、また認証はランタイムアプリにコードを含める必要があります。   指定ユーザーのユーザータイプとライセンスレベルの対比表 ■ ArcGIS Online または ArcGIS Enterprise 次期バージョン 10.8（国内リリース時期未定）以降をご利用の場合 ※Standard/Advanced は ArcGIS Runtime 100.7 以降から対応しております\n   User Type Runtime Level     Viewer Lite   Editor / Field Worker Basic   Creator / GIS Professional Basic Standard ※   GIS Professional Standard / GIS Professional Advanced Advanced ※    注-ArcGIS Runtime SDK for Android には Advanced ライセンスはありません。\n■ ArcGIS Enterprise 10.7 以前をご利用の場合\n   User Type Runtime Level     レベル1 または Viewer タイプ以上 Lite   レベル2 または Editor タイプ以上 Basic    Lite ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Lite のライセンスキーを取得する必要があります 認証の方法は、Lite ライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Liteライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Basic ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Basic の配布パックを購入する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Basicライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Standard ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Standard の配布パックを購入する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証\n注-この認証は、ArcGIS Runtime 100.7より以前のバージョンでは使用できません  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Standardライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Analysis Extension ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Analysis Extension の配布パックを購入する必要があります 基本ライセンス（Standard または Advanced）と併せて認証する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証\n注-この認証は、ArcGIS Runtime 100.7より以前のバージョンでは使用できません\n注-Protal for ArcGIS をご利用の場合は、ArcGIS Enterprise 10.7以前のバージョンでは使用できません  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Analysisアドオンライセンス拡張機能を割り当てられた) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   ライセンスの認証 以下の認証に応じた作業を行ってください。\nLite ライセンスキーを使用した認証 ArcGIS Runtime Lite のライセンスキーを ArcGIS for Developers のサイトから取得し、取得したライセンスキーを利用して、アプリケーションを Lite ライセンスで認証することができます。 最初に以下の手順で Lite レベルのライセンスキーを取得します。\n ArcGIS for Developers: Licensing Your ArcGIS Runtime App ページにアクセスします Lite の枠に表示されている [Sign Up] をクリックします 画面右上に表示される [Sign In] をクリックして ArcGIS for Developers アカウントでサインインします。アカウントの作成方法は、開発者アカウントの作成 表示されたライセンスキーをコピーします  次に、アプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、以下のコードを使用してアプリケーションにコピーしたライセンスキーを設定します。  // ライセンスキーを設定して認証 LicenseResult licenseResult = ArcGISRuntimeEnvironment.setLicense(\u0026quot;runtimelite,1000,rud#########,day-month-year,####################\u0026quot;); if(licenseResult.getLicenseStatus() == LicenseStatus.VALID){ Log.d(TAG,\u0026quot;ライセンスは有効です:\u0026quot; + licenseResult.getLicenseStatus()); }else{ // TODO ライセンスが無効の場合の処理 Log.d(TAG,\u0026quot;ライセンスは無効です:\u0026quot; + licenseResult.getLicenseStatus()); }  配布パックのライセンスキーを使用した認証 ArcGIS Runtime の配布パックを購入し、取得したライセンスキーを利用して、アプリケーションを認証することができます。\nArcGIS Runtime の配布パックの購入については ESRIジャパンにお問合せください。ArcGIS Runtime の配布パックをご購入頂いた場合、ESRIジャパンよりライセンスキーをメールにてお送りします。\nアプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、以下のコードを使用して配布パックのライセンスキーを設定します。\n// ライセンスキーを設定して認証:runtimebasic/runtimestandard/runtimeadvanced LicenseResult licenseResult = ArcGISRuntimeEnvironment.setLicense(\u0026quot;runtimebasic,1000,rud#########,day-month-year,####################\u0026quot;); if(licenseResult.getLicenseStatus() == LicenseStatus.VALID){ Log.d(TAG,\u0026quot;ライセンスは有効です:\u0026quot; + licenseResult.getLicenseStatus()); }else{ // TODO ライセンスが無効の場合の処理 Log.d(TAG,\u0026quot;ライセンスは無効です:\u0026quot; + licenseResult.getLicenseStatus()); }  Analysis Extension ライセンスを認証する場合は以下のコードを使用します。\n// ライセンスキーを設定して認証 LicenseResult extLicenseResult = ArcGISRuntimeEnvironment.setLicense(\u0026quot;runtimestandard,1000,rud#########,day-month-year,####################\u0026quot;, Arrays.asList(\u0026quot;runtimeanalysis,1000,rud#########,day-month-year,####################\u0026quot;, \u0026quot;another license extension code\u0026quot;)); if(extLicenseResult.getLicenseStatus() == LicenseStatus.VALID){ Log.d(TAG,\u0026quot;ライセンスは有効です:\u0026quot; + extLicenseResult.getLicenseStatus()); }else{ // TODO ライセンスが無効の場合の処理 Log.d(TAG,\u0026quot;ライセンスは無効です:\u0026quot; + extLicenseResult.getLicenseStatus()); }  指定ユーザー アカウントを使用した認証 アプリケーションの実行時に、アプリケーションを利用するユーザーが保有する ArcGIS Online 組織向けプラン もしくは Portal for ArcGIS の指定ユーザー アカウントを使用して ArcGIS Online / Portal for ArcGIS にログインすることで、ライセンスを取得することができます。\nアプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、ライセンスを取得・設定します。以下の認証方法は、指定ユーザーのユーザー名とパスワードをコードに埋め込んで認証する簡単な例です。認証方法の詳細については ArcGIS for Developers: 認証マネージャーの使用（英語）をご参照ください。\n// ユーザー アカウント情報で ArcGIS Online / ArcGISポータルへログインし認証情報を取得します // ログインのための入力フォームが表示されます。 DefaultAuthenticationChallengeHandler handler = new DefaultAuthenticationChallengeHandler(this); AuthenticationManager.setAuthenticationChallengeHandler(handler); //ArcGIS Online またはご自分の portal の URL を設定します final Portal portal = new Portal(\u0026quot;https://www.arcgis.com\u0026quot;,true); // ポータルの情報を同期してロードします。 portal.loadAsync(); portal.addDoneLoadingListener(new Runnable() { @Override public void run() { if (portal.getLoadStatus() == LoadStatus.LOADED) { // ポータルからライセンス情報を取得します LicenseInfo licenseInfo = portal.getPortalInfo(); // 取得したライセンスを設定します LicenseResult licenseResult = ArcGISRuntimeEnvironment.setLicense(licenseInfo); if(licenseResult.getLicenseStatus() == LicenseStatus.VALID){ Log.d(TAG,\u0026quot;ライセンスは有効です:\u0026quot; + licenseResult.getLicenseStatus()); }else{ // TODO ライセンスが無効の場合の処理 Log.d(TAG,\u0026quot;ライセンスは無効です:\u0026quot; + licenseResult.getLicenseStatus()); } } } });  注意： バージョン 100.7 以降でのライセンス情報の取得は portal.getPortalInfo() を使用し、バージョン 100.6 以前では portal.getPortalInfo().getLicenseInfo() を使用してください。  アプリケーションが ArcGIS Online / Portal for ArcGIS に常にログインできない場合\n配布するアプリケーションがネットワークに接続できない環境で実行するなどの理由により、起動時に毎回 ArcGIS Online / Portal for ArcGIS にログインすることができない場合は、取得したライセンス情報を最大 30 日までローカルに保存しておくことができます。\nこの方法を使用する場合、少なくとも 30 日に 1 回はアプリケーションから ArcGIS Online / Portal for ArcGIS にログインし、ローカルのライセンス情報を更新する必要があります。最後にログインしてから 30 日以上経過した場合は、ライセンスが無効となりそのライセンスを必要とする機能が使用できなくなります。\n以下のコードを使用して取得したライセンス情報を JSON 形式で出力することができます。出力したライセンス情報は任意の方法でローカルに保存してください。\n// ライセンス情報を JSON 形式で出力 var licenseJson = licenseInfo.ToJson(); // --- 出力したライセンス情報を保存するコードを記述 ---  ローカルに保存した JSON 形式のライセンス情報を読み込み ArcGIS Runtime に設定するには、以下のコードを使用します。\n// ネットワーク接続可能時に Json 形式でライセンス情報を取得します。 LicenseInfo licenseInfo = portal.getPortalInfo(); String licenseInfoJson = licenseInfo.toJson(); // オフライン状態の場合は、作成済みの文字列で保存したライセンス情報を取得します。 LicenseInfo licenseInfo = new LicenseInfo(licenseInfoJson); // 作成したライセンス情報を設定します。 ArcGISRuntimeEnvironment.setLicense(licenseInfo);  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/dotnet/distribution-dotnet-100.x/",
	"title": "アプリケーション配布ガイド",
	"tags": [],
	"description": "ArcGIS Runtime SDK for .NET を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を紹介します。",
	"content": " ArcGIS Runtime SDK for .NET を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を説明します。\nライセンス認証のステップ 開発したアプリケーションのライセンス認証のステップは以下の通りです。\n 使用するライセンスの選択 ライセンスの認証方法  Lite ライセンスの認証方法 Basic ライセンスの認証方法 Standard ライセンスの認証方法 Advanced ライセンスの認証方法 Analysis Extension ライセンスの認証方法  ライセンスの認証  Lite ライセンスキーを使用した認証 配布パックのライセンスキーを使用した認証 指定ユーザー アカウントを使用した認証   使用するライセンスの選択 ArcGIS Runtime SDK for .NET には Lite、Basic、Standard、Advanced の 4 つのライセンス レベルと Analysis エクステンションがあります。開発したアプリケーションが使用する機能に応じて、適切なライセンス レベルを選択してください。\n各ライセンスで利用可能な機能の概要は以下の表をご参照ください。\n   ライセンス 利用できる機能     Lite ・地図表示（2D/3D）\n・フィーチャの表示/検索\n・フィーチャのオンライン編集（パブリックなフィーチャ サービス）\n・ルート検索/到達圏解析/最寄り施設検索\n・住所検索/リバース ジオコーディング   Basic ・Lite ライセンスで利用できるすべての機能\n・フィーチャのオンライン編集（セキュアなフィーチャ サービス）\n・フィーチャのオフライン編集\n・ArcGIS Online/Portal for ArcGIS のコンテンツの編集   Standard ・Basic ライセンスで利用できるすべての機能\n・シェープファイルの表示/編集\n・GeoPackage の表示/編集\n・KML（ローカル ファイル）の表示\n・ラスター データの表示/解析\n・航海用電子海図（ENC）の表示\n・ローカル サーバーの標準的な機能（WPF API のみ）   Advanced ・Standard ライセンスで利用できるすべての機能\n・ローカル サーバーの高度な機能（WPF API のみ）   Analysis Extension ・Standard ライセンス以上で利用可能なエクステンション・オフラインでの到達圏解析/最寄り施設検索\n・ArcGIS Desktop（Spatial/3D/Network エクステンション）で利用可能なジオプロセシング ツールの一部（WPF API のみ）    ライセンスの詳細はESRIジャパン製品ページをご参照ください。\nライセンスの認証方法 ライセンスの認証は次の2つの方法があります。\n ライセンスキーを使用した認証  ライセンスキーを使用した認証は、ArcGIS Runtime の配布パックを購入し、取得したライセンスキーを利用して、アプリケーションを認証します。 \n  指定ユーザーによるアカウント認証\n 指定ユーザーによるアカウント認証とは、ArcGIS Online または ArcGIS Enterprise の組織のメンバーである ArcGIS 組織アカウントを使用してログイン認証を行います。\n ログインを行う指定ユーザーアカウントのタイプによって関連付けられたライセンスのレベルが異なり、また認証はランタイムアプリにコードを含める必要があります。   指定ユーザーのユーザータイプとライセンスレベルの対比表 ■ ArcGIS Online または ArcGIS Enterprise 次期バージョン 10.8（国内リリース時期未定） 以降をご利用の場合 ※Standard/Advanced は ArcGIS Runtime 100.7 以降から対応しております\n   User Type Runtime Level     Viewer Lite   Editor / Field Worker Basic   Creator / GIS Professional Basic Standard ※   GIS Professional Standard / GIS Professional Advanced Advanced ※    ■ ArcGIS Enterprise 10.7 以前をご利用の場合\n   User Type Runtime Level     レベル1 または Viewer タイプ以上 Lite   レベル2 または Editor タイプ以上 Basic    Lite ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Lite のライセンスキーを取得する必要があります 認証の方法は、Lite ライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Liteライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Basic ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Basic の配布パックを購入する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Basicライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Standard ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Standard の配布パックを購入する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証\n注-この認証は、ArcGIS Runtime 100.7より以前のバージョンでは使用できません  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Standardライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Advanced ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Advanced の配布パックを購入する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証\n注-この認証は、ArcGIS Runtime 100.7より以前のバージョンでは使用できません  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Advancedライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Analysis Extension ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Analysis Extension の配布パックを購入する必要があります 基本ライセンス（Standard または Advanced）と併せて認証する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証\n注-この認証は、ArcGIS Runtime 100.7より以前のバージョンでは使用できません\n注-Protal for ArcGIS をご利用の場合は、ArcGIS Enterprise 10.7以前のバージョンでは使用できません  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Analysisアドオンライセンス拡張機能を割り当てられた) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   ライセンスの認証 以下の認証に応じた作業を行ってください。\nLite ライセンスキーを使用した認証 ArcGIS Runtime Lite のライセンスキーを ArcGIS for Developers のサイトから取得し、取得したライセンスキーを利用して、アプリケーションを Lite ライセンスで認証することができます。 最初に以下の手順で Lite レベルのライセンスキーを取得します。\n ArcGIS for Developers: Licensing Your ArcGIS Runtime App ページにアクセスします Lite の枠に表示されている [Sign Up] をクリックします 画面右上に表示される [Sign In] をクリックして ArcGIS for Developers アカウントでサインインします。アカウントの作成方法は、開発者アカウントの作成 表示されたライセンスキーをコピーします  次に、アプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、以下のコードを使用してアプリケーションにコピーしたライセンスキーを設定します。  // ライセンスキーを設定して認証 string licenseKey = \u0026quot;runtimelite,1000,rud#########,day-month-year,####################\u0026quot;; Esri.ArcGISRuntime.ArcGISRuntimeEnvironment.SetLicense(licenseKey);  配布パックのライセンスキーを使用した認証 ArcGIS Runtime の配布パックを購入し、取得したライセンスキーを利用して、アプリケーションを認証することができます。\nArcGIS Runtime の配布パックの購入については ESRIジャパンにお問合せください。ArcGIS Runtime の配布パックをご購入頂いた場合、ESRIジャパンよりライセンスキーをメールにてお送りします。\nアプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、以下のコードを使用して配布パックのライセンスキーを設定します。\n// ライセンスキーを設定して認証 string licenseKey = \u0026quot;runtimestandard,1000,rud#########,day-month-year,####################\u0026quot;; ArcGISRuntimeEnvironment.SetLicense(licenseKey);  Analysis Extension ライセンスを認証する場合は以下のコードを使用します。\n// 基本ライセンス（Standard または Advanced）のライセンスキーの設定 string licenseKey = \u0026quot;runtimestandard,1000,rud#########,day-month-year,####################\u0026quot;; // Analysis Extension ライセンスのライセンスキーの設定 string[] extensions = { \u0026quot;runtimeanalysis,1000,rud#########,day-month-year,####################\u0026quot; }; // 基本ライセンスと Analysis Extension ライセンスの認証 ArcGISRuntimeEnvironment.SetLicense(licenseKey, extensions);  指定ユーザー アカウントを使用した認証 アプリケーションの実行時に、アプリケーションを利用するユーザーが保有する ArcGIS Online 組織向けプラン もしくは Portal for ArcGIS の指定ユーザー アカウントを使用して ArcGIS Online / Portal for ArcGIS にログインすることで、ライセンスを取得することができます。\nアプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、ライセンスを取得・設定します。以下の認証方法は、指定ユーザーのユーザー名とパスワードをコードに埋め込んで認証する簡単な例です。認証方法の詳細については ArcGIS for Developers: 認証マネージャーの使用（英語）をご参照ください。\ntry { // 認証先のポータルの URL を設定 Uri serviceUri = new Uri(\u0026quot;https://www.arcgis.com/sharing/rest\u0026quot;); // 認証情報の作成 Credential credential = await AuthenticationManager.Current.GenerateCredentialAsync(serviceUri, \u0026quot;\u0026lt;ユーザー名\u0026gt;\u0026quot;, \u0026quot;\u0026lt;パスワード\u0026gt;\u0026quot;); // 認証情報を設定してポータルへ接続 ArcGISPortal arcgisPortal = await ArcGISPortal.CreateAsync(serviceUri, credential); // ライセンス情報を取得 LicenseInfo licenseInfo = await arcgisPortal.GetLicenseInfoAsync(); // ArcGIS Runtime にライセンスを設定 ArcGISRuntimeEnvironment.SetLicense(licenseInfo); } catch (Exception ex) { MessageBox.Show(ex.Message, \u0026quot;認証のエラー\u0026quot;); }  注意： 上記のコードスニペットは、ArcGIS Runtime 100.7 で導入された新しい GetLicenseInfoAsync() APIを使用しています。 バージョン 100.7 以降では GetLicenseInfoAsync()、バージョン 100.6 以前では Portal.portalInfo.licenseInfo を使用します。  アプリケーションが ArcGIS Online / Portal for ArcGIS に常にログインできない場合\n配布するアプリケーションがネットワークに接続できない環境で実行するなどの理由により、起動時に毎回 ArcGIS Online / Portal for ArcGIS にログインすることができない場合は、取得したライセンス情報を最大 30 日までローカルに保存しておくことができます。\nこの方法を使用する場合、少なくとも 30 日に 1 回はアプリケーションから ArcGIS Online / Portal for ArcGIS にログインし、ローカルのライセンス情報を更新する必要があります。最後にログインしてから 30 日以上経過した場合は、ライセンスが無効となりそのライセンスを必要とする機能が使用できなくなります。\n以下のコードを使用して取得したライセンス情報を JSON 形式で出力することができます。出力したライセンス情報は任意の方法でローカルに保存してください。\n// ライセンス情報を JSON 形式で出力 var licenseJson = licenseInfo.ToJson(); // --- 出力したライセンス情報を保存するコードを記述 ---  ローカルに保存した JSON 形式のライセンス情報を読み込み ArcGIS Runtime に設定するには、以下のコードを使用します。\n// --- 保存したライセンス情報を読み込むコードを記述 --- //JSON 形式のライセンス情報からライセンスを復元 var localLicenseInfo = LicenseInfo.FromJson(licenseJson); //ArcGIS Runtime にライセンスを設定 ArcGISRuntimeEnvironment.SetLicense(localLicenseInfo);  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/ios/distribution-ios-100.x/",
	"title": "アプリケーション配布ガイド",
	"tags": [],
	"description": "ArcGIS Runtime SDK for iOS を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を紹介します。",
	"content": " ArcGIS Runtime SDK for iOS を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を説明します。\nライセンス認証のステップ 開発したアプリケーションのライセンス認証のステップは以下の通りです。\n 使用するライセンスの選択 ライセンスの認証方法  Lite ライセンスの認証方法 Basic ライセンスの認証方法 Standard ライセンスの認証方法 Analysis Extension ライセンスの認証方法  ライセンスの認証  Lite ライセンスキーを使用した認証 配布パックのライセンスキーを使用した認証 指定ユーザー アカウントを使用した認証   使用するライセンスの選択 ArcGIS Runtime SDK for iOS には Lite、Basic、Standard の 3 つのライセンス レベルがあります。開発したアプリケーションが使用する機能に応じて、適切なライセンス レベルを選択してください。\n各ライセンスで利用可能な機能の概要は以下の表をご参照ください。\n   ライセンス 利用できる機能     Lite ・地図表示（2D/3D）\n・フィーチャの表示/検索\n・フィーチャのオンライン編集（パブリックなフィーチャ サービス）\n・ルート検索/到達圏解析/最寄り施設検索\n・住所検索/リバース ジオコーディング   Basic ・Lite ライセンスで利用できるすべての機能\n・フィーチャのオンライン編集（セキュアなフィーチャ サービス）\n・フィーチャのオフライン編集\n・ArcGIS Online/Portal for ArcGIS のコンテンツの編集   Standard ・Basic ライセンスで利用できるすべての機能\n・シェープファイルの表示/編集\n・GeoPackage の表示/編集\n・KML（ローカル ファイル）の表示\n・ラスター データの表示/解析\n・航海用電子海図（ENC）の表示   Analysis Extension ・Standard ライセンス以上で利用可能なエクステンション・オフラインでの到達圏解析/最寄り施設検索    ライセンスの詳細はESRIジャパン製品ページをご参照ください。\nライセンスの認証方法 ライセンスの認証は次の2つの方法があります。\n ライセンスキーを使用した認証  ライセンスキーを使用した認証は、ArcGIS Runtime の配布パックを購入し、取得したライセンスキーを利用して、アプリケーションを認証します。 \n  指定ユーザーによるアカウント認証\n 指定ユーザーによるアカウント認証とは、ArcGIS Online または ArcGIS Enterprise の組織のメンバーである ArcGIS 組織アカウントを使用してログイン認証を行います。\n ログインを行う指定ユーザーアカウントのタイプによって関連付けられたライセンスのレベルが異なり、また認証はランタイムアプリにコードを含める必要があります。   指定ユーザーのユーザータイプとライセンスレベルの対比表 ■ ArcGIS Online または ArcGIS Enterprise 次期バージョン 10.8（国内リリース時期未定）以降をご利用の場合 ※Standard/Advanced は ArcGIS Runtime 100.7 以降から対応しております\n   User Type Runtime Level     Viewer Lite   Editor / Field Worker Basic   Creator / GIS Professional Basic Standard ※   GIS Professional Standard / GIS Professional Advanced Advanced ※    注-ArcGIS Runtime SDK for iOS には Advanced ライセンスはありません。\n■ ArcGIS Enterprise 10.7 以前をご利用の場合\n   User Type Runtime Level     レベル1 または Viewer タイプ以上 Lite   レベル2 または Editor タイプ以上 Basic    Lite ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Lite のライセンスキーを取得する必要があります 認証の手順は、Lite ライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Lite ライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Basic ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Basic の配布パックを購入する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Basic ライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Standard ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Standard の配布パックを購入する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証\n注-この認証は、ArcGIS Runtime 100.7より以前のバージョンでは使用できません  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Standard ライセンスレベルを保有する) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   Analysis Extension ライセンスの認証方法  ライセンスキーを使用した認証  ArcGIS Runtime Analysis Extension の配布パックを購入する必要があります 基本ライセンス（Standard または Advanced）と併せて認証する必要があります 認証の手順は、配布パックのライセンスキーを使用した認証をご参照ください \n  ArcGIS Online / Portal for ArcGIS へのログインによる認証\n注-この認証は、ArcGIS Runtime 100.7より以前のバージョンでは使用できません\n注-Protal for ArcGIS をご利用の場合は、ArcGIS Enterprise 10.7 以前のバージョンでは使用できません  アプリケーションを使用するユーザーごとに ArcGIS Online 組織向けプラン/ Portal for ArcGIS の指定ユーザー アカウント(ArcGIS Runtime Analysisアドオンライセンス拡張機能を割り当てられた) が必要です アプリケーションが少なくとも 30 日に 1 回は ArcGIS Online 組織向けプラン/ Portal for ArcGIS へログインする必要があります 認証の手順は、指定ユーザー アカウントを使用した認証をご参照ください   ライセンスの認証 以下の認証に応じた作業を行ってください。\nLite ライセンスキーを使用した認証 ArcGIS Runtime Lite のライセンスキーを ArcGIS for Developers のサイトから取得し、取得したライセンスキーを利用して、アプリケーションを Lite ライセンスで認証することができます。 最初に以下の手順で Lite レベルのライセンスキーを取得します。\n ArcGIS for Developers: Licensing Your ArcGIS Runtime App ページにアクセスします Lite の枠に表示されている [Sign Up] をクリックします 画面右上に表示される [Sign In] をクリックして ArcGIS for Developers アカウントでサインインします。アカウントの作成方法は、開発者アカウントの作成 表示されたライセンスキーをコピーします  次に、アプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、以下のコードを使用してアプリケーションにコピーしたライセンスキーを設定します。  do { // ライセンスキーを設定して認証 let result = try AGSArcGISRuntimeEnvironment.setLicenseKey(\u0026quot;runtimelite,1000,rud#########,day-month-year,####################\u0026quot;) print(\u0026quot;License Result : \\(result.licenseStatus)\u0026quot;) } catch let error as NSError { // 認証に失敗した場合はエラーを出力 print(\u0026quot;error: \\(error)\u0026quot;) }  配布パックのライセンスキーを使用した認証 ArcGIS Runtime の配布パックを購入し、取得したライセンスキーを利用して、アプリケーションを認証することができます。\nArcGIS Runtime の配布パックの購入については ESRIジャパンにお問合せください。ArcGIS Runtime の配布パックをご購入頂いた場合、ESRIジャパンよりライセンスキーをメールにてお送りします。\nアプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、以下のコードを使用して配布パックのライセンスキーを設定します。\ndo { // ライセンスキーを設定して認証 let result = try AGSArcGISRuntimeEnvironment.setLicenseKey(\u0026quot;runtimestandard,1000,rud#########,day-month-year,####################\u0026quot;) print(\u0026quot;License Result: \\(result.licenseStatus)\u0026quot;) } catch let error as NSError { // 認証に失敗した場合はエラーを出力 print(\u0026quot;Error: \\(error)\u0026quot;) }  Analysis Extension ライセンスを認証する場合は以下のコードを使用します。\nlet error : NSErrorPointer = nil AGSArcGISRuntimeEnvironment.setLicenseKey(\u0026quot;runtimeadvanced,1000,rud#########,day-month-year,####################\u0026quot;, extensions: [\u0026quot;runtimesmpna,1000,rud#########,day-month-year,####################\u0026quot;, \u0026quot;runtimesmpla,1000,rud#########,day-month-year,####################\u0026quot; ], error: error)  指定ユーザー アカウントを使用した認証 アプリケーションの実行時に、アプリケーションを利用するユーザーが保有する ArcGIS Online 組織向けプラン もしくは Portal for ArcGIS の指定ユーザー アカウントを使用して ArcGIS Online / Portal for ArcGIS にログインすることで、ライセンスを取得することができます。\nアプリケーションのコードにおいて ArcGIS Runtime SDK の機能が呼び出される前に、以下のコードを使用してライセンスを取得します。\n// 表示される入力フォームから ArcGIS Online / Portal for ArcGIS にログインし認証情報を取得 let theURL = URL(string: \u0026quot;https://www.arcgis.com\u0026quot;) let portal = AGSPortal(url: theURL!, loginRequired: true) portal.load { (error) in if let error = error { print(error) } else { // ポータルからユーザーライセンス情報を取得 portal.fetchLicenseInfo { (licenseInfo,error) in guard let error = error { print(\u0026quot;ユーザーライセンスの取得エラー \\(error)\u0026quot;) return } // 指定ユーザーのライセンス情報を使用してライセンスを設定します do { let result = try AGSArcGISRuntimeEnvironment.setLicenseInfo(licenseInfo!) } catch let error as NSError { print(\u0026quot;error: \\(error.localizedDescription)\u0026quot;) } } } }  注意： 上記のコードスニペットは、ArcGIS Runtime 100.7 で導入された新しい fetchLicenseInfo() API を使用しています。バージョン 100.7 では fetchLicenseInfo()、バージョン 100.6 以前では Portal.portalInfo.licenseInfo を使用します。  アプリケーションが ArcGIS Online / Portal for ArcGIS に常にログインできない場合\n配布するアプリケーションがネットワークに接続できない環境で実行するなどの理由により、起動時に毎回 ArcGIS Online / Portal for ArcGIS にログインすることができない場合は、取得したライセンス情報を最大 30 日までローカルに保存しておくことができます。\nこの方法を使用する場合、少なくとも 30 日に 1 回はアプリケーションから ArcGIS Online / Portal for ArcGIS にログインし、ローカルのライセンス情報を更新する必要があります。最後にログインしてから 30 日以上経過した場合は、ライセンスが無効となり該当するライセンスを必要とする機能が使用できなくなります。\n出力したライセンス情報は任意の方法でローカルに保存してください。以下のコードでは、ライセンス情報を配列で出力し、AGSKeychainItem クラスを使用して Keychain に保存しています（iOS シミュレータで実行する場合は、Xcode の Capabilities 設定画面で [Keychain Sharing] を ON にしてください）。\n// 表示される入力フォームから ArcGIS Online / Portal for ArcGIS にログインし認証情報を取得 let theURL = URL(string: \u0026quot;https://www.arcgis.com\u0026quot;) let portal = AGSPortal(url: theURL!, loginRequired: true) portal.load { (error) in if let error = error { print(error) } else { // ポータルからユーザーライセンス情報を取得 portal.fetchLicenseInfo { (licenseInfo,error) in guard let error = error { print(\u0026quot;ユーザーライセンスの取得エラー \\(error)\u0026quot;) return } // 指定ユーザーのライセンス情報を使用してライセンスを設定します do { let result = try AGSArcGISRuntimeEnvironment.setLicenseInfo(licenseInfo!) } catch let error as NSError { print(\u0026quot;error: \\(error.localizedDescription)\u0026quot;) } // ライセンス情報を保存して、アプリを起動してオフラインでライセンスを取得 // この例では、licenseDictionary はキーチェーンに保存 var licenseDictionary: NSDictionary? do {licenseDictionary = try licenseInfo?.toJSON() as! NSDictionary? } catch { print(\u0026quot;ライセンス情報が無効です\u0026quot;) } let keychainItem = AGSKeychainItem(identifier: \u0026quot;com.your_org.your_app_name\u0026quot;, accessGroup: nil, acrossDevices: false) keychainItem.writeObject(toKeychain: licenseDictionary!, completion: { (writeError) in if let error = writeError { print(\u0026quot;Keychain への書き込みエラー \\(error)\u0026quot;) } }) } } } ・・・・・・ // Keychain からライセンス情報を取得 let keychainItem = AGSKeychainItem(identifier: \u0026quot;com.your_org.your_app_name\u0026quot;, accessGroup: nil, acrossDevices: false) //　キーチェーンから JSON 形式でライセンスを取得 let licenseDictionary = keychainItem.readObjectFromKeychain() as? NSDictionary // JSON からライセンス情報を生成 let licenseInfo = try! AGSLicenseInfo.fromJSON(licenseDictionary!) as? AGSLicenseInfo // ライセンスキーを設定して認証 AGSArcGISRuntimeEnvironment.setLicenseInfo(licenseInfo!, error: errorPointer)  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/webappbuilder/development-guide/",
	"title": "カスタム ウィジェット開発ガイド",
	"tags": [],
	"description": "カスタム ウィジェットを開発する手順を紹介します。",
	"content": " はじめに このガイドについて このガイドは Web AppBuilder for ArcGIS (Developer Edition) （以下、Web AppBuilder）で使用するカスタム ウィジェットを作成する方法を説明します。\nWeb AppBuilder のインストール方法に関しては、Web AppBuilder for ArcGIS (Developer Edition) インストールガイドをご参照ください。\nまた Esri Japan GitHub では、Web AppBuilder のカスタム ウィジェット/テーマが共有されています。このガイドで作成するウィジェットの完成版も公開されています。\n既成ウィジェットのソースコードの確認 Web AppBuilder で使われる全てのウィジェットは \u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\client\\stemapp\\widgets に格納されていて、ソースコードを確認できます。開発したカスタム ウィジェットも同様にこのディレクトリに配置します。\n上記ディレクトリにある samplewidgets フォルダーには簡易機能のサンプル ウィジェットが用意されています（本ガイドではウィジェット作成の雛形となるコードが記述されたテンプレートである CustomWidgetTemplate を使用します）。\nウィジェットのフォルダー構成 カスタム ウィジェットを作成する際に使用するファイルは以下です。全ファイルが必須ではなく、ウィジェットの UI を設ける、ウィジェットをローカライズする、設定画面を設ける等の目的に応じてファイルを準備します。\nカスタム ウィジェットの開発 1. ウィジェット ボタンを配置する Web AppBuilder のウィジェットは2 種類に分けられます。1 つは「描画」ウィジェットのようなパネルを表示して使用するウィジェットです（Web AppBuilder では In-Panel ウィジェットと呼びます）。もう 1 つは、「現在位置」ウィジェットのように画面上にボタンのみを配置するパネルを表示しないウィジェットです（Off-Panel ウィジェットと呼びます）。\n本ガイドでは簡単なバッファー検索を行う In-Panel ウィジェットを開発していきます。ウィジェットを追加するには \u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\client\\stemapp\\widgets にウィジェットのフォルダーを配置します。\n`\\client\\stemapp\\widgets\\samplewidgets` にある `CustomWidgetTemplate` フォルダーを `\\client\\stemapp\\widgets` にコピーします。 `CustomWidgetTemplate` フォルダーの名前を `Buffer` に変えます。\nフォルダー名は半角英数字である必要があります。\n `Buffer` フォルダー直下にある `manifest.json` ファイルを開きます。 `name` 属性の値を `Buffer` に変更します。 文字コードに UTF8 を指定して、`manifest.json` ファイルを保存します。 以降で紹介する手順においてもファイルを保存する際は、文字コードを UTF8 に指定して保存するようにしてください。  manifest.json ウィジェットの名前やバージョンなどのウィジェットの属性を設定するファイルです。properties 属性でカスタム ウィジェットのプロパティを構成できます。inPanel を false に設定すると Web AppBuilder のウィジェットの追加画面に表示されなくなります。ウィジェットのプロパティについてはWidget manifestをご参照ください。\nWeb AppBuilder のウィジェットの追加画面で表示されるウィジェット名をローカライズします。ウィジェットのローカライズは `Buffer` フォルダーの直下にある `nls` フォルダーで設定します。`Buffer\\nls` フォルダーにある `strings.js` ファイルを開き、以下のコードを入力し保存します。 define({ root: ({ _widgetLabel: \"Buffer\" }), \"ja\": 1 });  `nls` フォルダー直下に `ja` フォルダーを作成します。 `ja` フォルダーに `strings.js` ファイルを作成し、以下のコードを入力し保存します。 define({ _widgetLabel: \"バッファー検索\" });  Web AppBuilder を起動してアプリケーションを作成すると、ウィジェットの追加画面に「バッファー検索」というウィジェットが新しく表示されます。\n※ 作成する Web アプリに表示するウィジェット名は Web AppBuilder のウィジェット構成画面で変更可能です。   nls フォルダー カスタム ウィジェットを多言語化する場合に使用します（アクセスするブラウザーのロケールにより該当する言語が表示されます）。_widgetLabel はウィジェット追加時に表示されるラベルをローカライズするための固有の属性です。\n使用例 * nls\\strings.js：「Widget.html」でローカライズするストリングを指定\ndefine({ root: ({ label1: \u0026quot;Hello\u0026quot; }), \u0026quot;ja\u0026quot;: 1 // 日本語ロケールを使用する場合に 1 と設定 });   nls\\ja\\strings.js：各言語フォルダーにある strings.js ファイルで表示する文字を設定 js define({ label1: \u0026quot;こんにちは\u0026quot; });  Widget.html：文字を表示 html \u0026lt;label\u0026gt;${nls.label1}\u0026lt;/label\u0026gt;   images\\icon.png カスタム ウィジェットのボタンのアイコンを変更したい場合は、このファイルを置き換えます。\n2. ウィジェットの構成画面を作成する Web AppBuilder でウィジェットの構成を行う画面を作成します。ここでは検索に使用するバッファーの距離単位を設定する画面を作成します。\n Buffer フォルダーに setting フォルダーを作成します。\n setting フォルダーに Setting.html ファイルを作成し、以下のコードを入力します。\n\u0026lt;div\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;td\u0026gt;距離単位\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;div\u0026gt; \u0026lt;select data-dojo-attach-point=\u0026quot;selectLengthUnit\u0026quot; data-dojo-type=\u0026quot;dijit/form/Select\u0026quot;\u0026gt; \u0026lt;option value=\u0026quot;kilometers\u0026quot; selected=\u0026quot;selected\u0026quot;\u0026gt;キロメートル\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;meters\u0026quot;\u0026gt;メートル\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt;  setting フォルダーに Setting.js ファイルを作成し、以下のコードを入力します。\ndefine([ 'dojo/_base/declare', 'dijit/_WidgetsInTemplateMixin', 'jimu/BaseWidgetSetting', 'esri/units', 'dijit/form/Select' ], function(declare, _WidgetsInTemplateMixin, BaseWidgetSetting, esriUnits) { return declare([BaseWidgetSetting, _WidgetsInTemplateMixin], { baseClass: 'jimu-widget-buffer-setting', startup: function() { this.inherited(arguments); if (!this.config.measurement) { this.config.measurement = {}; } this.setConfig(this.config); }, setConfig: function(config) { this.config = config; if (this.config.measurement.LengthUnit) { this.selectLengthUnit.set('value', this.config.measurement.LengthUnit); } else { // デフォルトで表示される単位をキロメートルに設定 this.selectLengthUnit.set('value', 'kilometers'); this.config.measurement.UnitLabel = 'キロメートル'; } }, getConfig: function() { // ユーザーが単位を変更した時に config.json にその値を格納 this.config.measurement.LengthUnit = this.selectLengthUnit.value; // ウィジェットのパネルに表示する単位ラベルに使用 if (this.config.measurement.LengthUnit === 'kilometers') { this.config.measurement.UnitLabel = 'キロメートル'; } else { this.config.measurement.UnitLabel = 'メートル'; } return this.config; } }); });  Buffer フォルダーの config.json ファイルを開き、以下のコードを入力します。\n{ \u0026quot;measurement\u0026quot;: {} }  Buffer\\manifest.json を開き hasSettingLocale と hasSettingStyle 属性を false にします。\nsetting フォルダーに css や nls フォルダーを作成することで、構成画面用のスタイル定義、ローカライズが可能ですが、ここでは使用しないため false にします。\n ブラウザーを更新して、バッファー検索ウィジェットを追加すると、ウィジェットの構成画面が表示されます。\n変更を反映するために Web AppBuilder を再起動（Node.js の再起動およびブラウザーで Web AppBuilder を更新）する必要がある場合があります。   Setting\\Setting.html Web AppBuilder でウィジェットの設定を行う画面を作成します。\nSetting\\Setting.js Web AppBuilder でウィジェットの設定を行う際の処理を実装します。jimu/BaseWidgetSetting の子クラスを作成し、baseClass に jimu-widget-\u0026lt;ウィジェット名\u0026gt;-setting を指定します。以下のイベントが用意されています。\n setConfig：設定画面の初期化時 getConfig：設定変更時（変更内容を config.json のオブジェクトに格納）  config.json JSON 形式のオブジェクト格納ファイルです。Web AppBuilder でウィジェットの設定を行う場合は、config.json に用意した空のオブジェクトに値を格納して、 Widget.html や Widget.js からそのオブジェクトを取得します。 3. ウィジェットの処理を実装する  Buffer フォルダーにある Widget.html ファイルを開き編集します。バッファーの半径（inputNode）とマップ上にあるレイヤーから検索対象のレイヤーを選択（layerSelectNode）する画面を作成します。\n\u0026lt;div\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;半径を入力（${config.measurement.UnitLabel}）\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input class=\u0026quot;jimu-input\u0026quot; data-dojo-attach-point=\u0026quot;inputNode\u0026quot; value=\u0026quot;1000\u0026quot;\u0026gt;\u0026lt;/input\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;検索レイヤーを選択\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;div data-dojo-attach-point=\u0026quot;layerSelectNode\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt;  Buffer フォルダーにある Widget.js ファイルを開き編集します。\ndefine([ 'dojo/_base/declare', 'dojo/_base/lang', 'jimu/BaseWidget', 'jimu/LayerStructure', 'esri/geometry/geometryEngine', 'esri/symbols/SimpleMarkerSymbol', 'esri/symbols/SimpleLineSymbol', 'esri/symbols/SimpleFillSymbol', 'esri/Color', 'esri/graphic', 'esri/tasks/query', 'dijit/form/Select' ], function(declare, lang, BaseWidget, LayerStructure, geometryEngine, SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol, Color, Graphic, Query, Select) { return declare([BaseWidget], { baseClass: 'jimu-widget-buffer', ckickfunction: null, layerList: null, layerId: null, // スタートアップ時に実行されるメソッド startup: function() { this.inherited(arguments); // マップ上のレイヤーを取得し、レイヤー一覧を作成 var options = []; var layerStructure = LayerStructure.getInstance(); layerStructure.traversal(function(layerNode) { layerNode.getLayerType() .then(function(type) { if (type === 'FeatureLayer') { var option = { value: layerNode.id, label: layerNode.title }; options.push(option); } }) .catch(function(err) { console.log(err); }); }); this.layerList = new Select({ options: options }, this.layerSelectNode); this.layerList.startup(); // レイヤー一覧を変更したときのイベント this.layerList.on(\u0026quot;change\u0026quot;, lang.hitch(this, function(val) { this.layerId = val; })); }, // ウィジェットのパネルを開くときに実行されるメソッド onOpen: function() { this.inherited(arguments); // マップをクリックしたときのイベント ハンドラ this.ckickfunction = this.map.on(\u0026quot;click\u0026quot;, lang.hitch(this, this._clickHandler)); }, // ウィジェットのパネルを閉じるときに実行されるメソッド onClose: function() { this.inherited(arguments); // マップに表示されているグラフィックを削除 this.map.graphics.clear(); // マップのクリック イベントを削除 this.ckickfunction.remove(); }, // マップのクリック イベント _clickHandler: function(evt) { // マップ コンストラクタを取得 var map = this.map; // マップに表示されているグラフィックを削除 map.graphics.clear(); // inputNode に入力された半径の値を取得 var distance = this.inputNode.value; // ウィジェット構成時に設定した半径の単位を config.json から取得 var unit = this.config.measurement.LengthUnit; // クリック地点から指定した半径のバッファーを作成 var bufferGeometry = geometryEngine.buffer(evt.mapPoint, distance, unit); // 作成したバッファーをマップに表示 var sfs = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new Color([255, 0, 0]), 2), new Color([255, 255, 0, 0.25])); var graphic = new Graphic(bufferGeometry, sfs); map.graphics.add(graphic); // バッファー内のフィーチャを検索 var query = new Query(); query.geometry = graphic.geometry; query.spatialRelationship = Query.SPATIAL_REL_CONTAINS; // マップからレイヤー ID を指定してフィーチャ レイヤーを取得 var layer = map.getLayer(this.layerId); // フィーチャ レイヤーに対してクエリを実行 layer.queryFeatures(query) .then(function(featureSet) { // ポイント、ライン、ポリゴンごとにシンボルを設定 var highlightSymbol; if (layer.geometryType == \u0026quot;esriGeometryPoint\u0026quot;) { highlightSymbol = new SimpleMarkerSymbol(); highlightSymbol.setColor(new Color(\u0026quot;#f00\u0026quot;)); highlightSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 16, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([255, 0, 0]), 1), new Color([255, 0, 0, 0.5])); } else if (layer.geometryType == \u0026quot;esriGeometryPolyline\u0026quot;) { highlightSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([255, 0, 0, 0.5]), 6); } else { highlightSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([255, 0, 0]), 3), new Color([125, 125, 125, 0.5])); } // 結果を表示 featureSet.features.forEach(function(feature) { var queryGraphic = new Graphic(feature.geometry, highlightSymbol); map.graphics.add(queryGraphic); }); }); } }); });  Web AppBuilder で新しくアプリケーションを作成します。\n Web AppBuilder でフィーチャ サービスをレイヤーとして追加した Web マップを表示します（このウィジェットはフィーチャ レイヤーに対してバッファー検索を行います）。\n バッファー検索ウィジェットを追加し、バッファー検索ウィジェットのボタンをクリックして、半径とレイヤーを設定します。\n マップ上をクリックすると、バッファー内にあるフィーチャがハイライト表示されます。\n  Widget.html ウィジェットの画面を作成します。Web AppBuilder には、デフォルトでいくつかの css クラスが含まれており、アプリのデザインを統一させることができます。各クラスの詳細は css ファイル（jimu.js/css/jimu.css）を参照ください。\n使用例：\n\u0026lt;input class=\u0026quot;jimu-input\u0026quot; data-dojo-attach-point=\u0026quot;inputNode\u0026quot; value=\u0026quot;10000\u0026quot;\u0026gt;\u0026lt;/input\u0026gt;  css\\style.css Widget.html のスタイル定義ファイルです。\n使用例：\njimu-widget-\u0026lt;ウィジェット名\u0026gt; div:first-child { color: red; }  Widget.js ウィジェットの機能を実装するファイルです。jimu/BaseWidget の子クラスを作成し、\u0026quot;baseClass\u0026quot; に jimu-widget-\u0026lt;ウィジェット名\u0026gt; を指定します。\n\u0026quot;baseClass\u0026quot; は、ウィジェットの css クラスとして適用されるためスタイルの競合を避けることができ、スタイルを定義する際に役立ちます。\nウィジェットのプロパティ Web AppBuilder で表示しているマップには map プロパティを使用してアクセスします。\n使用例：\n Widget.js：  this.mapIdNode.innerHTML = 'マップのID：' + this.map.id;   Widget.html：  \u0026lt;div data-dojo-attach-point=\u0026quot;mapIdNode\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  その他に利用可能なプロパティは以下です。\n id label icon uri position config（config.json のオブジェクト） appConfig（アプリの構成ファイルのオブジェクト） folderUrl state（ウィジェットの状態：\u0026quot;opened\u0026quot;、\u0026quot;closed\u0026quot; または \u0026quot;active\u0026quot;） windowState（ウィジェット ウィンドウの状態：\u0026quot;normal\u0026quot;、\u0026quot;minimized\u0026quot; または \u0026quot;maximized\u0026quot;） started（ウィジェットの起動状態） name baseClass templateString  ウィジェットのメソッド ウィジェットは、読み込みやウィジェットの開閉などのイベントの発生で実行されるメソッドが定義されています（ウィジェット ライフサイクル）。このメソッド内に処理を追加することで、ウィジェットをカスタマイズしていきます。\n例えば、ウィジェットが開かれた時に処理を実行するには onOpen メソッドを使用します。\n使用例：\nonOpen: function() { var map = this.map; // ... }  その他に利用可能なメソッドは以下です。\n onOpen onClose onNormalize onMinimize onMaximize onActive onDeActive onSignIn onSignOut onPositionChange  利用可能な Dojo のウィジェット Web AppBuilder では Dojo Toolkit が提供しているウィジェット（dijit）を使用することができます。\nさらに、Web AppBuilder 独自のウィジェット（jimu.js/dijit）も提供されています。\nヘルプに使用方法は記載されていませんが、Web AppBuilder に含まれている以下のウィジェットも使用できます。\n CheckBox RadioBtn DrawBox ColorPicker Popup ImageChooser TabContainer ExtentChooser Message LayerFieldChooser PopupConfig SymbolChooser  nls ウィジェットで表示されるメニューを多言語化する場合に使用します。ウィジェット名をローカライズした方法と同様の手順でローカライズできます。\nウィジェットの更新 Web AppBuilder に追加する場合 \u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\client\\stemapp\\widgets にフォルダーを配置します。ウィジェットの構成用ファイルを更新した場合は、ブラウザーで Web AppBuilder を更新することで、更新内容が Web AppBuilder に反映されます。\n※ 更新前に作成したアプリケーションには更新内容は反映されません。新たに設置したカスタム ウィジェットを利用したい場合は、新たにアプリケーションを作成する必要があります。\nダウンロードした Webアプリケーションに追加する場合 ダウンロードしたアプリケーションの widgets フォルダーの直下にカスタム ウィジェットのフォルダーを配置し、アプリケーションのルート フォルダーにある config.json の widgetOnScreen（マップ上に表示）または widgetPool（ツールバー上に表示）セクションの widgets 属性にウィジェットの参照先等を設定します。\nwidgetPool にウィジェットを追加する例：\n{ \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;ウィジェット名\u0026gt;\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;\u0026lt;アプリで表示する名前\u0026gt;\u0026quot;, \u0026quot;uri\u0026quot;: \u0026quot;widgets/\u0026lt;ウィジェット名\u0026gt;/Widget\u0026quot; }  ウィジェット開発時の Tips Web AppBuilder では新規にアプリケーションを作成するときに、\u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\client\\stemapp\\widgets フォルダーに配置されたウィジェットが読み込まれます。作成済みの既存アプリケーションには、ウィジェットの更新内容は反映されないため、ウィジェットを更新する度に新規にアプリケーションを作成する作業が発生してしまい、非常に面倒です。\n開発段階でウィジェットの更新や動作確認を行うには、以下の手順が便利です。\n Web AppBuilder で新規にアプリケーションを作成します。 \u0026lt;Web AppBuilder のインストール ディレクトリ\u0026gt;\\server\\apps フォルダーを開きます。このフォルダーには Web AppBuilder で作成したアプリケーションが配置されています。\nフォルダー名にはアプリケーションの作成順に数字が割り当てられます。\n 手順1で作成したアプリケーションのフォルダーを開き、ウィジェットの構成ファイルを更新します。アプリケーション名は、各アプリケーションのルート フォルダーにある config.json ファイルに記載された JSON の title 属性で確認できます。\n Web AppBuilder で該当するアプリケーションを開きます。既に開いている場合はブラウザーを更新します。  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/visualization/data-visualization-procedure/",
	"title": "データ可視化の手順",
	"tags": [],
	"description": "ArcGIS Online 上のデータを可視化するための方法を紹介します。",
	"content": " ArcGIS Online 上のデータを可視化するための方法  マップを作成したい シンボルを変更したい ラベルを変更したい  マップを作成したい マップ ビューアー → [追加] → [保存]\n緯度経度の情報を持ったCSV ファイルなどを、レイヤーとしてマップに追加し、様々なレイヤーを組み合わせてマップを作成することができます。マップの保存には、コンテンツを作成する権限が必要です（権限を持っていない場合でもマップは作成できますが、保存することはできません）。\n マップ ビューアーを開きます。マップ ビューアーを開いた時点でベースとなる背景地図(ベースマップ)は自動的に表示されます。\n [追加] をクリックします。\n [レイヤーの検索]、[Living Atlas レイヤーの参照]、[Web からレイヤーを追加]、[ファイルからレイヤーを追加]、[マップ メモの追加] いずれかのレイヤーの追加方法を選択します。\n  それぞれのレイヤー追加方法は、以下の通りです。\nレイヤーの検索  [検索] ボックスにキーワードを入力し、[検索] をクリックします。 [検索先] ドロップダウン リストでは、検索する場所を限定することができ、また、[マップ エリア内] のチェックボックスをオンにすると、マップ ビューアーの表示範囲にあるレイヤーを検索することができます。 検索結果は下部のボックス内に表示され、レイヤー名の右にある [追加] をクリックするか❶、レイヤー名をクリックしたのちに❷、[マップに追加] ❸をクリックします。\n [レイヤーの追加を完了] をクリックし、レイヤーの追加を終了します。\n  Living Atlas レイヤーの参照 米国 Esri 社やほかのユーザーが提供する高品質マップ レイヤーをマップに追加します。レイヤーの詳細は、アイテム説明で確認できます。レイヤーによっては、組織向けアカウントでのサイン インが必要であったり、クレジットを消費するものがあります。\nWeb からレイヤーの追加 URL を指定して、ArcGIS Server Web サービス、OGC WMS Web サービス、OGC WMTS Web サービス、Web サーバー上にあるタイル レイヤー、KML ファイル、GeoRSS ファイル、および CSV ファイルのレイヤーを追加することができます。\nファイルからレイヤーを追加  [ファイルを選択] をクリックして、コンピューター上のファイル（区切りテキスト ファイル（*.csv または .txt）、GPS Exchange Format（.gpx）ファイル、またはシェープファイル（*.zip に圧縮済み））を選択します。\nこの方法で追加できるレイヤーのフィーチャ数の上限は、1,000フィーチャです。 1,000フィーチャ以上のデータを持つファイルを追加する場合、[マイ コンテンツ] ページの [アイテムの追加] で行う方法があります。  [レイヤーのインポート] をクリックします。\n [CSV レイヤーの追加] ダイアログが表示された場合は、緯度/経度あるいは住所の情報を含んでいるフィールドを選択します。[レイヤーの追加] をクリックして、レイヤーの追加を終了します。\n  マップ メモの追加  [マップ メモの追加] ダイアログで、[名前] フィールドでレイヤー名を、[テンプレート] ドロップダウン リストから任意のマップ メモのテンプレートを選択します。\n [マップ メモの追加] ダイアログで、名前を入力し、テンプレートをドロップダウン リストから選択して、[作成] をクリックします。\n フィーチャの追加パネルが表示されるので、マップに追加するシンボルを選択します。\n マップの任意の位置をクリックすると、その位置にシンボルが表示されると同時にポップアップが開き、タイトルや説明などを入力することができます。\n コンテンツ パネルでレイヤーが追加されたことを確認し、追加されたレイヤー名にマウス オンするかレイヤー名をクリックし、から [レイヤーの保存] をクリックします。\n [アイテムの作成] ダイアログでレイヤーのタイトル、タグ、サマリー（説明）を入力し、保存するフォルダーを選択して [アイテムの作成] をクリックします。\nタグを入力して、Enter キーを押すと、入力文字を確定できます。  マップを保存するために、[保存] → [保存] をクリックします。\nマップの保存では、マップ ビューアー上で参照しているレイヤーやその表示設定などが保存されます。 マップ上で設定したレイヤーのシンボルなどは、レイヤー自体には保存されないため、他のマップでそのレイヤーを追加したときには、 再度、シンボルの設定等を行う必要があります。  タイトル、タグ、サマリー（説明）を入力し、保存するフォルダーを選択し、[マップの保存] をクリックします。\n [マイ コンテンツ] ページに移動し、マップが のような地図のアイコンで保存されていることを確認できます。\n緯度経度、または住所情報を含むテキスト ファイル（ *.txt、 *.csv）であれば、マップ表示エリアにファイルをドラッグ \u0026amp; ドロップすることで、ポイント フィーチャ レイヤーとしてマップに追加できます。フィールドはカンマ、セミコロン、またはタブで区切る必要があり、その他の区切り文字はサポートされていません。また、緯度経度は、10進度である必要があります。Google Chrome、Mozilla Firefox、Internet Explorer 10以降で利用可能です。\n 日本語を含むテキストファイルを使用するためには、Windows の「メモ帳」でファイルを開き、[ファイル] メニュー → [名前を付けて保存] をクリックし、[名前を付けて保存] ダイアログの下部に表示される [文字コード] ドロップダウン リストから [UTF-8] を指定して [保存] ボタンをクリックします。  保存したファイルを、マップ ビューアー上にドラッグ \u0026amp; ドロップします。  [CSV レイヤーの追加] 画面が表示されます。住所が入力されている場合は、[使用しているフィーチャの特定] では [住所] を指定し、[国] ドロップダウン リストから 「日本」 を選択します。 住所が入力されているフィールド名をクリックし、[場所フィールド] で [住所/大字町丁目以降] を選択します。 [レイヤーの追加] ボタンをクリックします。   シンボルを変更したい マップ ビューアー → [詳細] → [コンテンツ] → レイヤー名にマウス オン / クリック → [スタイルの変更]\nシンボルの色や形を変更します。コンテンツを作成する権限を持っている場合に可能です。\n マップ ビューアーの [詳細] が選択されていることを確認し、[コンテンツ] をクリックします。\n シンボルを変更したいレイヤー名にマウス オン / クリックし、[スタイルの変更] のアイコンをクリックします。\n [スタイルの変更] パネルが表示されます。\n [①表示する属性を選択] ドロップダウン リストから、シンボルの設定をする属性フィールドを選択します。 属性値でシンボル設定をしない場合は、[場所のみ表示] を選択します。\n [②描画スタイルの選択] で、変更したい描画方法の [選択] をクリックします。既に選択されている描画スタイルは [オプション] と表示されます。\n一種類の属性フィールドによるシンボル設定 場所（単一シンボル） すべてのフィーチャを同じシンボルで表現します。\n種類 (個別値シンボル) 樹木の種類、道路クラス、都道府県名など、属性のカテゴリごとにシンボルを割り当てて描画します。\n数と量（サイズ） 数値またはランク付けされたデータをシンボルの大きさで表現します。データの数値が大きいほど、シンボルの大きさも大きく表示されます。\n数と量（色） 数値またはランク付けされたデータを色の濃淡で表現します。データの数値が大きいほど濃い色で、小さいほど淡い色で表示することなどができます。\nヒート マップ ポイントが集中しているエリアを一目で確認できるような表現ができます。\n日付データによるシンボル設定 属性フィールドに日付データを含むフィールドを選択すると、時系列データのスタイルの変更が提示されます。\n連続タイムライン（サイズ） 日付データをシンボルの大きさで表現します。新しい日付から古い日付をシンボルの大きさで表示することができます。\n連続タイムライン（色） 日付データを色の濃淡で表現します。新しい日付から古い日付を濃い色から薄い色で表示することなどができます。また、特定の日付の前後で色を変えることもできます。\n期間（サイズ） 設定した開始と終了日の期間の長さをシンボルの大きさで表現します。期間が長いほどシンボルの大きさも大きく表示されます。\n期間（色） 設定した開始と終了日の期間の長さを色の濃淡で表現します。期間の長さを濃淡で表現したり、所定日の前後で色を変える設定ができます。\n※レイヤーが持つ属性フィールドのタイプに応じて選択できる種類が異なります。例えば、文字列型のフィールドのみで構成されるレイヤーでは、[種類] ドロップダウン リストでサイズや色の指定はできません。\n [オプション] をクリックすると、シンボルの詳細な設定をすることができます。\n  場所（単一シンボル）の場合 [シンボル] をクリックし、形状や大きさ、塗りつぶし色、アウトラインの設定などを行います。\n種類（個別値シンボル）の場合 - ❶ 各シンボルの形状や大きさ、塗りつぶし色、アウトラインの設定などを行うことができます。\n- ❷ 凡例で表示するラベル名を直接入力して変更することができます。\n- ❸ ドラッグし、目的の位置でドロップすることで、各シンボルの順序を変更できます。\n- ❹ チェックボックスをオンにすると、シンボルが設定されている値以外の図形（例えば、属性値が入力されていない図形）が「その他」として表示されます。\n※個別値が11種類以上ある場合は、一部のデータが「その他」にグループ化されます。ラベル欄の「その他」の右にある をクリックすると、一括してグループ化を解除できます。また、「その他」の中にはグループ化された個別値が表示され、各個別値の をクリックすることで、個々にグループから除外することもできます。\n数と量（サイズ）の場合 - ❺ スライダーの上部、下部のバーを動かして、最大 / 最小クラスの閾値を変更できます。また、数値をクリックして、直接入力することもできます。\n- ❻ ポイントのシンボルを変更できます。\n- ❼ 最小/最大クラスのポイントのサイズを変更できます。\n- ❽ チェックボックスをオンにすると、クラスの分類数や分類方法、各クラスの閾値を設定することができます。各クラスの閾値は、スライダーを動かして変更するか、クラスの閾値の数値をクリックして、直接、入力することもできます❾。\n数と量（色）の場合 - ❿ スライダーの上部、下部のバーを動かして、最小/ 最大クラスの閾値を変更できます。また、数値をクリックして、直接入力することもできます。\n- ⓫ ここをクリックすることで、色のパターンなどを変更できます。\n- ⓬ チェックボックスをオンにすると、クラスの分類数や分類方法、各クラスの閾値を設定することができます。設定方法は「数と量（サイズ）（16ページ）」をご参照ください。\nヒートマップの場合 - ⓭ スライダーの上部、下部のバーを動かして、密集度の高いエリアや低いエリアを変更できます。\n- ⓮ 色のパターンを選択できます。\n- ⓯ スライダーを左右に動かして、影響範囲を変更できます。\n二種類の属性フィールドによるシンボル設定  各パネルにおいて [OK] をクリックし、[完了] をクリックします。 一つ目の属性フィールドを選択すると表示される、[属性の追加] をクリックします。\n※数値型および文字列型のフィールド タイプを持つレイヤーに対してのみ、 [属性の追加] が表示されます。ここで、二つ目の属性フィールドを選択します。（一つ目に選択する属性フィールドを A、二つ目に選択する属性フィールドは B とします。）  [②描画スタイルの選択] で、変更したい描画方法の [選択] をクリックします。既に選択されている描画スタイルは [オプション] と表示されます。\n色とサイズ Ａの属性は、色の濃淡で数値を表現し、Bの属性に対してはシンボルのサイズで数値を表現します。 選択した属性フィールドが日付型の場合は、時系列表示のシンボル設定がおこなえます。\n色 (期間) とサイズ A の属性は、期間を色の濃淡で表現し、B の属性に対しては日付の新旧をシンボルのサイズで表現します。\n色とサイズ (期間) A の属性は、日付の新旧をシンボルのサイズで表現し、B の属性に対しては期間を色の濃淡で表現します。\nA を B と比較 Bの属性に対し、Ａの属性の比率や割合を表現します。また、二つの属性の合計に対するAの属性の割合を表示します。\nタイプとサイズ 一意のシンボル（個別値）をサイズで表現します。A、B どちらかが文字列型の属性である場合は、文字列型の属性の方に個別値シンボルが自動的に適用され、他方の属性にサイズが適用されます。 選択した属性フィールドが日付型の場合は、時系列表示のシンボル設定がおこなえます。\nタイプとサイズ (期間) 一意のシンボル（個別値）ごとに期間の長さをシンボルの大きさで表現します。 A、B どちらかが文字列型の属性である場合は、その属性の方に個別値シンボルが自動的に適用され、日付型の属性にサイズが適用されます。\n主要カテゴリ 複数の属性フィールドの値を比較して、一番高い値を持つ属性フィールドに設定した色を表示します。同時に、他の値と比べてどれほど優位かを透過で表現します。\n主要カテゴリおよびサイズ 上記の「主要カテゴリ」に加え、複数の属性値の合計を円の大きさで表します。\n [オプション] をクリックすると、シンボルの詳細な設定をすることができます。\n 設定後、各パネルにおいて [OK] をクリックし、[完了] をクリックします。\n※独自のシンボルを表示したい場合は、シンボルとして表示させたい画像をあらかじめWeb 上にアップロードしておき、[スタイルの変更] パネル → [場所（単一シンボル）] あるいは [種類（個別値シンボル）] → [選択] → [オプション] で、シンボルをクリックし、[画像の使用] をクリックします。参照する URL をボックス内に入力し、プラスマークをクリックすると、独自のシンボルとして利用することができます。   ラベルを変更したい マップ ビューアー → [詳細] → [コンテンツ] → レイヤー名にマウス オン / クリック → [その他のオプション] → [ラベルの作成]\nマップ上のフィーチャに簡単にテキストを追加することができます。ラベルのテキスト文字列はフィーチャの属性情報を利用して設定することができます。コンテンツを作成する権限を持っている必要があります。\n マップ ビューアーの [詳細] が選択されていることを確認し、[コンテンツ] をクリックします。\n ラベルを変更したいレイヤー名にマウス オン / クリックし、[その他のオプション] から [ラベルの作成] を選択します。\n [ラベル フィーチャ] パネルが表示されます。[ラベル フィーチャ] チェックボックスをオンにして、ラベルを表示します❶。\n [テキスト] フィールドに、ラベルとして表示したい属性を持つフィールドを入力します。複数の属性を表示したい場合は、右の ボタンで任意のフィールドを追加することができます❷。｛｝(中かっこ)でフィールド名を囲むと各フィーチャの属性が表示されます。\n テキストのサイズ、太字、斜体、アンダーライン、色を変更することができます❸。\n [整列] で、ラベル配置を指定します❹。\n [OK] をクリックし、ラベルの設定を終了します。\n ラベルの設定をした状態でレイヤーを保存することで、他のマップでもラベルが設定された状態でレイヤーを利用することができます。そのためには、レイヤー名にマウス オン / クリックし、[その他のオプション] から [レイヤーの保存] を選択します。\n  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/javascript/choose-3.x-and-4.x/",
	"title": "バージョン 4.x と 3.x の選択",
	"tags": [],
	"description": "3.x と 4.x で提供されている機能の比較表です。",
	"content": "バージョン 4.x の API は、新しい機能（例えば、3D サポート、マップの回転、ポータル連携の強化等）が追加されています。しかし、バージョン 4.x に、バージョン 3.x の全ての機能が含まれているわけではありません。今後のリリースでは、バージョン 3.x と同等の機能、また、3.x を上回る多くの機能が追加されます。開発者はアプリケーションの要件を考慮して、必要な機能が現在のバージョン 4.x もしくは 3.x に実装されているかどうかを判断する必要があります。\nまた、バージョン 4.x もしくは 3.x で開発を行うか判断する際は、3.x のロードマップと技術サポートに関する FAQ も併せて参照してください。\n アプリケーションで、3D 表示が必要な場合は、バージョン 4.x を使用してください アプリケーションで、WFS レイヤーのようなバージョン 4.x でまだ利用できない機能が必要な場合は、バージョン 3.x を使用してください     機能 3.31 4.14     3D 表示 × ○   2D 表示 ○ ○（部分的なサポート）   ベクター タイル レイヤー ○ ○   ラスター タイル レイヤー ○ ○   イメージ レイヤー ○ ○   マップ イメージ レイヤー（ダイナミック レイヤー） ○ ○   フィーチャ レイヤー ○ ○（現バージョンでは表示とクエリをサポート）   ジオメトリ エンジン ○ ○   印刷 ○ ○   ルート \u0026amp; ルート案内 ○ ○   Web マップ ○ ○（部分的なサポート）   Web シーン × ○   ポータル アイテムのレイヤーの直接参照 × ○（部分的なサポート）   編集と図形描画 ○ ○（部分的なサポート）   OGC レイヤー（WMS、WMTS、KML） ○ ○   OGC レイヤー（WFS） ○ ×（今後のバージョンで対応予定）   時系列データ ○ ○   GIS 解析ウィジェット ○ ×（今後のバージョンで対応予定）    全機能の比較は 3.x/4.x 機能比較表（英語）を参照してください。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-map/create-feature-service/",
	"title": "フィーチャサービスの作成",
	"tags": [],
	"description": "データの検索や編集が可能な地図サービス (REST API) の配信方法を紹介します。",
	"content": " 配信可能な地図サービス ArcGIS for Developers の開発者向けクラウド サービスではお手持ちの地図データや住所/緯度経度を含む CSV などのテキスト データをもとに地図（GIS）サービスを配信することが可能です。ArcGIS の地図サービスはさまざまな機能ごとに種類が分かれています。配信可能な基本的な地図サービスは以下の 2 種類です。\n フィーチャ サービス（レイヤー）\n 緯度経度および属性情報を文字列で配信（地図データはクライアントでグラフィックとして描画されます） 機能 : 表示（地図と属性）/ 検索 / 作成 / 更新 / 削除  タイル サービス（レイヤー）\n あらかじめ作成しておいたタイル状に分割された地図画像を配信（地図データはクライアントで画像として描画されます） 機能 : 表示（地図のみ）   タイル サービスとしては Esri が配信している全世界の背景地図サービスを無償で利用できます。 なお、タイル生成サービスを利用する場合は、1,000 タイル生成につき、1 クレジット消費します。 タイル サービスを公開する方法は ArcGIS Online ヘルプのホスト タイル レイヤーの公開をご覧ください。\n以下では、主題データとして利用頻度のもっとも高いフィーチャ サービスの公開および配信方法をご紹介します。\nフィーチャ サービスの作成・公開 フィーチャ サービスの公開には以下の 2 つの方法があります。\n 空のフィーチャ サービスを公開\n データがない状態のフィーチャ サービスを公開し、マップ ビューアーを使って手動でデータを追加していきます。  地図データおよび住所データを使ってフィーチャ サービスを公開\n 地図データが持つ座標情報や住所情報をもとにフィーチャ サービスを公開します。ArcGIS for Developers のサイトを使用して公開が可能なデータは以下の通りです。\n CSV GeoJSON シェープファイル（Zip 形式に圧縮） ファイル ジオデータベース（Zip 形式に圧縮）   詳細は ArcGIS Online ヘルプのホスト フィーチャ レイヤーの公開をご覧ください。\n  以下は空のフィーチャ サービスを公開するまでのステップを紹介します。\n1. フィーチャ サービスの作成を開始する  [Dashboard］の横の［＋］をクリックし、［New Layer］を選択します。 [Create an Empty Layer］をクリックし、Create New Layer ページを開きます。  2. 基本情報の入力 公開するフィーチャ サービスに対して、以下の基本情報を入力します。\n Title（タイトル）\n 新しく作成するフィーチャ サービスのタイトルを入力します。  Service Name（サービス名）\n アプリケーションがデータにアクセスする際に使用します。デフォルトでは自動で Title と同じ文字が入力されますが、変更することも可能です。サービス名に使用できる文字はアルファベット、数字およびアンダースコアのみです。  Tags（タグ）\n ArcGIS for Developers のサイト上でフィーチャ サービスを検索する際に利用します。作成するフィーチャー サービスのキーワードとなる語句を入力し、Enter キー を押すとタグが作成されます。   入力が完了したら、[Geometry] をクリックして次へ進みます。\n Geometry Type（ジオメトリ タイプ）\n ジオメトリ タイプはフィーチャの図形の種類で、ポイント、ライン、ポリゴンの三種類から構成されています。ポイントは地物を点のデータで表し、観測地点などを表示するために使われます。ラインは地物を線のデータで表し、河川や道路などのフィーチャを表示するために使用されます。ポリゴンは地物を面のデータで表し、建物などを表示するために使用されます。 1 つのフィーチャ サービスに対して選択できるジオメトリ タイプはいずれか 1 つです。  Spatial Reference（空間参照）\n フィーチャ レイヤーの座標系の ID（WKID）を入力します。4326（WGS 84 緯度経度）または102100（Web メルカトル）が推奨されています。   入力が完了したら、[Fields] をクリックして次へ進みます。\n3.属性情報の入力 属性とはフィーチャに関する様々な情報のことで、属性テーブルと呼ばれるデータベースに保存することができます。属性テーブルの列のことを属性フィールドと呼びます。例えば公共施設の属性には名称や所在地、分類、電話番号などを含めることができます。この属性情報をもとにシンボルやラベルを表示したり、フィーチャを検索したりすることが可能です。\n属性フィールドには以下の項目を設定します。\n Field Name（フィールド名）\n Field Name はフィールドの名前をコンピューター用に定義したものです。コンピューターが理解しやすいように使用できる文字に制限があります（スペースや特殊文字は使用できません）。  Field Alias（エイリアス）\n Field Alias は属性フィールドの名前を人間にもわかりやすく定義したものです。たとえば、人口の情報であれば Field Name を POP、Field Alias を Population と使い分けます。  Data Type（データ型）\n 格納する情報の種類によって以下の 4 つのデータ型から選択します。属性フィールドに設定されたデータ型と異なるデータ型の値を格納することはできません。\n String: 文字型。文字列を格納します。 Integer: 整数型。自然数を格納します。 Double: 倍精度浮動小数点型。小数点を持つ有理数やパーセント値などを格納します。 Date: 日付型。日付、または日付と時間を格納します。    Field Name と Field Type を入力し、[+ Add Field] をクリックすることで属性フィールドを追加できます。フィールドを追加した後に、Field Alias を設定できます。作成した属性フィールドを削除するには 赤いゴミ箱のアイコンをクリックします。入力が完了したら、[Settings] をクリックして次へ進みます。\n4.詳細設定 ファイルの添付機能やサービスの共有、編集権限などを設定できます。設定がすべて終了したら[Create Layer] をクリックし、フィーチャ サービスを公開します。\nフィーチャ サービスの表示・編集 フィーチャ サービス公開後、マップ ビューアー上でフィーチャ サービスを表示して、データを追加することができます。\n1. フィーチャ サービスの表示 公開したフィーチャ サービスを選択して、[Open in Map Viewer] をクリックして、マップ ビューアーを起動します。 マップ ビューアーが起動すると、地図が表示されます。画面左側にあるコンテンツ パネルには公開したフィーチャ サービスを参照したレイヤーが表示されています。\n2. フィーチャ サービスの編集  [編集] をクリックして、[フィーチャの追加] ウィンドウから追加するデータのシンボルを選択します。 選択後に、地図上の任意の場所をクリックすることで新しいデータが追加されます。 フィーチャを追加すると、ポップアップが自動で開き、フィーチャの属性情報を編集することが可能です。  ここまで作成してきたフィーチャ サービスは「Web マップの作成」で 1 レイヤーとして扱うことができます。自身が複数のデータをお持ちで、複数のレイヤーとして地図に表示したい場合でも、自由に追加して独自の地図をデザインすることが可能です。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-map/",
	"title": "マップの作成",
	"tags": [],
	"description": "ArcGIS をはじめて使う方向けに開発者アカウントやマップの作成方法を紹介します。",
	"content": "ArcGIS をはじめて使う方向けに開発者アカウントやマップの作成方法を紹介します。\n\r開発者アカウントの作成\rArcGIS for Developers の利用を開始するために新規アカウントを作成する手順を紹介します。\n\r\rフィーチャサービスの作成\rデータの検索や編集が可能な地図サービス (REST API) の配信方法を紹介します。\n\r\rWeb マップの作成\rさまざまなフォーマットのデータを 1 つのマップとして集約し、それを可視化する方法を紹介します。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/",
	"title": "技術 Tips 集",
	"tags": [],
	"description": "開発に役立つ技術 Tips 集です。",
	"content": " 　開発ドキュメント 各 API/SDK の開発をサポートするドキュメントです。\n ArcGIS API for JavaScript Web AppBuilder for ArcGIS (Developer Edition) ArcGIS Runtime SDK for .NET ArcGIS Runtime SDK for Android ArcGIS Runtime SDK for iOS ArcGIS API for Python  　開発ブログ記事 開発者のためのオンライン コミュニティ サイト（GeoNet）にて ArcGIS 開発製品を使った開発に役立つ Tips などをブログ記事としてお届けしています。\n JavaScript .NET Android iOS Python  　テーマ別ページ  データ ビジュアライゼーション\n地図にデータを可視化する際の tips を紹介します。\n ミートアップ\n開発者向けのイベント用に提供したページのリンクです。\n  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-app/create-startup-app-android/",
	"title": "Android",
	"tags": [],
	"description": "ArcGIS Runtime SDK for Android を用いたモバイル地図アプリの作成方法を紹介します。",
	"content": " 開発環境 ArcGIS Runtime SDK for Android は Android Strdio に対応しています。開発環境は Android Studio をご用意ください。\nまたこの後使用するサンプル アプリは ArcGIS Runtime SDK のライブラリを Android Library プロジェクトとして参照する方法を用いています。 ArcGIS Runtime SDK のライブラリをローカル環境にダウンロードしてお使いになりたい方はこちらの SDK download（英語）手順をご覧ください。\nなお、ArcGIS Runtime SDK を使用するには ArcGIS Online 開発者アカウントが必要です。作成方法は「開発者アカウントの作成」をご参照ください。\nサンプル プロジェクトのダウンロード このリポジトリ（arcgis-dev-resources）には開発を試してみたい方向けのサンプル コードが含まれています。ダウンロードする方法は 2 通りあります。\n リポジトリをご自身のアカウントに Fork（複製）\n GitHub にログインして、arcgis-dev-resources ページを開いて [Fork] をクリックすると、ご自身のアカウントに同じリポジトリが作成されます。 Fork 後はご自身のローカル マシンにクローンを作成します。  zip ファイルでダウンロード（※GitHub アカウントをお持ちでない方向け）\n  arcgis-dev-resources ページを開いて [Download ZIP] をクリックするとプロジェクト ファイル一式が手に入ります。\n地図の表示 まずはダウンロードしたサンプル プロジェクトを実行してみましょう。\n ダウンロードしたサンプル プロジェクト（arcgis-dev-resources/startup/android/100.x/map）を Android Studio で開きます。 MainActivity.java の 23 行目の \u0026lt;Web マップ ID\u0026gt; と記載されている箇所に Web マップの作成で作成した Web マップ ID を上書きします。32 行目の以下のコードでは、上で設定した Web マップ ID を含んだ WebMap の URL で ArcGISMap オブジェクトを作成します。 java mArcGISMap = new ArcGISMap(\u0026quot;http://www.arcgis.com/home/item.html?id=\u0026lt;Web マップ ID\u0026gt;\u0026quot;);  まだ Web マップを作成しておらず、すぐに試してみたい方はサンプル Web マップをご利用ください。 サンプル プロジェクトを実行すると、以下のように地図が表示されます。   Web マップを表示するには、最初に地図を表示するビュー（MapView クラス）を作成し、作成したビュー上で Web マップを開きます。\n現在位置の表示 Android の位置情報サービスと連携し、端末の現在位置を地図上に表示します。\n以下に倣ってソース コードを修正・追加してみてください。\n 現在位置の変化を受け取るための LocationChangedListener を実装します。今回はすでに実装してあるコードを有効化します。 MainActivity.java の 35 行目から 50 行目までのコメント化されたコードをコメント解除してください。（コメント解除したい範囲を選択して Ctrl + / を押下）\n// LocationListner を実装 private class MyLocationListener implements LocationDisplay.LocationChangedListener{ public MyLocationListener(){ super(); } @Override public void onLocationChanged(LocationDisplay.LocationChangedEvent locationChangedEvent) { if(locationChangedEvent == null){ return; } // 現在地を取得し、表示縮尺を設定して現在位置へズーム Viewpoint viewpoint = new Viewpoint(locationChangedEvent.getLocation().getPosition(),1000.0); mMapView.setViewpointAsync(viewpoint); } }  onCreate メソッドの 27 ～ 31 行目のコメントを解除してください。現在地を取得するためのコードを定義しています。\n// MapView 上に現在位置を表示するために LocationDisplay を取得 mLocationDisplay = mMapView.getLocationDisplay(); // LocationDisplay に LocationListner を設定 mLocationDisplay.addLocationChangedListener(new MyLocationListener()); // 現在位置の表示を開始 mLocationDisplay.startAsync();   アプリの動作が確認できたら ArcGIS の OAuth 認証について学びましょう！\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/dotnet/",
	"title": "ArcGIS Runtime SDK for .NET",
	"tags": [],
	"description": "ArcGIS Runtime SDK for .NET の開発に役立つガイド集です。",
	"content": "ArcGIS Runtime SDK for .NET の開発に役立つガイド集です。\n\rインストール ガイド\rArcGIS Runtime SDK for .NET をご使用のマシンにインストールする手順を紹介します。\n\r\rアプリケーション配布ガイド\rArcGIS Runtime SDK for .NET を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を紹介します。\n\r\rバージョン 10.2.x から 100.x への移行\r今まで ArcGIS Runtime SDK for .NET バージョン 10.2.x を使用してアプリケーションを開発されていた開発者向けのガイドです。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-map/create-webmap/",
	"title": "Web マップの作成",
	"tags": [],
	"description": "さまざまなフォーマットのデータを 1 つのマップとして集約し、それを可視化する方法を紹介します。",
	"content": " Web マップとは Web マップとは背景地図や主題となる地図データを追加し、表示方法などを設定してクラウド上に JSON 形式で保存される Web 上の地図です。Web マップの作成には ArcGIS クラウド サービスが提供する地図作成ツール（マップ ビューアー）を使用します。クラウド上に保存された Web マップを使えば、地図上に何をどのように表示するかを一つ一つコーディングする必要がなく、非常にローコストで地図アプリを作成することができます。\nWeb マップに含まれる情報は以下の JSON 仕様で確認できます。\n Web マップ仕様 (Web Map JSON)  Web マップの作成 1. Web マップの作成とレイヤーの追加 マップ ビューアーで Web マップを作成していきましょう。\n マップ ビューアーを開きます。\n 開発者アカウントでサインインします（サインインをしないと地図作成機能を利用できません）。\n インターネットで公開されている ArcGIS クラウド サービスで共有中のレイヤーを追加します。[追加] をクリック後、[レイヤーの検索] を選択します。\n レイヤーの検索を行います。検索先を「ArcGIS Online」とし、検索フォームにお好きなキーワードを入力して検索してみましょう。\n 検索結果が表示されたら、追加したいレイヤーの [追加] リンクをクリックして、[レイヤーの追加を完了] ボタンを押してレイヤーの追加は完了です。\n 画像はトイレ調査と南海トラフ巨大地震の被害想定（震度/最大クラス）のレイヤーを追加しています。   2. レイヤーの表示方法の設定  レイヤーの表示設定を変えてみましょう。レイヤー リストから表現を変更したいレイヤーを選び、[スタイルの変更] アイコンをクリックします。なお、レイヤーの種類によって設定できる項目が異なります。 レイヤーの種類はいくつかありますが、ArcGIS のクラウド サービスで配信する主なレイヤーは以下の 2 つです。フィーチャ レイヤーは Web ブラウザー上のグラフィックとして描画されるためスタイルの変更が可能です。\n タイル レイヤー：データを画像で配信 フィーチャ レイヤー：データを文字列（位置座標と属性）で配信  [表示する属性を選択] で表示に利用する属性情報を選択し、それに応じた描画スタイルを [描画スタイルの選択] から選択します。表示する属性のタイプに応じて選択できる描画スタイルは自動的に変更されます。\n 個別値シンボルの場合は、属性値ごとに表示したいシンボルを設定することができます。シンボルを設定してみましょう。\n レイヤー リスト上の透過率を設定したいレイヤー下にある [\u0026hellip;] アイコンをクリックして、メニューから [透過表示] にカーソルを合わせると、スライダ－で透過率を設定できます。 これで背景地図が見えるので場所の特定はできるようになりましたが、地震の被害想定は見たい人だけに見てほしい。そんな場合には、初期状態で非表示にしておくことができます。  非表示にしたいレイヤー左にあるチェックボックスの✔を外すと、レイヤーは非表示になります。\n  3. Web マップの保存 最後にここまで設定を行ってきた Web マップの保存を行います。保存すると Web マップには ID が割り当てられます。開発の際に、この ID を参照することで、設定を行った状態の地図をそのまま表示することができます。\n [保存] ボタンをクリックし、マップの情報を入力します。入力し終わったら、[マップの保存] ボタンをクリックして、保存は完了です。タイトル、タグの入力は必須項目です。\n 保存が完了すると、URL が自動的に変更されます。URL 末尾の ?webmap=\u0026lt;Web マップ ID\u0026gt; が Web マップの ID です。メモしておきましょう。   アプリの作成を始めましょう！お使いの開発環境からお選びください。\n JavaScript Android iOS .NET  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-app/",
	"title": "アプリの作成",
	"tags": [],
	"description": "シンプルな地図アプリの作成方法を紹介します。",
	"content": "シンプルな地図アプリの作成方法を紹介します。お使いの開発環境からお選びください。\n\rJavaScript\rArcGIS API for JavaScript を用いた Web ブラウザー向け地図アプリの作成方法を紹介します。\n\r\r.NET\rArcGIS Runtime SDK for .NET を用いたネイティブ地図アプリの作成方法を紹介します。\n\r\rAndroid\rArcGIS Runtime SDK for Android を用いたモバイル地図アプリの作成方法を紹介します。\n\r\riOS\rArcGIS Runtime SDK for iOS を用いたモバイル地図アプリの作成方法を紹介します。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-install/",
	"title": "インストール ガイド",
	"tags": [],
	"description": "ArcGIS API for Python の環境構築方法を紹介します。",
	"content": " ArcGIS API for Python (以下、Python API) を使用するための環境構築は主に 2 つあります。一つは ArcGIS Pro でインストールする方法、もう一つは Anaconda でインストールする方法です。 Python API は、arcgis という名前のパッケージで Anaconda Cloud 等で配布されています。Anaconda Cloud 上のパッケージは conda を使用してインストールやバージョン管理を行うことができます。conda の詳細については ArcGIS API for Python のための基礎環境：conda入門 を参照してください。\nPython API は ArcGIS Pro 経由でインストールするか、Anaconda 経由でインストールする方法がありますが、PATH の問題を引き起こす可能性があるため、ベストプラクティスとしては、単一のマシンに ArcGIS Pro と Anaconda の両方をインストールすることは推奨されません。\nArcGIS Pro と Anaconda の違いについては以下のブログもご参照ください。\n ArcGIS API for Python のコアコンセプト その 2：Anaconda、Conda、Jupyter Notebook、そしてArcGIS Pro  \rSTEP 1: Python API をインストールする  ArcGIS Pro でインストールする Aaconda 経由でインストールする  STEP 2: arcgis パッケージをアップグレードする  ArcGIS Pro 2.3 以上の環境の場合 ArcGIS Pro 2.2 環境の場合 Anaconda 環境の場合  STEP 3: ArcGIS API for Python を実行する  Jupyter Notebook を起動する Jupyter Notebook で地図を表示してみる  参考  1. オフライン時のインストール方法 2. Linux へのインストール  Python API をインストールする ArcGIS Pro でインストールする ArcGIS Pro では、2.1 以降のリリースから conda と arcgis パッケージが最初からインストールされています。 ArcGIS API for Python を実行するを試してみましょう。バージョンが最新でない場合はarcgis パッケージをアップグレードするを参照して Python API を更新します。\nAnaconda 経由でインストールする ArcGIS Pro をお持ちでない場合は、Anaconda をインストールします。 Anaconda は Python とデータサイエンス向けの Python パッケージなどを提供するプラットフォームです。  Python API は Python 3.5 以降を必要とするため、Anaconda ダウンロードページから、適切なバージョンをダウンロードしてください。  ※ Python API は、国内では Windows 版のサポートを提供しています。 ターミナルアプリケーション（ここでは Anaconda Prompt）を開き、次のコマンドを使用して arcgis パッケージをインストールします。\nconda install -c esri arcgis   インストールされる Python API のバージョンは基本的に最新バージョンとなりますが、古いバージョンがインストールされた場合は以下のようにバージョン番号を指定することで指定したバージョンがインストールされます。\nconda install -c esri arcgis=1.7.1  インストールが完了したら、ArcGIS API for Python を実行するを試してみましょう。\narcgis パッケージをアップグレードする ArcGIS Pro 2.3 以上の環境の場合 ArcGIS Pro 2.3 以上では Python API が最初からインストールされています。 ArcGIS Pro をインストールすると、デフォルトで \u0026ldquo;arcgispro-py3\u0026rdquo; という読み取り専用の conda 環境が作成されています。Python API を最新のバージョンに更新するには、Python パッケージ マネージャー (ArcGIS Pro の機能のひとつ) を使用して、デフォルトの環境をクローンし、クローンした環境の Python API を最新バージョンにアップグレードします。\n ArcGIS Pro を起動し、スタートアップ画面の左下にある [設定] をクリックします。 [Python]メニューオプションを選択します。 [環境の管理]ボタンをクリックし、「環境の管理」ウィンドウを開いて、[デフォルトのクローン]ボタンを選択します。  [環境の管理]ボタンと環境の[デフォルトのクローン]ボタン\n  デフォルト環境のクローンが作成されます。  [名前]の入力ボックスへ入力する ※日本語は推奨しません。半角英数で入力します。\n --  クローンの作成中は下部にインストール中のパッケージ名が表示されます。すべてのパッケージのインストールが完了すると、クローンされた環境が格納されているディレクトリ名が表示されます。※完了前に操作をすると、作成した環境が正常に動作しない可能性があります。  クローンの作成中の様子\n  作成した環境のラジオボタンをクリックして、環境をアクティブにします。  環境をアクティベート\n  環境の管理ダイアログを閉じ、ArcGIS Pro を閉じます Python コマンドプロンプトを開きます。\nスタートメニュー\u0026gt;すべてのプログラム\u0026gt; ArcGIS\u0026gt; Python コマンドプロンプトで開くことができます。 次のコマンドを入力します。  conda upgrade -c esri arcgis  コマンドの入力\n  インストール、アップグレードするパッケージの名前とバージョン番号が表示されるので、問題がなければ y を入力し、実行します。 ArcGIS Pro のバージョンによっては、最新の Python API のバージョンが表示されない場合があります。その場合、一度 n を入力・実行し、以下のコマンドを再入力してください。  conda upgrade -c esri arcgis --no-pin  ArcGIS Pro のバージョンによってはデフォルトの設定で、アップグレードできる Python API のバージョンの上限が指定がされています。 conda upgrade -c esri --no-pin arcgis のうち、--no-pin がバージョンの指定を外して最新版までアップグレードするためのオプションです。 ただし、デフォルトの設定が変更されるわけではないため、アップグレード後に他のパッケージをインストールしようとすると、設定された上限のバージョンにダウングレードするように conda で計画されます。 その場合、そのパッケージをインストールした後に再度上記のコマンドを入力し arcgis パッケージをアップグレードしてください。 *以下の操作はデフォルトで想定されているパッケージ管理の制御を変更するため、必ず事前に環境を複製しておく等、適切なバックアップの処置をしてください。*  *また、以下操作の実行による不具合等はサポートの対象としかねますので、ご承知おきください。*  永続的に設定を変更するには conda 環境の中の pinned ファイルを書き換える必要があります。   C:\\Users\\ (ユーザー名) \\AppData\\Local\\ESRI\\conda\\envs\\ (複製した環境名) \\conda-meta\\pinned  上記ファイルをテキストエディタで開くと、`arcgis 1.5.*` と記載されているので、数字部分を `2` など、アップグレードしたいバージョン以上の数字に書き換え保存します。  他の記載されているパッケージの設定を変更すると、予期しない不具合を招く恐れがありますので注意してください。 --\n\rインストールされるパッケージの確認\n  アップグレードしたバージョンを確認するには、次のコマンドを入力します。  conda list arcgis   Python API を含む ArcGIS 関連のパッケージとそのバージョン番号が表示されます。  \n アップデートが完了したら、ArcGIS API for Python を実行するを試してみましょう。\nArcGIS Pro 2.2 環境の場合 ArcGIS Pro 2.2 には ArcGIS API for Python 1.4.1 がインストールされています。 ArcGIS Pro をインストールすると、デフォルトで \u0026ldquo;arcgispro-py3\u0026rdquo; という読み取り専用の conda 環境が作成されています。Python API を最新のバージョンに更新するには、Python パッケージ マネージャー (ArcGIS Pro の機能のひとつ) を使用して、デフォルトの環境をクローンし、クローンした環境の Python API を最新バージョンにアップグレードします。\n 新しい空のプロジェクトで ArcGIS Pro を開きます。 [プロジェクト]タブを選択して、ArcGIS Pro の詳細オプションを表示します。（下記のスクリーンショットを参照） [Python]メニューオプションを選択します。 [環境の管理]ボタンをクリックしウィンドウを開いて、[新規作成]ボタンを選択します。\n  [環境の管理]ボタンと環境の[新規作成ボタン]\n  新しい環境の名前を入力して[保存]を選択します。  [名前]の入力ボックスへ入力する ※日本語は推奨しません。半角英数で入力します。\n  ダイアログの下部にある青色の進行状況バーが消えたら完了です。この表示が完了してから、次の操作に進んでください。※完了前の操作は正しい環境が作成・動作しない可能性があります。  青色の進行状況バー\n  作成した環境のラジオボタンを選択して、環境をアクティブにします。ここでの操作は、Anacondaで仮想環境をアクティベートする操作に値します。  仮想環境を指定する\n  環境の管理ダイアログを閉じ、ArcGIS Pro を閉じます Python コマンドプロンプトを開きますまたはスタートメニュー\u0026gt;すべてのプログラム\u0026gt; ArcGIS\u0026gt; Python コマンドプロンプトで開きます。 次のコマンドを入力します。  conda upgrade -c esri arcgis  コマンドの入力\n  「Proceed([y]/n)?」 の表示は y を入力して実行します。  インストールするパッケージ計画が表示され、この計画でよい場合は\"y\"を選択します\n  アップグレードしたバージョンを確認するには次のコマンドを入力します。  conda list arcgis  Python API を含む ArcGIS 関連のパッケージとそのバージョン番号が表示できます\n アップデートが完了したら、ArcGIS API for Python を実行するを試してみましょう。\nAnaconda 環境の場合 Anaconda Prompt のようなターミナルアプリケーションを開き、次のコマンドを使用して arcgis を実行してアップグレードします。\nconda upgrade -c esri arcgis  インストールするパッケージの計画が表示されるので、y を選択し、アップグレードします。\nアップデートが完了したら、ArcGIS API for Python を実行するを試してみましょう。\nArcGIS API for Python を実行する Jupyter Notebook を起動する  Pythonコマンドプロンプト (ArcGIS Pro でインストールした場合)、もしくは Anaconda Prompt (Anaconda でインストールした場合) を起動します。 cd コマンドを使用して、ノートブックがあるディレクトリ、またはノートブックを作成したいディレクトリに移動します。 次のように入力して Jupyter Notebook を起動します。  jupyter notebook   起動しなかった場合は、以下を試してください。  jupyter-notebook  または、スタートメニュー\u0026gt;すべてのプログラム\u0026gt; ArcGIS\u0026gt;Jupyter Notebook を選択しても起動することができます。\nJupyter Notebook の詳しい操作は Jupyter Notebook を使ってみようもご覧ください。 Python API バージョン 1.5.0 以降からは、Jupyter Lab からも操作が可能です。Jupyter Lab を使ってみようも是非ご覧ください。\nJupyter Notebook で地図を表示してみる 次の手順で、地図を表示するための新しいノートブックを作成します。 * Click New \u0026gt; Python 3 Python[default] --\n 次のコードを入力します。\nfrom arcgis.gis import GIS my_gis = GIS() my_gis.map()   Jupyter Notebook から使用している Python API のバージョンを確認する場合、次のコードを実行することで、現在お使いのバージョンを確認することができます。\nimport arcgis arcgis.__version__  もしくは、先頭に ! を付けて以下のようにコマンドを実行して確認することも可能です。\n!conda list arcgis  \r参考 1. オフライン時のインストール方法 インターネットに接続していない環境の場合、次の手順で Python API のインストールが可能です。\nただし、この場合、すべての依存パッケージがインストールされるわけではないため、Jupyter Notebook の利用など、一部の機能が制限される可能性があります (※ 組織やコンテンツの管理など特定のタスクは以下手順でインストールする six パッケージのみで可能です。)\n依存パッケージについては米国Esri 社のガイドページ：System requirements を参照ください。\nインターネットに接続できる環境で以下の必要なソフトウェアをダウンロードします。  最新の Python 3.x 用の Anaconda 適切なバージョンの Python API のファイル  Anaconda クラウドの Esri のチャネルからダウンロード可能です。 ファイル名は以下のパターンに従います  OS/arcgis-x.x.x-pyZZyyyyyyy-y.tar.bz2.  OS: 使用するマシンの OS x.x.x: API のバージョン ZZ: 使用する Python のバージョン yyyyyyy-y: チャネルにアップロードされた conda のパッケージに付与されるハッシュ ナンバー   例えば、Windows 64 bit のマシンで、Python API 1.6.0 の Python 3.7 版をダウンロードする場合は、\u0026rdquo;win-64/arcgis-1.6.0-py37h62639d4_1.tar.bz2\u0026rdquo; をクリックしてダウンロードします。    オフライン環境で Anaconda を設定  Anaconda をインストールします。 次のコマンドでオフライン モードに設定します。  conda config --set offline True   次のコマンドで新しい環境を作成します。  conda create -n \u0026lt;環境名\u0026gt; python six   環境をアクティベートします。  conda activate \u0026lt;環境名\u0026gt;   ArcGIS API for Python をインストールします。  conda install \u0026lt;事前にダウンロードしたファイルのパス\u0026gt;  \u0026ldquo;done\u0026rdquo;が表示されればインストール完了です。\nより詳しい情報は 米国Esri ガイドページ：Install-Offline をご覧ください。\n\n2. Linux へのインストール ArcGIS API for Python は Linux マシンにもインストールすることができます。\nここでは、例として Ubuntu Server にインストールする手順をご紹介します。\n現在国内では ArcGIS API for Python の Linux での利用は未サポートです。ご利用そのものを妨げるものではありませんが、利用される際は ESRIジャパンの提供するサポート サービス等の対象とならない可能性がある点に留意してください。\n\rAnaconda をインストール Linux では ArcGIS Pro を利用できないため、Anaconda から ArcGIS API for Python をインストールします。\n Linux 版の Anaconda の ダウンロード URL を確認し、wget でファイルをダウンロードします  ここでは Anaconda 2019.10 for Linux をダウンロードします。   wget https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh    ダウンロードしたインストーラーを以下のコマンドで実行します。  sh Anaconda3-2019.10-Linux-x86_64.sh    インストールするディレクトリは任意のディレクトリを選ぶことができます。ここではデフォルトの設定である、ログイン ユーザーのホーム ディレクトリにインストールすることにします。 \n 最後に PATH を通すか確認されます。ここでは Anaconda のドキュメントに従い、yes として進めます。 \n  変更を反映させるためには一度 シェル を閉じて再度開く必要があります。\n\rarcgis パッケージをインストール ArcGIS API for Python (arcgis) をインストールします。\nAnaconda の base 環境にインストールしてもよいですが、ここでは conda で新しい環境を作成してインストールします。\n 新しい Python 環境を作成  以下のコマンドで新しい Python 環境を作成します。 \u0026lt;環境名\u0026gt; には識別しやすい任意の環境名を指定します。また、ここではインストールする Python のバージョンとして 3.7 を指定しています。   conda create -n \u0026lt;環境名\u0026gt; python=3.7   作成した環境をアクティベート  以下のコマンドで作成した環境に切り替えます   conda activate \u0026lt;環境名\u0026gt;   ArcGIS API for Python をインストール  以下のコマンドで ArcGIS API for Python をインストールします。 以下では ArcGIS API for Python 1.7.1 をインストールするよう指定しています。   conda install -c esri arcgis=1.7.1   インストールの確認  インストールが終了したら以下のコマンドで正常にインストールされているか確認しましょう。 正常にインストールされていれば、arcgis というパッケージ名とインストールしたバージョン番号が表示されます。   conda list arcgis   ESRIジャパンが運営する GIS アプリ開発者のためのコミュニティ グループ では、Python API の機能や実際のコードをブログでご紹介しています。 また、GitHub にも日本語による解説付きのコードを公開していますので、是非ご参照ください。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/webappbuilder/deploy-pattern/",
	"title": "デプロイ パターン",
	"tags": [],
	"description": "Web AppBuilder for ArcGIS (Developer Edition) で作成したアプリやウィジェットのデプロイ パターンを紹介します。",
	"content": " トピック  概要 Web アプリケーションをデプロイ ウィジェットをデプロイ テンプレートをデプロイ  概要 Web AppBuilder for ArcGIS (Developer Edition) (以下 Developer Edition) では Web AppBuilder for ArcGIS を拡張して、独自の Web アプリケーションやウィジェット、テンプレートを作成することが可能です。エンド ユーザーの利用形態や要件により最適なデプロイは異なりますが、このページでは以下の 3 つの主要なデプロイ パターンと、それぞれのデプロイ方法についてご紹介します。\nWeb アプリケーションをデプロイ 全体像  Web アプリケーションを作成し、独自のサーバーでホストすることができます。特定の業務で継続的に利用されるアプリ等、ユーザーによる設定変更が不要な場合や、ユーザーに設定変更をさせたくない場合等に活用できます。   必要なコンポーネント  開発時  Node.js Developer Edition  運用時  ArcGIS Enterprise または ArcGIS Online Web サーバー (ArcGIS Enterprise の Web サーバーと併用も可)   手順概要 以下は Web アプリケーション作成から、デプロイ、実際の運用までの流れの概要です。\n カスタム ウィジェットを含む web アプリケーションを作成  Developer Edition を用いたウィジェットの開発や web アプリケーションの作成には Node.jsが必要です。 詳しくはインストールガイドをご覧下さい。 カスタム ウィジェットを開発する際は、カスタム ウィジェット開発ガイドをご覧ください。  作成した web アプリケーションを自身で用意した Web サーバーに配置  ArcGIS Enterprise で使用している Web サーバーと併用することも可能です。 ※ ArcGIS Online を使用してホストすることはできません。 詳しくは、アプリケーションのデプロイをご覧ください。  ユーザーが作成された web アプリケーションを利用  ユーザーが web アプリケーションにアクセスして利用します。 ArcGIS Enterprise や ArcGIS Online のポータルにアイテムとして表示させたい場合はアプリの URL をアイテムに登録する必要があります。  詳細は「アプリの追加」及びその後の「アプリの登録」をご覧ください。  内部的には、アプリは ArcGIS Online もしくは ArcGIS Enterprise の Web マップを参照してアプリ上に地図を表示します。   ウィジェットをデプロイ  WebApp Builder で使用できるウィジェットのみを開発し、独自のサーバーでホストすることも可能です。ユーザーが ArcGIS Online や ArcGIS Enterprise を使用して独自に web アプリケーションを作成することを想定しているものの、デフォルトの Web AppBuilder for ArcGIS のウィジェットには無い機能を拡張したい場合に活用できます。   必要なコンポーネント  開発時  Node.js Developer Edition  運用時  ArcGIS Enterprise Web サーバー (ArcGIS Enterprise の Web サーバーと併用も可)   手順概要 以下はカスタムウィジェットの作成から、デプロイ、実際の運用までの流れの概要です。\n カスタムウィジェットを作成  Developer Edition を用いたウィジェットの作成には Node.jsが必要です。 詳しくはインストールガイドをご覧下さい。 カスタムウィジェット開発の詳細については、カスタム ウィジェット開発ガイドをご覧下さい。  作成したカスタムウィジェットを自身で用意した Web サーバーに配置  ArcGIS Enterprise で使用している Web サーバーと併用することも可能です。 ※ ウィジェットを配置するサーバーが自己署名証明書を使用している場合、Portal for ArcGIS に証明書をインポートする必要があります。詳しい方法はポータルへの証明書のインポートをご覧ください。 Web サーバーに配置後、ArcGIS Enterprise に組み込まれている Web AppBuilder for ArcGIS にカスタムウィジェットを追加します。  詳しくは、カスタム ウィジェットの追加をご覧ください。 ※ ArcGIS Online に追加することはできません。   ウィジェットを使った web アプリケーションの作成・利用  ユーザーが ArcGIS Enterprise に組み込まれている Web AppBuilder for ArcGIS を利用してカスタムウィジェットを使用した web アプリケーションを作成・利用します。 内部的には、アプリは Web サーバーでホストされているカスタムウィジェットを参照して動作します。   テンプレートをデプロイ  Esri が用意している web アプリケーションのテンプレートとは別に、Developer Edition で作成した web アプリケーションをベースに独自のテンプレートを作成できます。テンプレートを用いることで、ユーザー自身がマップや簡易な設定の変更のみで web アプリケーションを作成することができるようになります。テンプレートを作成しておくと、必要な機能が共通している複数の業務に対して、異なるマップや設定を適用するだけですぐ各業務向けのアプリを作成できます。 ここでご紹介する方法では開発環境と運用環境が同じである点にご注意ください。   必要なコンポーネント  開発時  Node.js Developer Edition  運用時  Node.js Developer Edition ArcGIS Online または ArcGIS Enterprise   手順概要 以下はテンプレートの作成から、デプロイ、実際の運用までの流れの概要です。\n カスタムウィジェットを含む web アプリケーションを作成  Developer Edition を用いたウィジェットの作成には Node.jsが必要です。 詳しくはインストールガイドをご覧下さい。 カスタム ウィジェットを開発する際は、カスタム ウィジェット開発ガイドをご覧ください。  web アプリケーションをテンプレートとして保存 (登録)  Developer Edition で作成した web アプリケーションを組織にエクスポートします。  Developer Edition でアプリを作成し、[保存] ボタンをクリックした後 [テンプレートとしてエクスポート] をクリックします。  構成可能にするパラメーターを設定した後、組織にエクスポートをクリックします。  ※ テンプレートは、組織が設定するテンプレート グループに共有される必要があります。管理権限を持っていない場合、権限が無いことと別途マニュアルで追加する必要がある旨がダイアログで表示されます。 組織の管理者権限がある場合、以下の手順でテンプレート グループを設定できます。 [組織] → [設定] → [マップ] の順にクリック  [テンプレート] の中でテンプレートを共有するグループを指定  [Esri のデフォルトの構成可能なアプリをグループで共有します] をクリックすると、Esri がデフォルトで用意しているテンプレートも通常どおり使用できます。    テンプレートを使った web アプリケーションの作成・利用  ユーザーが ArcGIS Online もしくは ArcGIS Enterprise のテンプレートから web アプリケーションを作成・利用します。 内部的には、アプリは Developer Edition のテンプレートを参照して動作します。 ※ 上記理由から、運用時においてもユーザーが Developer Edition にアクセスできる必要があります。   3つのデプロイ パターンの総括表    パターン 開発時に必要なコンポーネント 運用時に必要なコンポーネント ArcGIS Online での利用可否 ArcGIS Enterprise での利用可否     Web アプリケーションをデプロイ Node.js、Developer Edition Web サーバー、ArcGIS Online もしくは ArcGIS Enterprise 〇 〇   ウィジェットをデプロイ Node.js、Developer Edition Web サーバー、 ArcGIS Enterprise × 〇   テンプレートをデプロイ Node.js、Developer Edition Developer Edition、ArcGIS Online もしくは ArcGIS Enterprise 〇 〇    "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/android/migration-android-100.x/",
	"title": "バージョン 10.2.x から 100.x への移行",
	"tags": [],
	"description": "今まで ArcGIS Runtime SDK for Android バージョン 10.2.x を使用してアプリケーションを開発されていた開発者向けのガイドです。",
	"content": " ArcGIS Runtime SDK バージョン 100.x は新しいアーキテクチャを使用してゼロから開発された次世代の ArcGIS Runtime です。このバージョンアップに伴い API の再設計が行なわれています。このドキュメントでは、バージョン 100.x の変更点について説明します。\nArcGIS Runtime SDK for Android に関しては、ESRIジャパン 製品ページをご参照ください。\n以下は、バージョン 100.x の主な変更点です。\n Gradle 参照プロジェクトの変更 マップ ビュー レイヤー クラス名の変更 フィーチャ レイヤーの表示 フィーチャの操作 個別属性表示 グラフィックス オーバーレイ ジオメトリとジオメトリ ビルダー ローダブル パターン 新しい同期パターン 既知の制限事項  Gradle 参照プロジェクトの変更 Android Studio のビルド ツールは Gradle を使用し、maven リポジトリとライブラリの参照を変更します。\nrepositories { jcenter() maven { url 'https://esri.bintray.com/arcgis' } } dependencies { implementation 'com.esri.arcgisruntime:arcgis-android:100.6.0' }  ArcGIS Runtime SDK for Android がサポートする最新の動作環境は、ESRIジャパン 製品ページ（動作環境）をご参照ください。\nマップ 100.x では、ArcGISMap オブジェクトを API のコアとして、ArcGIS プラットフォームの Web GIS 機能を迅速に利用できるようになりました。\nArcGISMap オブジェクトは 、それを表示する View と分離されています。ArcGISMap オブジェクトには 、操作レイヤー、ベースマップ、ブックマーク等の ArcGIS 固有のデータを設定でき、アプリケーションで利用することができます。\nビュー MapView（2D表示用）と SceneView（3D表示用）は、UI コンポーネントです。MapView クラスの map プロパティに、ArcGISMap オブジェクトを設定します。\n100.x では、以下のようにマップを表示します。\n// ベースマップを指定してマップを初期化 ArcGISMap mArcGISMap = new ArcGISMap(); mArcGISMap.setBasemap(Basemap.createTopographic()); // マップビューにマップを設定 MapView mMapView = findViewById(R.id.MapView); mMapView.setMap(mArcGISMap);  レイヤー クラス名の変更 各レイヤーのクラス名が以下のように変更されています。\n   レイヤー 10.2.x のクラス名 100.x のクラス名     ArcGIS Server ダイナミック マップ サービス レイヤー ArcGISDynamicMapServiceLayer ArcGISMapImageLayer   タイル マップ サービス レイヤー ArcGISTiledMapServiceLayer ArcGISTiledLayer   タイル パッケージ レイヤー ArcGISLocalTiledLayer ArcGISTiledLayer    100.x でサポートされているレイヤーの種類については、ArcGIS Runtime SDK for Android: レイヤー（英語）をご参照ください。\n作成した各レイヤーは、以下の方法でマップに追加します。\n// 操作レイヤーとしてマップに追加する mArcGISMap.getOperationalLayers().add(arcgis_map_image_layer) // ベースマップとしてマップに追加する Basemap mBasemap = new Basemap(); mBasemap.getBaseLayers().add(arcgis_tiled_layer);  フィーチャ レイヤーの表示 フィーチャ サービスや端末のローカルに格納されたジオデータベースのデータをマップに表示するにはフィーチャ レイヤーを使用します。 フィーチャ レイヤーを表示するには、はじめにフィーチャ テーブルを作成します（フィーチャ サービスのデータをフィーチャ レイヤーで表示する場合は ArcGISFeatureTable オブジェクト、ジオデータベースのデータを表示する場合は GeodatabaseFeatureTable オブジェクトを使用します）。次に作成したフィーチャ テーブルを引数として FeatureLayer オブジェクトを作成し、ArcGISMap オブジェクトの OperationalLayers に追加します。\n次のコードは、フィーチャ サービスのデータを FeatureLayer としてマップに追加する方法を示しています。\n// フィーチャ サービスの URL からフィーチャ テーブルを作成 ServiceFeatureTable serviceFeatureTable = new ServiceFeatureTable(\u0026quot;https://services.arcgis.com/wlVTGRSYTzAbjjiC/arcgis/rest/services/all_Japan_shikuchoson/FeatureServer/0\u0026quot;); // フィーチャ テーブルからフィーチャ レイヤーを作成 FeatureLayer featureLayer = new FeatureLayer(serviceFeatureTable); // フィーチャ レイヤーをマップの操作レイヤーに追加 mArcGISMap.getOperationalLayers().add(featureLayer);  フィーチャの操作 フィーチャの検索や編集はフィーチャ テーブル （ServiceFeatureTable または GeodatabaseFeatureTable）に対して行います。\nフィーチャ サービスから作成したフィーチャ テーブル（ServiceFeatureTable）の場合、フィーチャ テーブルのフィーチャは、マップ上にレンダリングするために必要最小限の情報だけを含むように最適化されています。これにより、フィーチャを表示するための待機時間と帯域幅の消費が削減されます。フィーチャの編集やすべての属性情報を表示するような場合は完全な情報を取得するために、ローダブル パターン等を使用して、フィーチャを明示的にロードしておく必要があります。\nフィーチャのリクエスト モード フィーチャ サービスからフィーチャを取得する場合は、 リクエスト モードの設定によってフィーチャの取得頻度とや端末上でのデータのキャッシュ方法を制御します。リクエスト モードには、ON_INTERACTION_CACHE、 ON_INTERACTION_NO_CACHE、MANUAL_CACHE があります。リクエスト モードはフィーチャ テーブルが初期化される前に、ServiceFeatureTable の setFeatureRequestMode メソッドを使用して設定できます。\n ON_INTERACTION_CACHE : ユーザーの操作によりマップの表示領域が変更されると、フィーチャが自動的にリクエストされます。リクエストされたすべてのデータはローカルにキャッシュされます。データがキャッシュされルため、既に表示された領域にマップが移動しても、再度フィーチャはリクエストされません。サーバー上のデータが変更される可能性が少ない静的なデータに適したモードです。 ON_INTERACTION_NO_CACHE : ユーザーの操作によりマップの表示領域が変更されると、フィーチャが自動的にリクエストされますが、キャッシュはされません。既に表示された領域にマップが移動すると、再度フィーチャがリクエストされます。サーバー上のデータが継続的に更新される可能性がある場合に適したモードです。 MANUAL_CACHE : ユーザーによるマップ操作では、フィーチャは自動的にリクエストされません。このモードを使用する場合は、ServiceFeatureTable の populateFromServiceAsync メソッドを使用して明示的にデータをリクエストする必要があります。  以下のコードは populateFromServiceAsync メソッドを使用して、サーバー上のすべてのフィーチャを取得する方法の例です。\n// フィーチャの検索パラメーターを設定 QueryParameters queryParameters = new QueryParameters(); // すべてのフィーチャを取得するように条件を設定 queryParameters.setWhereClause(\u0026quot;1=1\u0026quot;); // 検索結果にフィーチャのすべての属性情報（outFields の配列に \u0026quot;*\u0026quot; を指定）を含める ArrayList\u0026lt;String\u0026gt; outFields = new ArrayList\u0026lt;\u0026gt;(); outFields.add(\u0026quot;*\u0026quot;); serviceFeatureTable.populateFromServiceAsync(queryParameters,true,outFields);  リクエスト モードの詳細は、 ArcGIS Runtime SDK for Android: フィーチャ リクエスト モード（英語）をご参照ください。\nフィーチャの編集 フィーチャの編集はフィーチャ テーブルに対して行います。フィーチャ サービスまたはジオデータベースのデータから作成したフィーチャ テーブルのどちらを編集する場合も実装方法に違いはありません。\nフィーチャの編集方法は、 ArcGIS Runtime SDK for Android: フィーチャの編集（英語）をご参照ください。\nフィーチャの検索 フィーチャの検索はフィーチャ テーブルに対して行います。フィーチャ サービスまたはジオデータベースのデータから作成したフィーチャ テーブルのどちらを編集する場合も実装方法に違いはありません。検索を行うには ServiceFeatureTable または GeodatabaseFeatureTable クラスの queryFeaturesAsync メソッドを使用します。\n次のコードは、フィーチャ サービスから作成したフィーチャ テーブルからフィーチャを検索する方法を示しています。\nfinal ListenableFuture\u0026lt;FeatureQueryResult\u0026gt; queryResult = serviceFeatureTable.queryFeaturesAsync(queryParameters); queryResult.addDoneListener(()-\u0026gt;{ // call get on the future to get the result try { FeatureQueryResult result = queryResult.get(); for (Iterator\u0026lt;Feature\u0026gt; features = result.iterator(); features.hasNext();) { // 検索結果のフィーチャを取得 Feature feature = features.next(); ・・・ } } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } });  個別属性表示 マップ上で特定の場所をタップして、その位置にあるフィーチャをすべてのレイヤーから検索して取得することができます。この操作はビューに対して行います。次のコードは、MapView クラスの identifyLayersAsync メソッドを使用してフィーチャを取得する方法を示しています。\nfinal ListenableFuture\u0026lt;List\u0026lt;IdentifyLayerResult\u0026gt;\u0026gt; identifyLayersResult = mapView.identifyLayersAsync(screenPoint,10,true); identifyLayersResult.addDoneListener(()-\u0026gt;{ try { List\u0026lt;IdentifyLayerResult\u0026gt; identifyResult = identifyLayersResult.get(); for(IdentifyLayerResult identifyLayerResult : identifyResult){ // GeoElement オブジェクトの取得 List\u0026lt;GeoElement\u0026gt; geoElement = identifyLayerResult.getElements(); ・・・ } } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } });  グラフィックス オーバーレイ グラフィックは、マップ上に一時的なデータを表示するために使用されます。MapView オブジェクトにはグラフィックを表示するためのグラフィックス オーバーレイ（GraphicsOverlay）が含まれています。 グラフィックス オーバーレイを使用することで、マップ上のレイヤーの順序が変更されても、グラフィックが常に最上位に表示されます。詳細は、ArcGIS Runtime SDK for Android: グラフィックス オーバーレイの追加（英語）をご参照ください。\n次のコードは、MapView オブジェクトに、グラフィックス オーバーレイを使用してグラフィックを追加する方法を示しています。\n// ジオメトリとシンボルを設定してグラフィックを作成 Graphic graphic = new Graphic(geometry,symbol); // グラフィックス オーバーレイに作成したグラフィックを追加 GraphicsOverlay graphicsOverlay = new GraphicsOverlay(); graphicsOverlay.getGraphics().add(graphic); // MapView の GraphicsOverlays に作成したグラフィックス オーバーレイを追加 mapView.getGraphicsOverlays().add(graphicsOverlay);  ジオメトリとジオメトリ ビルダー Geometry オブジェクトのコンストラクタを使用すると、既知の座標を使用してジオメトリを作成できますが、作成後にそのジオメトリを変更することはできません。\nジオメトリ ビルダー（GeometryBuilder）を使用すると、ゼロから新しいジオメトリを作成したり、既存のジオメトリを基に、ジオメトリを変更することができます。詳細は、ArcGIS Runtime SDK for Android: ジオメトリの編集（英語）をご参照ください 。\nローダブル パターン データを非同期でロードして状態を初期化するマップやレイヤー等のリソースは、ローダブル パターンが採用されています。各リソースのプロパティにアクセスするには、ローダブル パターンを使用して、リソースがロードされた後にアクセスすることが推奨されます。ローダブル パターンは、ロード状態の振る舞いをより均一にして且つ一貫性を持たせることで、非同期性をより明示的にします。ローダブル パターンでは、各リソースは自動的にリソースの状態をロードしません。それらは、開発者が明示的に実行したときに、遅延ロードします。 各リソースの状態は、NotLoaded（ロードが開始していない、Loading（ロード中）、Loaded（ロードに成功）、FailedToLoad（ロードに失敗） のいずれかで監視することもできます。\n詳細は、ArcGIS Runtime SDK for Android: ローダブル パターン（英語）をご参照ください。\n次のコードは、ローダブル パターンの基本的な使用方法の例を示しています。\nFeatureLayer featureLayer = new FeatureLayer(serviceFeatureTable); if(featureLayer.getLoadStatus().equals(LoadStatus.FAILED_TO_LOAD)){ Log.e(\u0026quot;eTag\u0026quot;,\u0026quot;error\u0026quot;); }else{ // フィーチャ レイヤーのロードに成功 }  新しい同期パターン Java 言語で ListenableFuture というインターフェースで馴染みのある Future パターンが拡張されました。この新しい API は、メソッドの完了時に必要な数のリスナーを追加できます。\n既知の制限事項 現バージョン 100.6.0 での既知の制限事項が、ArcGIS Runtime SDK for Android: リリース ノート（英語）に記載されていますので、ご参照ください。\n関連リンク  ArcGIS Runtime SDK for Android: リリース ノート（英語）  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/dotnet/migration-dotnet-100.x/",
	"title": "バージョン 10.2.x から 100.x への移行",
	"tags": [],
	"description": "今まで ArcGIS Runtime SDK for .NET バージョン 10.2.x を使用してアプリケーションを開発されていた開発者向けのガイドです。",
	"content": " ArcGIS Runtime SDK バージョン 100.x は新しいアーキテクチャを使用してゼロから開発された次世代の ArcGIS Runtime です。このバージョンアップに伴い API の再設計が行なわれています。このドキュメントでは、バージョン 100.x の変更点について説明します。\nArcGIS Runtime SDK for .NET に関しては、ESRIジャパン 製品ページをご参照ください。\n以下は、バージョン 100.x の主な変更点です。\n マップとシーン ビュー レイヤー クラス名の変更 フィーチャ レイヤーの表示 フィーチャの操作 個別属性表示 グラフィックス オーバーレイ ジオメトリとジオメトリ ビルダー スケッチ エディター ローダブル パターン ローカルサーバー 既知の制限事項  マップとシーン 100.x では、Map オブジェクト（2D表示用）と Scene オブジェクト（3D表示用） を API のコアとして、ArcGIS プラットフォームの Web GIS 機能を迅速に利用できるようになりました。\nMap オブジェクトと Scene オブジェクトは 、それらを表示する View と分離されています。Map オブジェクトと Scene オブジェクトには 、操作レイヤー、ベースマップ、ブックマーク等の ArcGIS 固有のデータを設定でき、アプリケーションで利用することができます。\nビュー MapView（2D表示用）と SceneView（3D表示用）は、UI コンポーネントです。MapView クラスの map プロパティに、Map オブジェクトを、MapSceneView クラスの scene プロパティには Scene オブジェクトを設定します。\n100.x では、以下のようにマップを表示します。\n// ベースマップを指定してマップを初期化 Map myMap = Map(Basemap.CreateImagery()); // マップビューにマップを設定 MyMapView.Map = myMap;  レイヤー クラス名の変更 各レイヤーのクラス名が以下のように変更されています。\n   レイヤー 10.2.x のクラス名 100.x のクラス名     ArcGIS Server ダイナミック マップ サービス レイヤー ArcGISDynamicMapServiceLayer ArcGISMapImageLayer   タイル マップ サービス レイヤー ArcGISTiledMapServiceLayer ArcGISTiledLayer   タイル パッケージ レイヤー ArcGISLocalTiledLayer ArcGISTiledLayer    100.x でサポートされているレイヤーのタイプについては、ArcGIS for Developers: レイヤー（英語）をご参照ください。\n作成した各レイヤーは、以下の方法でマップに追加します。\n// 操作レイヤーとしてマップに追加する myMap.OperationalLayers.Add(arcgis_map_image_layer) // ベースマップとしてマップに追加する myMap.Basemap.BaseLayers.Add(arcgis_tiled_layer);  フィーチャ レイヤーの表示 フィーチャ サービスや端末のローカルに格納されたジオデータベースのデータをマップに表示するにはフィーチャ レイヤーを使用します。 フィーチャ レイヤーを表示するには、はじめにフィーチャ テーブルを作成します（フィーチャ サービスのデータをフィーチャ レイヤーとして表示するに場合は ServiceFeatureTable オブジェクト、ジオデータベースのデータ表示する場合は GeodatabaseFeatureTable オブジェクトを使用します）。次に作成したフィーチャ テーブルを引数として FeatureLayer オブジェクトを作成し、Map オブジェクトの OperationalLayers に追加します。\n次のコードは、フィーチャ サービスのデータを FeatureLayer として追加する方法を示しています。\n// フィーチャ サービスの URL からフィーチャ テーブルを作成 ServiceFeatureTable featureTable = new ServiceFeatureTable(new Uri(\u0026quot;https://services.arcgis.com/wlVTGRSYTzAbjjiC/arcgis/rest/services/all_Japan_shikuchoson/FeatureServer/0\u0026quot;)); // フィーチャ テーブルからフィーチャ レイヤーを作成 FeatureLayer featureLayer = new FeatureLayer(featureTable); // フィーチャ レイヤーをマップの操作レイヤーに追加 myMap.OperationalLayers.Add(featureLayer);  フィーチャの操作 フィーチャの検索や編集はフィーチャ テーブル （ServiceFeatureTable または GeodatabaseFeatureTable）に対して行います。\nフィーチャ サービスから作成したフィーチャ テーブル（ServiceFeatureTable）の場合、フィーチャ テーブルのフィーチャは、マップ上にレンダリングするために必要最小限の情報だけを含むように最適化されています。これにより、フィーチャを表示するための待機時間と帯域幅の消費が削減されます。フィーチャの編集やすべての属性情報を表示するような場合は完全な情報を取得するために、ローダブル パターン等を使用して、フィーチャを明示的にロードしておく必要があります。\nフィーチャのリクエスト モード フィーチャ サービスからフィーチャを取得する場合は、 リクエスト モードの設定によってフィーチャの取得頻度とや端末上でのデータのキャッシュ方法を制御します。リクエスト モードには、OnInteractionCache、 OnInteractionNoCache、ManualCache があります。リクエスト モードはフィーチャ テーブルが初期化される前に、ServiceFeatureTable の FeatureRequestMode プロパティを使用して設定できます。\n OnInteractionCache: ユーザーの操作によりマップの表示領域が変更されると、フィーチャが自動的にリクエストされます。リクエストされたすべてのデータはローカルにキャッシュされます。キャッシュされたデータは、既に表示された領域にマップが移動しても、再度リクエストされません。サーバー上のデータが変更される可能性が少ない静的なデータに適したモードです。 OnInteractionNoCache: ユーザーの操作によりマップの表示領域が変更されると、フィーチャが自動的にリクエストされますが、キャッシュはされません。既に表示された領域にマップが移動すると、再度リクエストされます。サーバー上のデータが継続的に更新される可能性がある場合に適したモードです。 ManualCache: ユーザーによるマップ操作では、フィーチャは自動的にリクエストされません。このモードを使用する場合は、ServiceFeatureTable の PopulateFromServiceAsync メソッドを使用して明示的にデータをリクエストする必要があります。  以下のコードは PopulateFromServiceAsync メソッドを使用して、サーバー上のすべてのフィーチャを取得する方法の例です。\n// フィーチャの取得（検索）時のパラメーターを設定 QueryParameters queryParameters = new QueryParameters(); // すべてのフィーチャを取得するように条件を設定 queryParameters.WhereClause = \u0026quot;1 = 1\u0026quot;; // 検索結果にフィーチャのすべての属性情報（outFields の配列に \u0026quot;*\u0026quot; を指定）を含める var outputFields = new string[] { \u0026quot;*\u0026quot; }; // クエリの条件に基づいてフィーチャ テーブルにデータを設定する await featureTable.PopulateFromServiceAsync(queryParameters, true, outputFields);  リクエスト モードの詳細は、 ArcGIS for Developers: フィーチャ リクエスト モード（英語）をご参照ください。\nフィーチャの編集 フィーチャの編集はフィーチャ テーブルに対して行います。フィーチャ サービスまたはジオデータベースのデータから作成したフィーチャ テーブルのどちらを編集する場合も実装方法に違いはありません。\nフィーチャの編集方法は、 ArcGIS for Developers: フィーチャの編集（英語）をご参照ください。\nフィーチャの検索 フィーチャの検索はフィーチャ テーブルに対して行います。フィーチャ サービスまたはジオデータベースのデータから作成したフィーチャ テーブルのどちらを編集する場合も実装方法に違いはありません。検索を行うには ServiceFeatureTable または GeodatabaseFeatureTable クラスの QueryFeaturesAsync メソッドを使用します。\n次のコードは、フィーチャ テーブルからフィーチャを検索する方法を示しています。\ntry { // フィーチャの取得（検索）時のパラメーターを設定 QueryParameters queryParams = new QueryParameters(); // 検索条件を設定 queryParams.WhereClause = \u0026quot;upper(KEN) LIKE '%東京%'\u0026quot;; // フィーチャ テーブルから検索条件を取得 FeatureQueryResult queryResult = await _featureTable.QueryFeaturesAsync(queryParams); // 結果に問い合わせるためにリストを取得 var features = queryResult.ToList(); if (features.Any()) { // 結果から1件のフィーチャを取得 Feature feature = features[0]; } else { MessageBox.Show(\u0026quot;検索結果が見つかりませんでした。\u0026quot;); } } catch (Exception ex) { MessageBox.Show(\u0026quot;処理エラー\u0026quot;, \u0026quot;検索処理でエラーが発生しました：\u0026quot; + ex.ToString()); }  個別属性表示 マップ上で特定の場所をタップして、その位置にあるフィーチャをすべてのレイヤーから検索して取得することができます。その操作はビューに対して行います。次のコードは、MapView クラスの IdentifyLayerResult メソッドを使用してフィーチャを取得する方法を示しています。\n// MapView のすべてのレイヤーを識別し、タップしたポイント、許容値、戻り値のタイプ、最大結果数を渡します IReadOnlyList\u0026lt;IdentifyLayerResult\u0026gt; idLayerResults = await MyMapView.IdentifyLayersAsync(tapScreenPoint, pixelTolerance, returnPopupsOnly, maxLayerResults); foreach (IdentifyLayerResult idResults in idLayerResults) { // 検索されたレイヤーを取得して FeatureLayer にキャストする FeatureLayer idLayer = idResults.LayerContent as FeatureLayer; // 反復処理を行い、検索されたレイヤー内の GeoElement を取得する foreach (GeoElement idElement in idResults.GeoElements) { // GeoElement を Feature にキャストする Feature idFeature = idElement as Feature; // フィーチャ レイヤーでフィーチャを選択状態にする idLayer.SelectFeature(idFeature); } }  グラフィックス オーバーレイ グラフィックは、マップ上に一時的なデータを表示するために使用されます。MapView と SceneView オブジェクトにはグラフィックを表示するためのグラフィックス オーバーレイ（GraphicsOverlay）が含まれています。 グラフィックス オーバーレイを使用することで、マップ上のレイヤーの順序が変更されても、グラフィックが常に最上位に表示されます。詳細は、ArcGIS for Developers: グラフィックス オーバーレイの追加（英語）を参照してください。\n次のコードは、MapView オブジェクトに、グラフィックス オーバーレイを使用してグラフィックを追加する方法を示しています。\n// ジオメトリとシンボルを使用してグラフィックを作成 var pointGraphic = new Graphic(pointGeometry, poitnSymbol); // グラフィックス オーバーレイに作成したグラフィックを追加 var graphicsOverlay = new GraphicsOverlay(); graphicsOverlay.Graphics.add(pointGraphic); // MapView の GraphicsOverlays に作成したグラフィックス オーバーレイを追加 MyMapView.GraphicsOverlays.Add(graphicsOverlay);  ジオメトリとジオメトリ ビルダー Geometry オブジェクトのコンストラクタを使用すると、既知の座標を使用してジオメトリを作成できますが、作成後にそのジオメトリを変更することはできません。\nジオメトリ ビルダー（GeometryBuilder）を使用すると、ゼロから新しいジオメトリを作成したり、既存のジオメトリを基に、ジオメトリを変更することができます。詳細は、ArcGIS for Developers: ジオメトリの編集（英語）を参照してください 。\nスケッチ エディター スケッチ エディター（SketchEditor）を使用すると、ユーザーがマップ上で対話的にジオメトリをスケッチすることができます。\n次のコードは、SketchEditor の使用方法の例を示しています。\n// 頂点の編集、サイズ変更、移動ができるようにスケッチエディタの設定を行います var config = MyMapView.SketchEditor.EditConfiguration; config.AllowVertexEditing = true; config.ResizeMode = SketchResizeMode.Uniform; config.AllowMove = true; // スケッチエディタをページのデータコンテキストとして設定する DataContext = MyMapView.SketchEditor; ・・・・・・ try { // ジオメトリの種類を設定してスケッチを開始 geometry = await MyMapView.SketchEditor.StartAsync(creationMode, true); ・・・・・・ // ジオメトリが更新された際の処理 } catch (TaskCanceledException) { // スケッチのキャンセル } catch (Exception ex) { // スケッチのエラー }  ローダブル パターン データを非同期的にロードして状態を初期化するマップやレイヤー等のリソースは、ローダブル パターンを採用しています。各リソースのプロパティにアクセスするときは、ローダブル パターンを使用して、リソースがロードされた後にアクセスすることが推奨されます。ローダブル パターンは、ロード状態の振る舞いをより均一にして且つ一貫性を持たせることで、非同期性をより明示的にします。ローダブル パターンでは、各リソースは自動的にリソースの状態をロードしません。それらは、開発者が明示的に実行したときに、遅延ロードします。 ローダブル パターンを採用しているリソースの状態は、NotLoaded（ロードが開始していない、Loading（ロード中）、Loaded（ロードに成功）、FailedToLoad（ロードに失敗） のいずれかで監視することができ、ロードに失敗した場合はロードを再試行することができます。\n詳細は、ArcGIS for Developers: ローダブル パターン（英語）を参照してください。\n次のコードは、ローダブル パターンの使用方法の例を示しています。\n// ローダブル時のイベント featureLayer.Loaded += (s, e) =\u0026gt; { // フィーチャ レイヤーのプロパティにアクセス Debug.Assert(featureLayer.MinScale == 5000); Debug.Assert(featureLayer.MaxScale == 1000000); }; // フィーチャ レイヤーのロード await featureLayer.LoadAsync();  ローカルサーバー ローカル サーバーの機能を使用する場合は、ArcGIS Runtime SDK for .NET とは別に ArcGIS Runtime Local Server SDK のインストールが必要となります。インストールの詳細は、ArcGIS for Developers: ローカル サーバー（英語）を参照してください。\n既知の制限事項 現バージョンでの既知の制限事項が、ArcGIS Runtime SDK for .NET: リリース ノート（英語）に記載されていますので、ご参照ください。\n関連リンク  ArcGIS for Developers: リリース ノート（英語）  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/ios/migration-ios-100.x/",
	"title": "バージョン 10.2.x から 100.x への移行",
	"tags": [],
	"description": "今まで ArcGIS Runtime SDK for iOS バージョン 10.2.x を使用してアプリケーションを開発されていた開発者向けのガイドです。",
	"content": " ArcGIS Runtime SDK バージョン 100.x は新しいアーキテクチャを使用してゼロから開発された次世代の ArcGIS Runtime です。このバージョンアップに伴い API の再設計が行なわれています。このドキュメントでは、バージョン 100.x の変更点について説明します。\nArcGIS Runtime SDK for iOS に関しては、ESRIジャパン 製品ページをご参照ください。\n以下は、バージョン 100.x の主な変更点です。\n マップとシーン ビュー レイヤー クラス名の変更 フィーチャ レイヤーの表示 フィーチャの操作 個別属性表示 グラフィックス オーバーレイ ジオメトリとジオメトリ ビルダー スケッチ エディター ローダブル パターン ブロックを使用した非同期プログラミング 既知の制限事項  マップとシーン 100.x では、AGSMap オブジェクト（2D表示用）と AGSScene オブジェクト（3D表示用）を API のコアとして、ArcGIS プラットフォームの Web GIS 機能を迅速に利用できるようになりました。\nAGSMap オブジェクトと AGSScene オブジェクトは 、それらを表示する View と分離されています。AGSMap オブジェクトと AGSScene オブジェクトには 、操作レイヤー、ベースマップ、ブックマーク等の ArcGIS 固有のデータを設定でき、アプリケーションで利用することができます。\nビュー AGSMapView（2D表示用）と AGSSceneView（3D表示用）は、UI コンポーネントです。AGSMapView クラスの map プロパティに、AGSMap オブジェクトを、AGSMapSceneView クラスの scene プロパティには AGSScene オブジェクトを設定します。\n100.x では、以下のようにマップを表示します。\n// ベースマップを指定してマップを初期化 let map = AGSMap(basemap:AGSBasemap.imagery()) // マップビューにマップを設定 self.mapView.map = map  レイヤー クラス名の変更 各レイヤーのクラス名が以下のように変更されています。\n   レイヤー 10.2.x のクラス名 100.x のクラス名     ArcGIS Server ダイナミック マップ サービス レイヤー AGSDynamicMapServiceLayer AGSArcGISMapImageLayer   タイル マップ サービス レイヤー AGSTiledMapServiceLayer AGSArcGISTiledLayer   タイル パッケージ レイヤー AGSLocalTiledLayer AGSArcGISTiledLayer    作成した各レイヤーは、以下の方法でマップに追加します。\n// 操作レイヤーとしてマップに追加する self.map.operationalLayers.add(arcgis_map_image_layer) // ベースマップとしてマップに追加する self.map.basemap = AGSBasemap(baseLayer: arcgis_tiled_layer)  フィーチャ レイヤーの表示 フィーチャ サービスや端末のローカルに格納されたジオデータベースのデータをマップに表示するにはフィーチャ レイヤーを使用します。 フィーチャ レイヤーを表示するには、はじめにフィーチャ テーブルを作成します（フィーチャ サービスのデータをフィーチャ レイヤーで表示する場合は AGSArcGISFeatureTable オブジェクト、ジオデータベースのデータを表示する場合は AGSGeodatabaseFeatureTable オブジェクトを使用します）。次に作成したフィーチャ テーブルを引数として AGSFeatureLayer オブジェクトを作成し、AGSMap オブジェクトの OperationalLayers に追加します。\n次のコードは、フィーチャ サービスのデータを AGSFeatureLayer としてマップに追加する方法を示しています。\n// フィーチャ サービスの URL からフィーチャ テーブルを作成 let featureTable = AGSServiceFeatureTable(url: URL(string: \u0026quot;https://services.arcgis.com/wlVTGRSYTzAbjjiC/arcgis/rest/services/all_Japan_shikuchoson/FeatureServer/0\u0026quot;)!) // フィーチャ テーブルからフィーチャ レイヤーを作成 let featureLayer = AGSFeatureLayer(featureTable: featureTable) // フィーチャ レイヤーをマップの操作レイヤーに追加 self.map.operationalLayers.add(featureLayer)  フィーチャの操作 フィーチャの検索や編集はフィーチャ テーブル （AGSArcGISFeatureTable または AGSGeodatabaseFeatureTable）に対して行います。\nフィーチャ サービスから作成したフィーチャ テーブル（AGSArcGISFeatureTable）の場合、フィーチャ テーブルのフィーチャは、マップ上にレンダリングするために必要最小限の情報だけを含むように最適化されています。これにより、フィーチャを表示するための待機時間と帯域幅の消費が削減されます。フィーチャの編集やすべての属性情報を表示するような場合は完全な情報を取得するために、ローダブル パターン等を使用して、フィーチャを明示的にロードしておく必要があります。\nフィーチャのリクエスト モード フィーチャ サービスからフィーチャを取得する場合は、 リクエスト モードの設定によってフィーチャの取得頻度とや端末上でのデータのキャッシュ方法を制御します。リクエスト モードには、OnInteractionCache、 OnInteractionNoCache、ManualCache があります。リクエスト モードはフィーチャ テーブルが初期化される前に、AGSServiceFeatureTable の featureRequestMode プロパティを使用して設定できます。\n OnInteractionCache: ユーザーの操作によりマップの表示領域が変更されると、フィーチャが自動的にリクエストされます。リクエストされたすべてのデータはローカルにキャッシュされます。データがキャッシュされルため、既に表示された領域にマップが移動しても、再度フィーチャはリクエストされません。サーバー上のデータが変更される可能性が少ない静的なデータに適したモードです。 OnInteractionNoCache: ユーザーの操作によりマップの表示領域が変更されると、フィーチャが自動的にリクエストされますが、キャッシュはされません。既に表示された領域にマップが移動すると、再度フィーチャがリクエストされます。サーバー上のデータが継続的に更新される可能性がある場合に適したモードです。 ManualCache: ユーザーによるマップ操作では、フィーチャは自動的にリクエストされません。このモードを使用する場合は、AGSServiceFeatureTable の populateFromService メソッドを使用して明示的にデータをリクエストする必要があります。  以下のコードは populateFromService メソッドを使用して、サーバー上のすべてのフィーチャを取得する方法の例です。\n// フィーチャの検索パラメーターを設定 let params = AGSQueryParameters() // すべてのフィーチャを取得するように条件を設定 params.whereClause = \u0026quot;1 = 1\u0026quot; // 検索結果にフィーチャのすべての属性情報（outFields の配列に \u0026quot;*\u0026quot; を指定）を含める self.featureTable.populateFromService(with: params, clearCache: true, outFields: [\u0026quot;*\u0026quot;]) {(result, error) -\u0026gt; Void in if let error = error { // フィーチャの取得に失敗 print(\u0026quot;Error:\\(error.localizedDescription)\u0026quot;) } else { // フィーチャの取得に成功（フィーチャ数を表示） print(result?.featureEnumerator().allObjects.count ?? \u0026quot;0\u0026quot;) } }  リクエスト モードの詳細は、 ArcGIS Runtime SDK for iOS: フィーチャ リクエスト モード（英語）をご参照ください。\nフィーチャの編集 フィーチャの編集はフィーチャ テーブルに対して行います。フィーチャ サービスまたはジオデータベースのデータから作成したフィーチャ テーブルのどちらを編集する場合も実装方法に違いはありません。\nフィーチャの編集方法は、 ArcGIS Runtime SDK for iOS: フィーチャの編集（英語）をご参照ください。\nフィーチャの検索 フィーチャの検索はフィーチャ テーブルに対して行います。フィーチャ サービスまたはジオデータベースのデータから作成したフィーチャ テーブルのどちらを編集する場合も実装方法に違いはありません。検索を行うには AGSServiceFeatureTable または AGSGeodatabaseFeatureTable クラスの queryFeaturesWithParameters メソッドを使用します。\n次のコードは、フィーチャ サービスから作成したフィーチャ テーブルからフィーチャを検索する方法を示しています。\nfeatureTable.queryFeatures(with: queryParameters, queryFeatureFields: .loadAll, completion:{ (result, error) -\u0026gt; Void in if let error = error { print(\u0026quot;Error:\\(error.localizedDescription)\u0026quot;) } else { let enumr = result?.featureEnumerator() for feature in enumr! { // 検索結果のフィーチャを取得 let feature = feature as! AGSArcGISFeature } } })  個別属性表示 マップ上で特定の場所をタップして、その位置にあるフィーチャをすべてのレイヤーから検索して取得することができます。この操作はビューに対して行います。次のコードは、AGSMapView クラスの identifyLayers メソッドを使用してフィーチャを取得する方法を示しています。\nself.mapView.identifyLayers(atScreenPoint: screenPoint, tolerance: 10, returnPopupsOnly: true, completion: { (results, error) -\u0026gt; Void in if let error = error { print(error) } else { for identifyLayerResult in results! { for geoElement in identifyLayerResult.geoElements { // AGSGeoElement オブジェクトの取得 } } } })  グラフィックス オーバーレイ グラフィックは、マップ上に一時的なデータを表示するために使用されます。AGSMapView と AGSSceneView オブジェクトにはグラフィックを表示するためのグラフィックス オーバーレイ（AGSGraphicsOverlay）が含まれています。 グラフィックス オーバーレイを使用することで、マップ上のレイヤーの順序が変更されても、グラフィックが常に最上位に表示されます。詳細は、ArcGIS Runtime SDK for iOS: グラフィックス オーバーレイの追加（英語）をご参照ください。\n次のコードは、AGSMapView オブジェクトに、グラフィックス オーバーレイを使用してグラフィックを追加する方法を示しています。\n// ジオメトリとシンボルを設定してグラフィックを作成 let pointGraphic = AGSGraphic(geometry: pointGeometry, symbol: poitnSymbol, attributes: nil) // グラフィックス オーバーレイに作成したグラフィックを追加 let graphicsOverlay = AGSGraphicsOverlay() graphicsOverlay.graphics.add(pointGraphic) // AGSMapView の GraphicsOverlays に作成したグラフィックス オーバーレイを追加 self.mapView.graphicsOverlays.add(graphicsOverlay)  ジオメトリとジオメトリ ビルダー AGSGeometry オブジェクトのコンストラクタを使用すると、既知の座標を使用してジオメトリを作成できますが、作成後にそのジオメトリを変更することはできません。\nジオメトリ ビルダー（AGSGeometryBuilder）を使用すると、ゼロから新しいジオメトリを作成したり、既存のジオメトリを基に、ジオメトリを変更することができます。詳細は、ArcGIS Runtime SDK for iOS: ジオメトリの編集（英語）をご参照ください 。\nスケッチ エディター スケッチ エディター（AGSSketchEditor）を使用すると、ユーザーがマップ上で対話的にジオメトリをスケッチすることができます。\n次のコードは、AGSSketchEditor の使用方法の例を示しています。\n// マップ ビューにスケッチ エディターを設定 self.sketchEditor = AGSSketchEditor() self.mapView.sketchEditor = self.sketchEditor // ジオメトリの種類を設定してスケッチを開始 self.sketchEditor.start(with: AGSGeometryType.polygon) // スケッチ中のジオメトリの更新を監視 NotificationCenter.default.addObserver(self, selector: #selector(ViewController.respondToGeometryChanged), name: NSNotification.Name.AGSSketchEditorGeometryDidChange, object: nil) ・・・・・・ @objc func respondToGeometryChanged() { // ジオメトリが更新された際の処理 }  ローダブル パターン データを非同期でロードして状態を初期化するマップやレイヤー等のリソースは、ローダブル パターンが採用されています。各リソースのプロパティにアクセスするには、ローダブル パターンを使用して、リソースがロードされた後にアクセスすることが推奨されます。ローダブル パターンは、ロード状態の振る舞いをより均一にして且つ一貫性を持たせることで、非同期性をより明示的にします。ローダブル パターンでは、各リソースは自動的にリソースの状態をロードしません。それらは、開発者が明示的に実行したときに、遅延ロードします。 各リソースの状態は、NotLoaded（ロードが開始していない、Loading（ロード中）、Loaded（ロードに成功）、FailedToLoad（ロードに失敗） のいずれかで監視することもできます。\n詳細は、ArcGIS Runtime SDK for iOS: ローダブル パターン（英語）をご参照ください。\n次のコードは、ローダブル パターンの基本的な使用方法の例を示しています。\nself.featureLayer.load(completion: {(error) -\u0026gt; Void in if let error = error { print(error) }else { // フィーチャ レイヤーのロードに成功 } })  ブロックを使用した非同期プログラミング 非同期操作を実行するメソッドは、完了ブロックを引数として受け取ります。ブロックは操作が正常に完了したとき、または、エラーが発生したときに呼び出されます。操作が成功すると、その操作の結果がブロックに渡されます。それ以外の場合はエラーが渡されます。 これは、デリゲートを使用して各非同期操作の結果とエラーをハンドリングしていた 10.2.x のプログラミング方法を置き換えます。\n次のコードは、例として端末の GPS の位置情報の取得開始の操作結果をハンドリングする方法を示しています。\nself.mapView.locationDisplay.start(completion: { (error) -\u0026gt; Void in if let error = error { // GPS の位置情報の取得に失敗 print(\u0026quot;Error:\\(error.localizedDescription)\u0026quot;) } else { // GPS の位置情報の取得に成功 } })  既知の制限事項 現バージョンでの既知の制限事項が、ArcGIS Runtime SDK for iOS: リリース ノート（英語）に記載されていますので、ご参照ください。\n関連リンク  ArcGIS Runtime SDK for iOS: バージョン 100.x への移行（英語） ArcGIS Runtime SDK for iOS: リリース ノート（英語）  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/javascript/migrating-from-3.x-to-4.0/",
	"title": "バージョン 3.x から 4.x への移行",
	"tags": [],
	"description": "バージョン 3.x の API で作成した既存のアプリケーションを 4.x に移行するために必要な情報を紹介します。",
	"content": " バージョン 4.x では ArcGIS API for JavaScript の構成要素が大きく見直され、機能拡張が行われています。バージョン 3.x で開発したアプリケーションをアップデートすることも可能ですが、アプリケーションを書き換えることを検討してください。\n本トピックでは 3.x の API で作成した既存のアプリケーションを 4.x に移行するために必要な情報を解説します。API で更新された仕様はいくつかありますが、その中でも重要な項目について紹介します。\n プロパティのハンドリング\n View の利用 Map と Layer の仕様 モジュールとパッケージの更新 Web マップのサポート AMD の利用 廃止項目  プロパティのハンドリング 3.x ではいくつかのプロパティは、読み取り/書き込み用のクラス固有のメソッド名を呼び出すことで、値を get（読み取り）または set（書き込み）することができました。4.x ではメソッドの呼び出しが刷新され、シンプルで一貫した方法で全てのプロパティの読み取り、書き込みをサポートします。\n オブジェクトに直接値を書き込む方法  // ベースマップのタイプを設定 map.basemap = 'oceans';   オブジェクトから直接値を読み取る方法  // ベースマップのタイトルを取得 var title = map.basemap.title;  例えば、3.x でフィーチャ レイヤーのフィルター定義式（definitionExpression）を設定するには、以下のように記述していました。\nmyFeatureLayer.setDefinitionExpression(expression);  4.x では、以下の様に記述します。\nmyFeatureLayer.definitionExpression = expression;  4.x では、以下に記述したように .get() または .set() を使用して、深い階層のプロパティにアクセスすることも可能です。\nvar basemapTitle = map.get(\u0026quot;basemap.title\u0026quot;);  プロパティの変更の監視 3.x ではプロパティの変更はイベントでハンドリングされていましたが、4.x ではプロパティの変更の監視を簡単に行うことができます。プロパティの変更は、.watch(property, callback) メソッドを通してハンドリングされます。property に変更があると callback が呼び出されます。そして、監視しているオブジェクトのプロパティの新しい値、古い値、名前を取得することができます。\nvar propertyChangeHandler = function(newValue, oldValue, property, object){ console.log(\u0026quot;新しい値: \u0026quot;,newValue, \u0026quot;古い値: \u0026quot;,oldValue, \u0026quot;変更されたプロパティ: \u0026quot;, property, \u0026quot;監視しているオブジェクト: \u0026quot;, object); };  View の利用 4.x では、Map は 2D または 3D で表示することができます。それに併せ、マップの描画ロジックも修正され、マップとレイヤーの描画は View によって制御されるようになります。\nView は 4.x で導入されたコンセプトです。View は 2 つのタイプのうちのどちらか1つを使用します。\n 2D で表示する場合: MapView 3D で表示する場合: SceneView  View は 2D または 3D のデータを可視化するのに使用します。Map は実際のデータまたはデータを表示するためのレイヤーを含み、View はそれらのデータの表示を処理します。どのように、データを表示するかは、2D または 3D のどちらを使用するかによって異なります。View から Map を参照（例: view.map）できますが、Map から View を参照することはできません。重要なのは1つの Map が複数の View を利用することができる点です。\n下記の構文は、作成した Map を 2D（MapView）と 3D（SceneView）で表示する方法を示しています。\n 2D（MapView）で表示する方法  function (Map, MapView){ map = new Map({ basemap: \u0026quot;topo\u0026quot; }); view = new MapView({ container: \u0026quot;viewDiv\u0026quot;, map: map, scale: 2400000 }); }   3D（SceneView）で表示する方法  function (Map, SceneView){ map = new Map({ basemap: \u0026quot;topo\u0026quot; }); view = new SceneView({ container: \u0026quot;viewDiv\u0026quot;, map: map, scale: 2400000 });  Map と Layer の仕様 Map と Layer には以下に挙げた重要な更新があります。\n Map の layers に basemap は含まれません 2D と 3D の両方でマップの回転が可能になりました グラフィック レイヤーは、マップのレイヤー コレクションの中のどこにでも追加することができます（3.x ではグラフィック レイヤーは他の形式のレイヤーよりも上に追加する必要がありました） GroupLayer クラスが追加されました  モジュールとパッケージの更新 詳細は3.x/4.x 機能比較表（英語）を確認してください。以下に挙げた項目は、その中でも重要な更新です。\n パッケージ名の変更（例: esri/dijit が esri/widgets に変更） モジュール名の短縮（例: ArcGISTiledMapServiceLayer が TileLayer に変更） モジュール名の統一（全てのモジュール名は大文字から始まります） サポート クラスは、API リファレンスをより組織化するために support フォルダに 移動しました(例: esri/layers/support, esri/tasks/support)。 esri/config の構成が変更され、 esriConfig.defaults のプロパティは esriConfig に移動しました。以下は、デフォルトで使用されるジオメトリ サービスの設定方法の例です。  // 3.x esriConfig.defaults.geometryService = new GeometryService(\u0026quot;\u0026lt;ジオメトリ サービスのURL\u0026gt;\u0026quot;);  // 4.x esriConfig.geometryService = new GeometryService(\u0026quot;\u0026lt;ジオメトリ サービスのURL\u0026gt;\u0026quot;);   defaults.io オブジェクトは esriConfig.request に移動しました。  // 3.x esriConfig.defaults.io.alwaysUseProxy = true;  // 4.x esriConfig.request.alwaysUseProxy = true;   3 つの *-all レガシー モジュール（Editor-all, AttributeInspector-all, TemplatePicker-all）は削除されました。 各コンストラクタは JSON をサポートしません。代わりに、fromJSON() メソッド（例: Graphic.fromJSON() ）を使用してください。 FeatureLayer はグラフィックを保持しません。代わりに LayerView が FeatureLayer のフィーチャを表すグラフィックを描画します。  Web マップのサポート 4.x 以降でも、アプリケーションで Web マップ を表示することができます。Web マップ との連携は部分的にサポートされています。これは、Web マップとの連携が API の現在のバージョンで利用可能な機能に依存するためです。例えば、まだ API で実装されていないタイプのレイヤー（WFS レイヤーなど）が含まれている場合でも、Web マップを表示することができます。API でサポートされているタイプのレイヤーのみを表示することができます。また、Web マップの保存はバージョン 4.14 からサポートされています。\nAMD の利用 3.x では AMD とレガシー モジュールの両方を利用できましたが、4.x からは、レガシー モジュールが廃止され、 AMD モジュールのみを利用できます。\n廃止項目 Geocoder ウィジェットはバージョン 3.13 で非推奨となり、4.x では提供されません。代わりに Search ウィジェットを使用してください。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/authentication/proxy-services/",
	"title": "プロキシ サービスの利用",
	"tags": [],
	"description": "Web アプリ や ネイティブ アプリで秘密鍵の埋め込みをせずにサービスを利用したり、CORS 未対応のサーバーにアクセスする際に必要となるプロキシ サービスについて紹介します。",
	"content": " プロキシ サービスとは ルート解析 や ジオエンリッチメント などの、ArcGIS Online の有償サービス にアクセスするためにはトークンが必要です。アプリケーションがブラウザー ベースであるかネイティブ アプリケーションであるか、ハイブリッド であるかにかかわらず、秘密鍵を埋め込むことはセキュリティのリスクが高まるため、プロキシ サービスの利用が推奨されています。プロキシ サービスを経由することでクライアント側からのリクエストに秘密の情報を追加してサービスに転送し、結果をレスポンスとしてアプリに返します。\nプロキシ サービスを利用する方法は以下の２通りあります。\n ArcGIS Online にホストされたプロキシ サービス（Service Proxies）\n ArcGIS for Developers の Web サイト上での設定のみで Esri の有償サービスへのアクセス権を持った URL を発行します  独自の Web サーバーにホストするプロキシ サービス（Resource Proxy）\n 米国 Esri 社が PHP、.NET、Java でプロキシ サービスのソースコード（PHP、.NET、Java）を GitHub で公開しています   また、ArcGIS API for JavaScript 4.9 から CORS でのリクエストが標準 になりました。Web サーバー 側で CORS を有効化することが推奨される方法ですが、Webサーバー / ブラウザー がCORSに対応していない場合には、自分の Webサーバー にプロキシ サービスをホストする必要があります。\nArcGIS Online にホストされたプロキシ サービス  ArcGIS for Developers の [Dashboard] ページを開きます。\n [Create a New App] をクリックしてアプリを登録します（登録済みのアプリであれば、アプリのページを開きます）。\n [Services] タブをクリックします。\n ページ下部の [Service Proxies] セクションまでスクロールします。\n [Service] リストからプロキシ サービスを利用したい Esri 有償サービスの種類を選択します。\n [Request Limit] にアクセス数の上限を設定します。\n [Whitelisted Referrers] にてプロキシへのアクセス権を与えるリファラのホワイトリストにドメインを追加します。\n  利用可能な Esri のサービス一覧 以下ではプロキシ サービスが利用可能なサービス一覧です。\n   サービス [Service] リストの値     ジオコーディング geocode   ジオエンリッチメント geoenrichment   ルート解析 route   ルート解析（非同期） asyncroute   ユーティリティ  routingUtilities   最寄り施設解析 closestFacility   最寄り施設解析（非同期） asyncClosestFacility   到達圏解析 serviceArea   到達圏解析（非同期） asyncServiceArea   ロケーション-アロケーション解析 asyncLocationAllocation   配車ルート解析 syncVRP   配車ルート解析（非同期） asyncVRP   OD コスト マトリックス解析（非同期） asyncODCostMatrix   交通量 traffic   標高 elevationSync   標高（非同期） elevation   水文解析 hydrology    独自の Web サーバーにホストするプロキシ サービス 米国 Esri 社が PHP、.NET、Java でプロキシ サービスのソースコードを GitHub で公開しています。このプロキシ サービスを設定することにより、ArcGIS Runtime SDK、ArcGIS API for JavaScript 等と共に使用すると、Esri 有償サービスを利用するためのトークンとの交換を代替してくれます。\nプロキシ サービスの設定 プロキシ サービス（Resource Proxy） から自分の環境にあわせて PHP、.NET、Java のいずれかの言語の Instructions に書かれている設定方法に従って設定します。 ここでは例として .NETでの設定方法を記載しています。\n zipファイルをダウンロードして解凍するか、リポジトリをクローンします。リリース版（推奨）または最新のデイリービルドをダウンロード可能です。 .NET 4.0 以降のアプリケーション プールを指定して、DotNetフォルダの内容を .NET Webアプリケーションとしてインストールします。たとえば、次の手順で行います。  IIS マネージャを開きます  wwwroot 下に DotNetフォルダ を置いた場合は、それを右クリックして [アプリケーションに変換] を選択します。 「アプリケーション プール」が4.0以上であることを確認します。   プロキシがインストールされて利用可能であることをテストします。 html http://[yourmachine]/DotNet/proxy.ashx?ping  プロキシがブラウザで直接リクエストを転送できることをテストします。\nhttp://[yourmachine]/DotNet/proxy.ashx?http://services.arcgisonline.com/ArcGIS/rest/services/?f=pjson  トラブルシューティング：404.3というエラーメッセージが表示された場合は、ASP.NETがセットアップされていない可能性があります。\n Windows 8の場合は、「Windowsの機能の有効化または無効化」 - \u0026gt;「インターネットインフォメーションサービス」 - \u0026gt;「World Wide Webサービス」 - \u0026gt;「アプリケーション開発機能」 - \u0026gt;「ASP .NET 4.5」の順に選択します。  テキストエディタでproxy.configファイルを編集して、プロキシの設定をします。\n 指定されたサービスにプロキシを使用するようにアプリケーションを更新してください。このJavaScriptの例では、route.arcgis.comへのリクエストはプロキシを利用します。\nurlUtils.addProxyRule({ urlPrefix: \u0026quot;route.arcgis.com\u0026quot;, proxyUrl: \u0026quot;http://[yourmachine]/proxy/proxy.ashx\u0026quot; });  セキュリティに関するヒント：デフォルトでは、proxy.config は任意の参照元を許可します。これを制限するに allowedReferers プロパティ * の部分を独自のアプリケーションURL に置き換えます。\n  ※ 最新のDotNet の Proxy Version \u0026ldquo;1.1.2\u0026rdquo;では 561 行目で TLS 1.2 に対しての実装がされていますが、リクエスト先のサーバーが TLS 1.2 に対応していない場合は 500 のエラーになります。\n\u0026quot;error\u0026quot;: { \u0026quot;code\u0026quot;: 500, \u0026quot;message\u0026quot;: \u0026quot;要求は中止されました: SSL/TLS のセキュリティで保護されているチャネルを作成できませんでした\u0026quot; }  外部のサーバーで TLS 1.2 にすぐに変更できない場合は、TLS 1.0 , TLS 1.1 にも対応するようにコードを変更します。\nServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;  ⇒\nServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;  プロキシ サービス の設定ファイルの設定 プロキシの設定ファイル（proxy.config）にアクセスを許可する Esri 有償サービスの情報を設定します。\n allowedReferers 属性を使ってアクセスを許可する HTTP リファラを設定します。\n rateLimit と rateLimitPeriod 属性にて一定期間におけるアクセス数の上限を設定します。\n  以下は、プロキシ サービスの設定例です。\n\u0026lt;ProxyConfig mustMatch=\u0026quot;true\u0026quot; logFile=\u0026quot;proxy_log_xml.log\u0026quot; allowedReferers=\u0026quot;example.com\u0026quot;\u0026gt; \u0026lt;serverUrls\u0026gt; \u0026lt;serverUrl url=\u0026quot;geoenrich.arcgis.com\u0026quot; oauth2Endpoint=\u0026quot;https://www.arcgis.com/sharing/oauth2\u0026quot; clientId=\u0026quot;6Xo1d-example-9Kn2\u0026quot; clientSecret=\u0026quot;5a5d50-example-c867b6efcf969bdcc6a2\u0026quot; rateLimit=\u0026quot;120\u0026quot; rateLimitPeriod=\u0026quot;60\u0026quot; matchAll=\u0026quot;true\u0026quot;/\u0026gt; \u0026lt;serverUrl url=\u0026quot;route.arcgis.com\u0026quot; matchAll=\u0026quot;true\u0026quot; oauth2Endpoint=\u0026quot;https://www.arcgis.com/sharing/oauth2\u0026quot; clientId=\u0026quot;6Xo1d-example-9Kn2\u0026quot; clientSecret=\u0026quot;5a5d50-example-c867b6efcf969bdcc6a2\u0026quot; rateLimit=\u0026quot;120\u0026quot; rateLimitPeriod=\u0026quot;60\u0026quot;/\u0026gt; \u0026lt;/serverUrls\u0026gt; \u0026lt;/ProxyConfig\u0026gt;  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/visualization/6ways-to-improve-your-maps/",
	"title": "地図上に賢くデータを可視化するための 6 つの方法",
	"tags": [],
	"description": "マップ ビューアーを使って地図データを賢く可視化するために おさえておくべき６つの方法を紹介します。",
	"content": " ArcGIS のデータ ビジュアライゼーション ツール（マップ ビューアー）を使って地図データを賢く可視化するために おさえておくべき６つの方法を紹介します。\n 色について考える パターンを発見する アウトラインを調整する 透過率を調整してパターンをハイライトする ２つの属性データをサイズと色で表現する もっとも大きい値を発見する  色について考える 主題となるデータに色を加える場合に考えるべき事項は以下の 3 つです。\n 背景地図 ストーリー カラーランプ  地図を使ったデータ可視化ではほとんどの場合、背景地図の上に主題となるデータが重なります。 そのため、色は背景地図の配色に応じて見やすい適切な色を選択するべきです。 ただし、データ可視化においてはむしろ背景地図を使わないという選択肢も１つのテクニックになり得ます。\nデータ可視化には必ず伝えたいストーリーがあります。 そのストーリーを説明するような説得力のある色を選びましょう。\n最後にカラーランプですが、数値データに対してその値の範囲をカラーランプ（色の変化）で表現します。 上記のストーリーとデータのもつ意味を照らし合わせて、どの色からどの色へ変化すべきなのか考えてみましょう。\nパターンを発見する データ可視化の主題となるデータからパターンを導き出すことは重要です。 パターンを浮かび上がらせるためにはいくつかの方法があります。 たとえば、数値データに対しての表現として以下がまず前提となる２つの項目です。\n 色を使うか？サイズを使うか？ クラスで分類するか？しないか？  たとえば、公園の面積で大中小のような３段階の規模でカテゴライズして可視化したい場合、 色よりもサイズで規模を表現したほうが意図を伝えやすいと思います。 そして、面積に比例してシンボルが変化するより、３段階でクラス分類すべきでしょう。\nArcGIS のビジュアライゼーション ツールにはヒストグラムを掛け合わせたスライダーを操作することによって、 動的に見栄えを確認しながら変化させることができます。 ストーリーとの関連から、基点となる数字に意味を持たせるのもよいと思いますが、 このスライダーを使ってあくまで地図上で可視化されたグラフィックの集合から、 あるパターンを浮かび上がらせるには便利なツールです。\n変化前（左）と変化後（右）\nアウトラインを調整する ポイントとポリゴンのシンボルはアウトライン（枠線）があります。 アウトラインはデータをそれぞれ視認するのには役立ちますが、 適切に調整をしないで使用すると視覚的には邪魔な要素となり、 地図上の主題データが伝えるストーリーを理解するための焦点を逸らしてしまいかねません。\n色と透過率を用いて、強調しないようなアウトラインの表現に調整してみてください。 場合によっては、完全にアウトラインをなくしてしまうことも選択肢として考えられます。\n調整前（左）と調整後（右）\n透過率を調整してパターンをハイライトする パターンを発見/可視化するためのシンボル表現として色あるいはサイズを選択することを伝えましたが、 もう１つ値の変化を表現する方法として透過率を利用する方法があります。 パターンや基点となるような重要な値をハイライトする際に採用することをお薦めします。\n透過率もスライダーで動的にレンジを調整することが可能です。\n２つの属性データをサイズと色で表現する 従来、地図上で属性データを可視化する場合は単一の属性値に基づいて色やサイズで表現することが基本でした。 マップ ビューアーのビジュアライゼーション機能では、 ２つのデータを色とサイズでそれぞれ表現することで１つのシンボルに対して２つの意味を含めることが可能です。\nたとえば、エリアごとの家賃相場を色、居住者の平均年収をサイズで表現することで、 家賃相場と居住者の収入の関連を単一の主題図で可視化することができます。\nもっとも大きい値を発見する ビジュアライゼーション機能のなかでもっともユニークなものとして、 複数の属性値を比較してもっとも大きい値を占める属性を可視化する機能があります。\nたとえば、選挙マップを作って各選挙区でどの政党がもっとも優勢かを表したいときに有効な表現です。 選挙区の属性値として政党ごとの得票数が A 党 100、B 党 150、C 党 50 といったように格納されている場合に、 A 党は赤、B 党は青、C 党は黄と色を割り振って、 値の割合に応じて色をブレンドして１つの色で表現します。\nB 党がもっとも優勢なので、色味としては青が強い色になり、 各政党が拮抗している場合には色彩の弱い色になります。\n以上、６つの方法を紹介してきましたが、 まずはそれぞれの機能を実際に使ってみて表現を確かめてコツをつかんでみてください。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/android/",
	"title": "ArcGIS Runtime SDK for Android",
	"tags": [],
	"description": "ArcGIS Runtime SDK for Android の開発に役立つガイド集です。",
	"content": "ArcGIS Runtime SDK for Android の開発に役立つガイド集です。\n\rインストール ガイド\r初めて ArcGIS Runtime SDK for Android を使用してモバイル マッピング アプリケーションを構築する開発者の方に最も基本的な開発手順を紹介します。\n\r\rアプリケーション配布ガイド\rArcGIS Runtime SDK for Android を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を紹介します。\n\r\rバージョン 10.2.x から 100.x への移行\r今まで ArcGIS Runtime SDK for Android バージョン 10.2.x を使用してアプリケーションを開発されていた開発者向けのガイドです。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-jnsetup/",
	"title": "Jupyter Notebook を使ってみよう",
	"tags": [],
	"description": "ArcGIS API for Python の実行に便利な JupyterLab の初期設定方法と使用方法を簡単に紹介します。",
	"content": " ここでは、対話的に Python コードを実行し、出力を地図やグラフとして視覚化することができる Jupyter Notebook をご紹介します。Jupyter Notebook はオープンソ－スとして公開されている開発ツールのひとつで、ArcGIS API for Python (以下、Python API)はこのツール上でマップ等を表示することができます。 Jupyter Notebook の詳細については、Jupyter の公式マニュアルおよびクイックスタートガイドを参照してください。 また、サポートされているブラウザについてもご確認ください。Jupyter Notebook がサポートしていないブラウザ（Internet Explorer 等）ではマップ等が表示されないことがあります。\nJupyter Notebook の起動 conda と Python API がインストールされたら、Python コマンドプロンプト (ArcGIS Pro 経由でインストールした場合) または、Anaconda Prompt (Anaconda でインストールした場合) 等のターミナル アプリケーションに次のコマンドを入力して Jupyter Notebook を起動します。\njupyter notebook  もし起動できなかった場合は次のコマンドをお試しください (参考: Jupyter fails to start)。\njupyter-notebook  他、Windows OS を実行している場合はコマンド プロンプトまたは PowerShell ウィンドウでも代用できます。以下は、Windows のコマンドプロンプトからコマンドを実行した場合の画面のスクリーンショットです。 Windows のコマンドプロンプトからコマンドを実行した場合\n Python API を root 以外の仮想環境を作成しインストールした場合、Jupyter Notebook を起動する前にその仮想環境をアクティベートする必要があります。root 以外の仮想環境を使用するメリットと仮想環境の作成および管理する方法の詳細については、公式のマニュアルページを参照してください。\nEsri では GitHub 上でサンプルのノートブック (*.ipynb) を公開していますが、こうしたノートブックをダウンロードしてを実行したい場合は、Jupyter Notebook を起動する前に、ノートブックを格納したディレクトリに移動 (cd) する必要があります。 上の例では、ノートブックが C:\\code ディレクトリに配置されています。\nJupyter Notebook 起動のコマンドを実行すると Jupyter Notebook は以下のように端末のデフォルトに設定されている Web ブラウザで開きます。\nJupyert Notebook 起動画面 (Google Chrome)\n このページは、ノートブック ダッシュボードと呼ばれています。\nノートブックを実行する Jupyter Notebookでは、ディレクトリを移動してノートブックをクリックすることでそのノートブックを新しいブラウザのタブまたはウィンドウで開くことができます。各セルを選択し、[セルを実行]ボタン(または shift + Enter)をクリックすることで、各セルを実行できます。以下の画像では、実行までの一通りの手順を示しています。\nノートブックを開いて実行するまで\n セルを実行すると、そのセルのコードを実行している間、左わきにアスタリスク (*) が表示されます。実行が完了するとセル実行番号に変わります。\n新しいノートブックの作成 Esri が提供するサンプルのノートブックを実行するだけでなく、プロジェクト用の新しいノートブックを作成することもできます。 これを行うには、ノートブックダッシュボードから、「New」ボタンをクリックし、以下の画像のように Python のカーネルを選択します。 新しいノートブックを作成する\n 実行中のノートブックの「ファイル」メニューから新しいノートブックを作成することもできます。 上の画像では、現在実行中のノートブックのアイコンが緑色で表示されています。\nJupyter Notebook ヘルプとキーボードショートカット その他、Jupyter Notebook の各機能や使い方は、任意のノートブックを開いて、[Help \u0026gt; User Interface Tour] から体験することができます。 また、便利なキーボード ショートカットも設定されています。ショートカット キーの一覧は、[Help \u0026gt; Keyboard Shortcuts] で表示できます。 ショートカットキー一覧\n\nショートカットの中でも、[Ctrl + Shift + P] はコマンド パレットを表示できるため、特に便利です。コマンド パレットでは、実行したい機能を入力して実行することができます。Jupyter Notebook の使い方については Five Tips To Get You Started With Jupyter Notebook（英語） のブログ記事も参考にしてください。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/webappbuilder/deploy-your-app/",
	"title": "Web アプリケーションのデプロイ",
	"tags": [],
	"description": "Web AppBuilder for ArcGIS (Developer Edition) で作成したアプリケーションをダウンロードし、独自のサーバーにホストする手順を紹介します。",
	"content": " トピック  アプリのダウンロード アプリのデプロイ グループ アクセスの設定 動作環境  Web AppBuilder for ArcGIS (Developer Edition)（以下 Web AppBuilder）で作成したWeb アプリケーション (以下、アプリ) はダウンロードして、独自の Web サーバーにホストすることができます。もしアプリが未共有のアイテムを参照しているとき、ダウンロードしたアプリは ArcGIS Online または Portal for ArcGIS に登録する必要があります。 アプリをデプロイする場所にかかわらず、Web マップへのアクセスは必須です。\nその他のデプロイ パターンについてはデプロイ パターンのページをご覧下さい。\nアプリのダウンロード  Web AppBuilder を起動し、トップページを開いたら、アプリのダウンロードボタンをクリックします。 アプリケーションは ZIP ファイルでダウンロードされます。保存ダイアログが表示されたら、任意のフォルダーを指定し、[保存] をクリックします。これで、アプリケーションはローカル ドライブに保存されます。  アプリのデプロイ  ダウンロードしたアプリを解凍します。 解凍したアプリを Web サーバーへ配置します。 アプリのルート ディレクトリにある config.json ファイルを開き、以下の項目を編集します。  プロキシ\n必要に応じて、使用するプロキシを proxy プロパティに追加します。プロキシの詳細は Use proxy をご参照ください。 アプリケーション ID\nアプリケーション ID を appId プロパティへ設定します。アプリケーション ID を入手するには、アプリの追加、登録が必要です。詳細はアプリの追加およびアプリの登録をご参照ください。 OAuth と SAML を用いたプラットフォーム認証を活用するために、アプリケーション ID を使用することを推奨しています。   アプリをカスタマイズするには、以下のドキュメントを参照してください。\n アプリとウィジェットの設定：App configuration ArcGIS API for JavaScript の変更：ArcGIS API for JavaScript の参照先を変更する（オプション）  グループ アクセスの設定 もしアプリがグループや異なる組織間のメンバーで共有している、パブリックではない Web マップを使用しているとき、すべてのグループのメンバーがWeb マップにアクセスできるように設定します。\n アプリの config.json ファイルを開きます。 portalUrl プロパティの値を www.arcgis.com に変更します。 map プロパティに portalUrl プロパティが含まれている場合は、値を www.arcgis.com に変更します。  動作環境 アプリがサポートしているブラウザーは以下の通りです。\n 2D  Google Chrome Firefox Safari（Mac） Edge Internet Explorer 11\nIE11 または Edge で OAuth 認証を使用してアプリを開くとき、ポップアップが表示されることがあります。はいをクリックすると、ポップアップは消えますが、アプリは読み込まれません。この場合は、ブラウザーの設定から .arcgis.com を信頼済みサイトとして追加してください。 Safari（iOS） Google Chrome（Android）  3D  Google Chrome Firefox Safari（Mac） Edge Internet Explorer 11\n3D アプリには WebGL をサポートしているデスクトップの Web ブラウザーが必要です。ほとんどの最新バージョンのデスクトップ Web ブラウザーは WebGL を内蔵しています。ご利用の Web ブラウザーが WebGL を利用可能かどうかは get.webgl.org で確認できます。WebGL に関するトラブルシューティングは WebGL Troubleshooting をご参照ください。また、シーン ビューアーについての詳細は シーン ビューアーの要件 をご参照ください。   "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/create-app/create-startup-app-ios/",
	"title": "iOS",
	"tags": [],
	"description": "ArcGIS Runtime SDK for iOS を用いたモバイル地図アプリの作成方法を紹介します。",
	"content": " SDK のインストール ArcGIS Runtime SDK for iOS のライブラリをインストールします。\n SDK のダウンロードページ にアクセスします（開発者アカウント でサインインします）。　 ArcGIS Runtime SDK for iOS の箇所の [Download] をクリックして、インストーラーをダウンロードします。  ダウンロードしたインストーラー（.pkg ファイル）を実行して SDK をインストールします。  サンプル プロジェクトのダウンロード このリポジトリ（arcgis-dev-resources）には開発を試してみたい方向けのサンプル コードが含まれています。ダウンロードする際の方法は 2 通りあります。\n リポジトリをご自身のアカウントに Fork（複製）\n GitHub にログインして、arcgis-dev-resources ページを開いて [Fork] をクリックすると、ご自身のアカウントに同じリポジトリが作成されます。\n Fork 後はご自身のローカル マシンにクローンを作成します。\n  zip ファイルでダウンロード（※GitHub アカウントをお持ちでない方向け）\n  arcgis-dev-resources ページを開いて [Download ZIP] をクリックするとプロジェクト ファイル一式が手に入ります。 地図の表示 まずはダウンロードしたサンプル プロジェクトを実行してみましょう。\n ダウンロードしたサンプル プロジェクト（arcgis-dev-resources/startup/ios/100.x/map/sample.xcodeproj）を Xcode で開きます。\n ViewController.swift の 24 行目にある以下のコードの \u0026lt;Web マップ ID\u0026gt; と記載されている箇所に Web マップの作成 で作成した Web マップ ID を上書きします。\nlet portalItem = AGSPortalItem(portal: portal, itemID: \u0026quot;\u0026lt;Web マップ ID\u0026gt;\u0026quot;)  まだ Web マップを作成しておらず、すぐに試してみたい方はサンプル Web マップをご利用ください。　 サンプル プロジェクトを実行すると、以下のように地図が表示されます。 Web マップを表示するには、最初に地図を表示するビュー（AGSMapView クラス）を作成し、作成したビュー上で Web マップを開きます。\n  現在位置の表示 iOS の位置情報サービスと連携し、端末の現在位置を地図上に表示します。  ViewController.swift の viewDidLoad 関数に現在位置を表示する処理を記述します。\n// 位置情報の表示モードを設定（現在位置を中心にマップをズームして表示する） self.mapView.locationDisplay.autoPanMode = .recenter // マップが現在位置にズームされる際の表示縮尺の設定 self.mapView.locationDisplay.initialZoomScale = 100000 // 現在位置の表示を開始 self.mapView.locationDisplay.start(completion: { (error) -\u0026gt; Void in if let error = error { print(\u0026quot;位置情報の取得のエラー:\\(error.localizedDescription)\u0026quot;) } else { print(\u0026quot;位置情報の取得に成功\u0026quot;) } })  プロジェクトを実行すると、以下のように現在位置を表す青い丸のシンボルが地図上に表示されます。\n  シミュレータで実行する場合は、iOS シミュレータの [Debug] → [Location] メニューで設定することで、端末の位置情報を擬似表現できます。\nアプリが起動すると「マップ上での現在位置確認に位置情報サービスを使用します。」と位置情報サービスの使用を確認するメッセージが表示されます。このメッセージはサンプル プロジェクトの Info.plist ファイルの NSLocationWhenInUseUsageDescription プロパティで設定できます。\n位置情報の表示モードには、off（ズームしないで現在位置のシンボルをマップ上に表示する）、recenter（現在位置を中心にマップをズームする）、navigation（現在位置を常にマップの下部に表示して、端末の進行方向によってマップを回転する）、compassNavigation（現在位置を常にマップの中心に表示して、端末の向いている方向によってマップを回転する）の 4 つのモードが用意されています。\nアプリの動作が確認できたら ArcGIS の OAuth 認証について学びましょう！\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/javascript/custom-widget/",
	"title": "ウィジェット開発",
	"tags": [],
	"description": "ウィジェットと呼ばれる、再利用可能な UX コンポーネント作成の基礎を紹介します。",
	"content": " ウィジェットは再利用可能な UI コンポーネントで、リッチな UX を提供する鍵となります。ArcGIS API for JavaScript はすぐに使えるウィジェットを提供しています。また、バージョン 4.2 からは、独自の機能を持つカスタム ウィジェットを作成する基盤を提供します。\nこのガイドは、ウィジェット開発の新しいフレームワークへ移行するときに重視すべきトピックを説明することで、ウィジェット開発の基本を説明します。カスタム ウィジェット作成の基盤は、ウィジェットに実装する機能にかかわらず一貫しています。\nこのフレームワークはすべての Dijit を直接差し替えることを意図していません。例えば、dgrid の利用には Dijit が必要です。\nトピック\n 開発要件 ウィジェット ライフサイクル ウィジェットの実装 TypeScript デコレーター サンプルコード 関連リンク  このガイドはウィジェットのフレームワークの大まかな概要を説明しています。どのようにカスタム ウィジェットを作成するかは、Hello World や Recenter widget のサンプルをご参照ください。\n開発要件 カスタム ウィジェットを作成する前に、開発に必要となる要件を確認してください。要件は、作成するウィジェットにより異なります。以下はウィジェット開発に最低限必要な要件です。\nTypeScript TypeScript は JavaScript のスーパーセットです。TypeScript で書かれたコードは、JavaScript にコンパイルされます。ウィジェット開発には TypeScript を使用することが推奨されています。インターネット上には、TypeScript とは何か、なぜ使われるのか、そしてどのように使うのかを詳細に知ることのできる多数のリソースがあります。これらの基本を理解することで、ウィジェット開発の過程をより簡単に進めることができます。\nJSX JSX は HTML と同じようにウィジェットの UI を表現することができる JavaScript の拡張シンタックスです。JSX は HTML に似ており、JavaScript に埋め込んで使用することができます。\nesri/core/Accessor の理解 Accessor は 4.x の主要な特徴のひとつであり、ウィジェットを含むすべてのクラスの基盤です。どのように動作するのか、使用パターンなどの詳細は Implementing Accessor をご参照ください。\nウィジェット ライフサイクル 開発をはじめる前に、ウィジェット ライフサイクルを理解している必要があります。ウィジェットの種類にかかわらず、ライフサイクル特有の一般的な概念は同じです。\n constructor (params) - プロパティを設定している間に、ウィジェットが最初に作成されるところです。ウィジェットは Accessor から生じるので、get、set、watch を使いプロパティへアクセスできます（get、set、watch の詳細は Working with properties をご参照ください）。 postInitialize() - このメソッドは、ウィジェット作成後、UI の描画前に呼ばれます。 render() - ウィジェット開発で唯一の必須となるメソッドです。UI を描画するために使用されます。 destroy() - ウィジェットのインスタンスを解放するためのメソッドです。  ウィジェットの実装 まず、ベースとなる Widget クラスを拡張することによりウィジェットを作成することからはじめます。\n// 拡張に使用する Widget クラスのインポート import Widget = require(\u0026quot;esri/widgets/Widget\u0026quot;); @subclass(\u0026quot;esri.widgets.HelloWorld\u0026quot;) class HelloWorld extends declared(Widget) { }  次に、ウィジェット特有のプロパティとメソッドを実装します。このコードは、プロパティ作成において、デコレーターをどのように利用するのかを示しています。\n// 'name' プロパティの作成 @property() @renderable() name: string = \u0026quot;John Smith\u0026quot;; // 'emphasized' プロパティの作成 @property() @renderable() emphasized: boolean = false; // プライベートな _onNameUpdate メソッドの作成 private _onNameUpdate(): string { return '${this.name}';}  デフォルトでは、要素の中で参照される関数は、実際の要素を参照する this を持ちます。必要に応じて、this の参照先を変更するために bind 属性を使用します。以下では、name プロパティを更新するときに呼ばれる _onNameUpdate コールバック関数を結び付けています。これは次の postInitialize メソッドに表示されます。\nclass HelloWorld extends declared(Widget) { constructor() { super(); this._onNameUpdate = this._onNameUpdate.bind(this); } }  postInitialize メソッドは、ウィジェットのプロパティは用意されているが、描画される前に呼ばれます。以下のコードは name プロパティを監視しています。プロパティが更新されると、_onNameUpdate コールバック関数を呼びます。watchUtils.init() は WatchHandle オブジェクトを返し、this.own() に渡されます。これは、ウィジェットを削除した時点で、リソースを解放するメソッドです。\npostInitialize() { const handle = watchUtils.init(this, \u0026quot;name\u0026quot;, this._onNameUpdate); // ウィジェットが削除された時点でリソースを解放するメソッド this.own(handle); }  プロパティが実装された後、ウィジェットの UI は JSX を使用して描画されます。これはウィジェットの renderer メソッドに処理されます。\nベースとなる CSS は class 属性に設定されます。class 属性はクラスが変更されないときに使用されます。動的にクラスを変更したいときは、classes を使います。これは、切り替え可能な CSS クラスを表すプロパティを持ったオブジェクトです。CSS クラスは、プロパティの値が true のときに追加され、false のときに削除されます。\n// UI の描画 render() { const classes = { \u0026quot;hello-world-emphasized\u0026quot;: this.emphasized }; return ( \u0026lt;div class = \u0026quot;hello-world\u0026quot; classes={classes}\u0026gt;{this._onNameUpdate()}\u0026lt;/div\u0026gt; ); }  classes と同様に、styles は動的にスタイルを適用することができます。styles のプロパティの値は文字列であることに注意してください。詳細は、Styling トピックをご参照ください。\nrender() { const dynamicStyles = { background-color: this.__hasBackgroundColor ? \u0026quot;chartreuse\u0026quot; : \u0026quot;\u0026quot; }; return ( \u0026lt;div styles={dynamicStyles}\u0026gt;Hello World!\u0026lt;/div\u0026gt; ); }  renderer() メソッドは、ウィジェットを実装するために必要となる唯一の必須メソッドです。\n最後に、this.destroy() を呼びます。このメソッドはウィジェットを削除し、postInitialize() 内で参照されている own() メソッドに登録された、すべてのリソースを解放します。\npostInitialize() { const handle = watchUtils.init(this, \u0026quot;name\u0026quot;, this._onNameUpdate); // ウィジェットが削除された時点でリソースを解放するメソッド this.own(handle); }  TypeScript デコレーター ウィジェット開発は TypeScript のデコレーターを利用します。デコレーターは、設計時に、既にあるプロパティ、メソッド、コンストラクタの中にある共通する振る舞いを定義、変更します。以下は、ウィジェットで使用される、もっとも一般的なデコレーターです。\n@subclass（declared と共に使われます） これらは、4.x のクラスに結びつけられる基本となるデコレーターです。\n以下のコードは esri/widgets/Widget クラスをインポートし、拡張して、renderer メソッド内で UI を定義しています。JSX は UI を定義するために使われています。この例では、div 要素と div 要素内に John Smit が作られます。\nimport Widget = require(\u0026quot;esri/widgets/Widget\u0026quot;); @subclass(\u0026quot;esri.widgets.HelloWorld\u0026quot;) class HelloWorld extends declared(Widget) { render() { return ( \u0026lt;div\u0026gt;John Smith\u0026lt;/div\u0026gt; ); } }  @property() このデコレーターは Accessor プロパティを定義するために使われます。このデコレーターで定義されたプロパティは、get、set、watch を使用できます。\n@property() name: string;  @renderable() このデコレーターは描画をスケジューリングするために使われます。プロパティが修正されたとき、自動的に描画をスケジューリングし、更新します。\n@renderable() name: string;  通常、プロパティを実装するときは、@property() と @renderable() の両方を使います。\n@property() @renderable() name: string;  @aliasOf() このデコレーターはプロパティ エイリアスを定義します。これは、既にあるプロパティが重複しないようにコードを保つために使用されます（例えば ViewModel の内側に既に実装されています）。このガイドで提供するサンプルはこのデコレーターを使っていません。もし、このファイルと関連する HelloWroldViewModel があるとき、この方法を通して直接プロパティへアクセスします。これにより、コードの重複を避けることができます。\n@aliasOf(\u0026quot;viewModel.name\u0026quot;) name: string;  サンプルコード 以下は、このガイドで説明したサンプルコードをまとめたものです。クラスは TypeScript で書かれ、TSX 拡張子で保存されます。TSX 拡張子は、作成するクラスが JSX を使っていることを示しています。\n/// \u0026lt;amd-dependency path=\u0026quot;esri/core/tsSupport/declareExtendsHelper\u0026quot; name=\u0026quot;__extends\u0026quot; /\u0026gt; /// \u0026lt;amd-dependency path=\u0026quot;esri/core/tsSupport/decorateHelper\u0026quot; name=\u0026quot;__decorate\u0026quot; /\u0026gt; // Import decorator modules import {subclass, declared} from \u0026quot;esri/core/accessorSupport/decorators\u0026quot;; // Import decorator module and jsxFactory used for rendering import {renderable, jsxFactory} from \u0026quot;esri/widgets/support/widget\u0026quot;; // Import used to extend off of base Widget class import Widget = require(\u0026quot;esri/widgets/Widget\u0026quot;); @subclass(\u0026quot;esri.widgets.HelloWorld\u0026quot;) class HelloWorld extends declared(Widget) { postInitialize() { const handle = watchUtils.init(this, \u0026quot;name\u0026quot;, this._onNameUpdate); // Helper used for cleaning up resources once the widget is destroyed this.own(handle); } // Create 'name' property @property() @renderable() name: string = \u0026quot;John Smith\u0026quot;; // Create 'emphasized' property @property() @renderable() emphasized: boolean = false; // Create private _onNameUpdate method private _onNameUpdate(): string { return '${this.name}';} // Render the UI render() { const classes = { \u0026quot;hello-world-emphasized\u0026quot;: this.emphasized }; return ( \u0026lt;div class = \u0026quot;hello-world\u0026quot; join={classes}\u0026gt;{this._onNameUpdate()}\u0026lt;/div\u0026gt; ); } } export = HelloWorld;  関連リンク  Widget development（英語） Hello World（英語） Recenter widget（英語） Accessor class（英語） Guide - Working with properties（英語） Implementing Accessor（英語） Recenter sample（英語） Styling（英語） TypeScript（英語） JSX（英語） バージョン 3.x から 4.x への移行 ArcGIS API for JavaScript を利用したウィジェット開発ハンズオン  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/javascript/create-startup-app-js3/",
	"title": "スタートアップ ガイド（3.x）",
	"tags": [],
	"description": "",
	"content": " サンプル プロジェクトのダウンロード このリポジトリ（arcgis-dev-resources）には開発を試してみたい方向けのサンプル コードが含まれています。ダウンロードする際の方法は 2 通りあります。\n リポジトリをご自身のアカウントに Fork（複製）\n GitHub にログインして、arcgis-dev-resources ページを開いて [Fork] をクリックすると、ご自身のアカウントに同じリポジトリが作成されます。 Fork 後はご自身のローカル マシンにクローンを作成します。  zip ファイルでダウンロード（※GitHub アカウントをお持ちでない方向け）\n  arcgis-dev-resources ページを開いて [Download ZIP] をクリックするとプロジェクト ファイル一式が手に入ります。\n地図の表示 まずはダウンロードしたサンプル コードを実行してみましょう。\n ダウンロードしたサンプル コード（arcgis-dev-resources/startup/javascript/3.x/map/index.html）を Web ブラウザーにドラッグ＆ドロップします。 Web サーバーをお持ちの方はサンプル コードを Web サーバーにホストしてアクセスすることを推奨します。http://localhost/arcgis-samples-js/simple/map.html のように localhost を指定してアクセスできます。\n この状態では地図は表示されません。サンプル コードをテキスト エディターで開いてみましょう。\n map.html 29 行目にある以下のコードの \u0026lt;Web マップ ID\u0026gt; と記載されている箇所に Web マップの作成で作成した Web マップ ID を上書きします。\nvar mapDeferred = arcgisUtils.createMap(\u0026quot;\u0026lt;Web マップ ID\u0026gt;\u0026quot;, \u0026quot;mapDiv\u0026quot;);  まだ Web マップを作成しておらず、すぐに試してみたい方はサンプル Web マップをご利用ください。\n Web アプリを実行すると、以下のように地図が表示されます。   検索機能の追加 検索機能の実装方法はいくつかありますが、ここではもっとも簡単な方法をご紹介します。検索機能の実装には esri/dijit/Search モジュール（検索ウィジェット）を使用します。検索ソースにはサンプル Web マップに含まれる東京都 23 区のデータを使用します。\n検索ウィジェットは住所検索/属性検索機能を組み込んだ文字入力フォームの UI を提供します。\n ArcGIS API for JavaScript から使用したいモジュールを追加します。モジュールのインポートは require 関数の第一引数に入力される配列内で行います。配列内に検索機能の実装に必要なモジュールを追加します。\nrequire([\u0026quot;esri/arcgis/utils\u0026quot;, \u0026quot;esri/dijit/Search\u0026quot;, \u0026quot;esri/layers/FeatureLayer\u0026quot;, \u0026quot;esri/InfoTemplate\u0026quot;, \u0026quot;dojo/domReady!\u0026quot;], function(arcgisUtils, Search, FeatureLayer, InfoTemplate) { ... });  以下は検索機能に必要なモジュール一覧です。\n \u0026quot;esri/dijit/Search\u0026quot;: 検索ウィジェット \u0026quot;esri/layers/FeatureLayer\u0026quot;: フィーチャ レイヤー（オプション） \u0026quot;esri/InfoTemplate\u0026quot;: 情報テンプレート（オプション）  フィーチャ レイヤーは検索ソース、情報テンプレートは検索結果の属性表示を設定するために利用します。 ここで以下の点に注意してください。\n 配列の一番最後のモジュールは必ず \u0026quot;dojo/domReady!\u0026quot; になるようにしてください require 関数の第ニ引数の無名関数の引数にはモジュールに対応したクラス名（任意）を定義しますが、これは配列内のモジュールの順序と対応している必要があります  検索ウィジェット用の DOM 要素を作成します。\n\u0026lt;div id=\u0026quot;searchDiv\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  ここで指定した DIV の ID は検索ウィジェットを作成する際に、JavaScript 側で使用します。\n 検索ウィジェットの表示位置を CSS で記述します。\n#searchDiv { display: block; position: absolute; z-index: 2; top: 20px; left: 74px; }  mapDeffered.then の関数内で検索ウィジェット作成のスクリプトを記述します。\nmapDeferred.then(function(response) { map = response.map; var search = new Search({ map: map, sources: [] }, \u0026quot;searchDiv\u0026quot;); });  \u0026quot;esri/dijit/Search\u0026quot; モジュールが定義する Search クラスは require 関数内でのみ動作します。\nマップのオブジェクトは mapDeffered.then の処理完了後の Deferred で取得できます。検索ウィジェットはマップのオブジェクトを使用するため、この位置に記述する必要があります。\n対応するマップを指定するための map プロパティにはマップのオブジェクトを、検索ソースを指定するための sources プロパティには空の配列を定義します。検索ソースがない状態でも ArcGIS のクラウド サービスが提供する住所検索サービスが標準で含まれています。\n 検索ソースに検索対象とするフィーチャ レイヤーを定義します。\nvar sources = search.get(\u0026quot;sources\u0026quot;); sources.push({ featureLayer: new FeatureLayer(\u0026quot;https://services.arcgis.com/wlVTGRSYTzAbjjiC/arcgis/rest/services/tokyo_23/FeatureServer/0\u0026quot;), // 検索ソースとなるフィーチャ レイヤー placeholder: \u0026quot;検索キーワードの入力\u0026quot;, // プレースホルダー enableLabel: false, // 検索結果ラベルの表示 searchFields: [\u0026quot;\u0026lt;フィールド名\u0026gt;\u0026quot;], // 検索対象となる属性フィールド displayField: \u0026quot;\u0026lt;フィールド名\u0026gt;\u0026quot;, // 検索結果のポップアップに表示する属性フィールド outFields: [\u0026quot;*\u0026quot;], // 結果として返す属性フィールド name: \u0026quot;東京都\u0026quot;, // 検索ソースの名前 infoTemplate: new InfoTemplate(\u0026quot;東京都\u0026quot;, \u0026quot;市区町村: ${Name}\u0026quot;), // 検索結果のポップアップ表示構成 enableSuggestions: true // 検索結果の候補リスト表示 }); // 検索ソースを検索ウィジェットに設定 search.set(\u0026quot;sources\u0026quot;, sources); search.startup();  sources.featureLayer には検索ソースとなるレイヤーを定義しますが、必ずしも地図上に表示されているレイヤーを使う必要はありません。サンプルはマップ オブジェクトに存在しない別のレイヤーを検索ソースとして利用します。\nフィールド名の確認は次の手順で紹介します。\n 検索対象とするレイヤーの詳細ページにて、[レイヤー] の項目から対象とするレイヤーをクリックして [サービスの URL] を選択します。  [Fields] という項目にレイヤーのフィールド情報のリストが表示されているので、検索対象とするフィールド名をコピーして searchFields の配列に追加します。 検索結果のポップアップに表示する属性情報として利用したい場合は displayField にも入力してください。\n Web アプリを実行すると、以下のように地図上に検索ウィジェットが表示され、設定した検索ソースでの検索が可能になります。   "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/guide/authentication/",
	"title": "認証",
	"tags": [],
	"description": "開発したアプリを公開するための認証方法について紹介します。",
	"content": "開発したアプリを公開するための認証方法について紹介します。\n\r認証パターン\r有償のサービスやプライベート コンテンツへアクセスするアプリに必要な認証について紹介します。\n\r\rアプリの登録と認証\rArcGIS for Developers サイト上でのアプリ登録と、アプリ登録で付与された情報を用いたアプリの認証方法について紹介します。\n\r\rプロキシ サービスの利用\rWeb アプリ や ネイティブ アプリで秘密鍵の埋め込みをせずにサービスを利用したり、CORS 未対応のサーバーにアクセスする際に必要となるプロキシ サービスについて紹介します。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/ios/",
	"title": "ArcGIS Runtime SDK for iOS",
	"tags": [],
	"description": "ArcGIS Runtime SDK for iOS の開発に役立つガイド集です。",
	"content": "ArcGIS Runtime SDK for iOS の開発に役立つガイド集です。\n\rインストール ガイド\r初めて ArcGIS Runtime SDK for iOS を使用してモバイル マッピング アプリケーションを構築する開発者の方に最も基本的な開発手順を紹介します。\n\r\rアプリケーション配布ガイド\rArcGIS Runtime SDK for iOS を使用して開発したアプリケーションを配布する場合に必要なライセンス認証の手順を紹介します。\n\r\rバージョン 10.2.x から 100.x への移行\r今まで ArcGIS Runtime SDK for iOS バージョン 10.2.x を使用してアプリケーションを開発されていた開発者向けのガイドです。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/javascript/arcade/",
	"title": "Arcade",
	"tags": [],
	"description": "ArcGIS プラットフォーム標準で利用できる条件式のためのスクリプト言語 Arcade について紹介します。",
	"content": " Arcade とは ArcGIS プラットフォームで使用するために作られた軽量でセキュアな条件式のためのスクリプト言語です。 他の一般的な式言語のように、数学的な計算や評価ロジックの命令語を利用できます。 ArcGIS プラットフォームにおける独自のデータ可視化とラベル表現の作成のためにデザインされており、独自の命令語を ArcGIS Pro や ArcGIS Online、ArcGIS Runtime SDK、ArcGIS API for JavaScript で編集・共有・実行することができます。\nArcade が他のスクリプト言語に比べてユニークなのは、ジオメトリ関数を含んでいるところです。 ジオメトリ関数は、面積や長さの計算、トポロジ リレーションシップのテスト、そしてシンプルなオーバーレイの実行を可能にします。 現在のリリースでは、ジオメトリの作成と参照が可能です。 しかし、Arcade バージョン 1.3 で導入されたジオメトリの操作は、4.x 系の ArcGIS API for JavaScript ではサポートされていません。\nArcade バージョン 1.3 で導入されたジオメトリ関数は、4.x 系の ArcGIS API for JavaScript ではサポートされていません。3.x 系の API では、バージョン 3.23 以上で使用できます。将来的には、4.x でのサポートを予定しています。\nシンタックス Arcade のシンタックスは JavaScript ライクに変数の宣言やロジックの実行、関数の記述などができます。 しかし、二つの言語間にはいくつか異なる部分があります。 記述方法の詳細については、Arcade ドキュメント（英語）をご参照ください。 また、ArcGIS Arcade Playground では独自のスクリプトをテスト実行するための環境を提供していますので、アクセスしてみてください。\nArcade には外部データにアクセスするためのグローバル変数が用意されています。 $feature というグローバル変数は、フィーチャ レイヤー内のフィーチャが持つフィールド値にアクセスするために使用します。 以下のシンタックスを使用することでフィールド値を参照できます。\n$feature.fieldName  このように、ランタイムでフィールド値を使用したシンプルな計算を容易に実行できます。\n// 民主党候補者に投票した人の割合（%）を計算 ($feature.DEM_VOTES / $feature.TURNOUT ) * 100  Arcade はコンテクスト内、または Arcade が理解されるプロファイル内でのみ実行可能です。JavaScript アプリでは、式は常に文字列の値として参照されます。Arcade は、シンプルな一行の式、または、より複雑な複数行からなる式として書かれます。\n一行の式を書くとき、シンプルにダブルまたはシングル クォーテーションで囲みます。\nrenderer.valueExpression = \u0026quot;Round( ($feature.AGE_18UP / $feature.TOTAL_POP) * 100 )\u0026quot;;  複数行に渡る式を書くとき、JavaScript の外に \u0026lt;script\u0026gt; タグを分け、タイプを text/plain に設定し、JavaScript から参照できるようユニークな ID を付与して配置することが推奨されます。\n\u0026lt;script type=\u0026quot;text/plain\u0026quot; id=\u0026quot;adult-population\u0026quot;\u0026gt; // 複数行の式を記述 \u0026lt;/script\u0026gt;  そして、JavaScript は、document.getElementById() メソッドを呼ぶことで、文字列として参照します。\nrenderer.valueExpression = document.getElementById(\u0026quot;adult-population\u0026quot;).text;  下記のスニペットや Create a custom visualization using an Arcade expression サンプルを参照ください。\nプロファイル Arcade はいくつかのプロファイルにおける使用のためにデザインされました。プロファイルとは、理解し使用される命令語のコンテクストです。ArcGIS API 4.5 for JavaScript では、ビジュアライゼーション、ポップアップ、ラベリング（3D のみサポート）の３つのプロファイルをサポートしています。3D では、Arcade を使用することにより、フィーチャの標高を計算することも可能です。\nビジュアライゼーション ビジュアライゼーション プロファイルにおいて、Arcade を使ってランタイムで FeatureLayer (フィーチャ レイヤー) あるいは SceneLayer (シーン レイヤー) 内の各フィーチャが持つ値を計算することができます。 また、データドリブンな可視化のための基盤として、それらの値を使用することができます。 これは、レイヤー内の単一フィールド値をもとにしたデータ ビジュアライゼーションを作成するための別のアプローチになります。 これによって、Arcade 命令語は field/normarizationField あるいは JavaScript 関数の代わりに ClassBreaksRenderer (数値分類) や UniqueValueRenderer (個別値分類)、その他の可視化変数 (color, size, opacity, rotation) の valueExpression プロパティに渡されます。\nArcade は FeatureLayer と SceneLayer におけるビジュアライゼーションの作成のみサポートします。 ClassBreaks と UniqueValueRenderer を利用できる他のレイヤー (例えば、MapImageLayer) は Arcade をサポートしていません。\nClassBreaksRenderer あるいはその他の可視化変数を使用する際、命令語は必ず数値を評価してください。 UniqueValueRenderer は文字列と数値のいずれも評価して構いません。\n以下の例では、Arcade 命令語が UniqueValueRenderer の valueExpression プロパティを使用しています。 アメリカの州を表すフィーチャ レイヤーのためにビジュアライゼーションを作成します。 このサービスは各州における共和党、民主党、無所属に対する得票数という 3 つのフィールドを持ちます。 そこで、得票数で勝った党を各州で可視化したいとします。 サービスには優勢な党を示すフィールドが含まれていません。 したがって、Arcade を使ってその党を明らかにしましょう。\n// まず、各フィールドの属性値の参照と変数宣言を記述しています。 // Max() 関数を使って最大数を算出し、 // 最大数を持つ党を判定するために Decode() 関数を使います。 var arcade = \u0026quot;var republican = $feature.MP06025a_B;\u0026quot; + \u0026quot;var democrat = $feature.MP06024a_B;\u0026quot; + \u0026quot;var independent = $feature.MP06026a_B;\u0026quot; + \u0026quot;var parties = [republican, democrat, independent];\u0026quot; // Decode() と Max() は Arcade 組み込みの関数です。 + \u0026quot;Decode( Max(parties),\u0026quot; + \u0026quot; republican, 'republican',\u0026quot; + \u0026quot; democrat, 'democrat',\u0026quot; + \u0026quot; independent, 'independent',\u0026quot; + \u0026quot; 'n/a');\u0026quot;; // `valueExpression` プロパティに Arcade で記述した式を割り当て、 // Decode() で処理された値をもとに個別値の情報を設定します。 var renderer = new UniqueValueRenderer({ valueExpression: arcade, valueExpressionTitle: \u0026quot;Counties by dominant party among registered voters\u0026quot;, uniqueValueInfos: [{ value: \u0026quot;democrat\u0026quot;, symbol: createSymbol(\u0026quot;#00c3ff\u0026quot;), label: \u0026quot;Democrat\u0026quot; }, { value: \u0026quot;republican\u0026quot;, symbol: createSymbol(\u0026quot;#ff002e\u0026quot;), label: \u0026quot;Republican\u0026quot; }, { value: \u0026quot;independent\u0026quot;, symbol: createSymbol(\u0026quot;#faff00\u0026quot;), label: \u0026quot;Independent/non-affiliated\u0026quot; }] });  また、各州における優勢な党の相対的な力を示すために renderer に対して opacity の可視化変数を追加します。 より多くの人々が特定の党に投票している州を高い透過率でし、各党に対する得票数が拮抗している州は低い透過率で描画してみましょう。\n// まず、各フィールドの属性値の参照と変数宣言を記述しています。 // Max() 関数を使って最大数を、 // Sum() 関数ですべての党の得票数の合計値を算出します。 // 合計値に対するもっとも多くの投票を得た党の得票数の割合をパーセントで返します。 var opacityArcade = \u0026quot;var republican = $feature.MP06025a_B;\u0026quot; + \u0026quot;var democrat = $feature.MP06024a_B;\u0026quot; + \u0026quot;var independent = $feature.MP06026a_B;\u0026quot; + \u0026quot;var parties = [republican, democrat, independent];\u0026quot; + \u0026quot;var total = Sum(parties);\u0026quot; + \u0026quot;var max = Max(parties);\u0026quot; + \u0026quot;return (max / total) * 100;\u0026quot;; // `valueExpression` プロパティに Arcade で記述した式を割り当て、 // 返り値であるパーセントに応じて透過率を設定します。 var opacityVV = { type: \u0026quot;opacity\u0026quot;, valueExpression: opacityArcade, stops: [ { value: 33, opacity: 0.1 }, { value: 50, opacity: 1.0 } ] }; // 先に作成したレンダラーに透過率による可視化変数を追加します。 renderer.visualVariables = [ opacityVV ];  実際にビジュアライゼーションを行った結果はサンプル アプリ (Create a custom visualization using Arcade) で確認してみてください。\nポップアップ Arcadeを PopupTmplate のコンテンツ 内で参照することもできます。ビジュアライゼーション プロファイルと同様に、 FeatureLayer インスタンスに属性値として存在しないデータを表示する場合に便利です。 例えば、サンプルアプリ （ Reference Arcade expressions in PopupTemplate ）では、各米国郡の労働統計を含むレイヤーを表示します。いくつかの属性には、失業率、人口、および労働人口が含まれます。労働参加率の属性は含まれていません。 Arcade を使用して、実行時に算出することができます。\n// 労働参加率を計算 Round(($feature.CIVLBFR_CY / $feature.POP_16UP)*100,2)  この式から返された値を使用して、レイヤーを視覚化したり、レイヤーの PopupTmplate に表示したりすることができます。ポップアップで値を表示するには、PopupTmplate の expressioninfo プロパティで値を参照し、 name とtitle を割り当てる必要があります。\nlayer.popupTemplate = {　expressionInfos: [{　name: \u0026quot;participation-rate\u0026quot;,　title: \u0026quot;% of population 16+ participating in the labor force\u0026quot;,　expression: \u0026quot;Round(($feature.CIVLBFR_CY / $feature.POP_16UP)*100,2)\u0026quot;　}],　content: \u0026quot;In {NAME} county, {expression/participation-rate}% of the population\u0026quot;　+ \u0026quot; participates in the labor force.\u0026quot;　};　 式が expressionInfos プロパティに存在すると、 PopupTemplate のコンテンツ内の{expession/expression-name} プレースホルダー テンプレートを使用して式から返された値を参照できます。 ポップアップのコンテンツは、ユーザーが Greenlee , AZ を表現しているフィーチャーをクリックした後に次のように表示されます。\nまた、PopupTmplate　のコンテンツ の fieldinfos　プロパティの中で Arcade から返された値を参照できるため、表形式で表示することもできます。オブジェクトの fieldName プロパティで式の名前を参照するだけです。なお、 expression/expression-name シンタックスを使用してください。\nlayer.popupTemplate = { expressionInfos: [{ name: \u0026quot;participation-rate\u0026quot;, title: \u0026quot;% of population 16+ participating in the labor force\u0026quot;, expression: \u0026quot;Round(($feature.CIVLBFR_CY / $feature.POP_16UP)*100,2)\u0026quot; }], content: [{ type: \u0026quot;fields\u0026quot;, fieldInfos: [{ fieldName: \u0026quot;expression/participation-rate\u0026quot; }] }] };  ポップアップには以下のように表示されます。\nPopupTmplate の fieldinfos プロパティの書式設定オプションを利用して、式から返された数値を書式設定することもできます。 このワークフローはサンプルアプリ（PopupTemplate Reference Arcade）でご覧ください。\nラベリング ラベリングは、現在、3D SceneView のみサポートしています。2D MapView でのラベリングは将来のリリースで追加される予定です。\nArcade は、FeatureLayer または SceneLayer に含まれるフィーチャのラベルの式を作成するためにも使用されます。バージョン 4.5 からは、フィーチャをラベリングするためにサポートされた唯一の方法です。\n少なくともひとつの LabelClass をレイヤーの LabelingInfo プロパティへ追加し、labelsVisible プロパティを true へ設定する必要があります。式は、LabelClass の labelExpressionInfo オブジェクトの expression プロパティへ文字列として渡します。\n// レイヤーのフィールド値を返す // フィールド値は各フィーチャのラベルに使用される var arcade = \u0026quot;$feature.STATION_NAME\u0026quot;; // new LabelClass() の autocast オブジェクト var labelClass = { // 式を labelExpressionInfo の `expression` プロパティに設定する labelExpressionInfo: { expression: arcade }, labelPlacement: \u0026quot;below-right\u0026quot;, minScale: 2500000, symbol: { type: \u0026quot;label-3d\u0026quot;, symbolLayers: [{ type: \u0026quot;text\u0026quot;, material: { color: \u0026quot;white\u0026quot; }, halo: { color: \u0026quot;black\u0026quot;, size: 1 }, size: 8 }] } }; // LabelClass を FeatureLayer へ設定 featureLayer.labelingInfo = [ labelClass ]; featureLayer.labelsVisible = true;  Arcade で書かれたラベル式は、数学的で論理的な操作を実行する複数行に渡るもっと複雑な式になるかもしれません。例えば、Label features using Arcade expressions サンプルは、より複雑な複数行に渡るラベル式を示しています。この式は２つの数値フィールドの値を変数に入れ、評価し、文字列を返します。Arcade の When() は、風向き（0 - 360 度）を評価し、N、NE、E、SE、S、SW、W または NW のいずれかの関連する方角を返します。風力が 0 のとき、方角は返されません。式の最後で、ラベル（WIND 変数の値）を返します。\n\u0026lt;script type=\u0026quot;text/plain\u0026quot; id=\u0026quot;wind-direction\u0026quot;\u0026gt; var DEG = $feature.WIND_DIRECT; var SPEED = $feature.WIND_SPEED; var DIR = When( SPEED == 0, '', (DEG \u0026lt; 22.5 \u0026amp;\u0026amp; DEG \u0026gt;= 0) || DEG \u0026gt; 337.5, 'N', DEG \u0026gt;= 22.5 \u0026amp;\u0026amp; DEG \u0026lt; 67.5, 'NE', DEG \u0026gt;= 67.5 \u0026amp;\u0026amp; DEG \u0026lt; 112.5, 'E', DEG \u0026gt;= 112.5 \u0026amp;\u0026amp; DEG \u0026lt; 157.5, 'SE', DEG \u0026gt;= 157.5 \u0026amp;\u0026amp; DEG \u0026lt; 202.5, 'S', DEG \u0026gt;= 202.5 \u0026amp;\u0026amp; DEG \u0026lt; 247.5, 'SW', DEG \u0026gt;= 247.5 \u0026amp;\u0026amp; DEG \u0026lt; 292.5, 'W', DEG \u0026gt;= 292.5 \u0026amp;\u0026amp; DEG \u0026lt; 337.5, 'NW', '' ); var WIND = SPEED + ' mph ' + DIR; return WIND; \u0026lt;/script\u0026gt;  そのほかにも、テキスト整形のロジックを提供するテキスト関数を含む、ラベリングに役立つ多くの関数が用意されています。詳細は Arcade をご参照ください。\nその他のケース 標高 3D SceneView では、Arcade を使用してフィーチャごとに独自の標高を設定できます。フィーチャは Z 値を持つことができますが、属性値や Z 値を使用した計算式をもとに高さを演算したい場合に有効です。さらに、Z 値を含まないが、属性フィールドに Z 値に関連する情報を持つデータの場合、featureExpressionInfo.expression プロパティに式を設定できます。例として、Elevation options サンプルは Arcade を使用してポイント シンボルの高さがどのように変化するのかを示しています。\nlayer.elevationInfo = { mode: \u0026quot;absolute-height\u0026quot;, featureExpressionInfo: { expression: \u0026quot;Geometry($feature).z + $feature.HEIGHT\u0026quot; }, unit: \u0026quot;meters\u0026quot; };  上記の例では、独自の HEIGHT 属性がジオメトリの Z 値として、グラフィックの標高に設定されます。ラインまたはポリゴン フィーチャにおいて、すべてのフィーチャの頂点は expression の戻り値の標高を持ちます。\nプレイグラウンドでは、入力フィーチャ サービスからインポートしたフィールド値をもとに、ブラウザーから式をビルド、デバッグ、テストできます。Console() 機能を使い、複雑なスクリプトをデバッグすることも可能です。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/python/python-api-jnlabsetup/",
	"title": "Jupyter Lab を使ってみよう",
	"tags": [],
	"description": "ArcGIS API for Python の実行に便利な Jupyter Notebook の基本的な起動と使用方法を簡単に紹介します。",
	"content": " JupyterLab は、コード、データ、そして Jupyter Notebook のファイル形式（*.ipynb）を扱う最新の対話型開発環境（IDE）です。Jupyter Notebook 同様、オープンソースとして公開されています。 ArcGIS API for Python（以下、Python API ）のバージョン 1.5.0 以降で対応しています。\nJupyterLab で GIS データとグラフの操作\n JupyterLab は、より柔軟で強力なユーザー体験を実現するために Jupyter Notebook の主要コンポーネント (ノートブック、ターミナル、テキスト エディター、ファイル ブラウザー、ipywidgets など) をベースに構築されています。JupyterLab の詳細は JupyterLab のブログや GitHub をご参照ください。\nJupyterLab をはじめる Python API を JupyterLab で使用するためには、いくつかインストールなどの設定が必要です。\nインストール  バージョン 1.5.0 以上の Python API をインストールするか、既存の環境を 1.5.0 以上にアップデートする ターゲットの仮想環境がある場合は、アクティベート（activate）してから行います。Python API のインストールまたはアップデートの方法はインストールガイドをご覧ください。\n 次の 2 つのコマンドを実行します\n jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter labextension install arcgis-map-ipywidget@バージョン番号   2 つ目のコマンドの最後にある「バージョン番号」部分は、使用する Python API のバージョンに合わせて変更してください (例：1.6.1)。\nエラー等で正常に完了できない場合は、お使いの端末または現在の環境に npm および nodejs をインストールする必要があります。インストールの詳細は npm のウェブサイト、または node.js のウェブサイトを参照してください。\n\r\\anaconda3\\share\\jupyter\\lab @jupyter-widgets/jupyterlab-manager v0.38.1 enabled ok arcgis-map-ipywidget v1.5.1 enabled ok ``` --  以上の設定が完了したら、次のコマンドで JupyterLab を起動します。  jupyter lab   任意のディレクトリをルート ディレクトリとして起動したい場合は、cd コマンドでディレクトリを移動してから起動コマンドを実行します。\nファイルエクスプローラー JupyterLab は、従来の Jupyter Notebook のように、既存のノートブックを開いたり、新しいノートブックを作成したり、コンテンツを整理するためのファイルエクスプローラを備えています。 JupyterLab のファイルエクスプローラは、メインビューの左側のウィンドウです。\n JupyterLab も Jupyter Notebook と同様に、ノートブック形式（*.ipynb）で動作しコードや結果を保存できます。この 2 つのツールの違いは、主にユーザーインターフェースといくつかの外部エクステンションが追加された点です。\nウィンドウとタブを使用する JupyterLab には、Jupyter Notebook とは違って、「ウィンドウ」と「タブ」という概念があります。 これにより、ノートブックを重ねたり、横に並べたり、タブで整理したりすることができます。これらの操作は、以下のように「タブ」をクリックしてドラッグするだけで可能です。\n どのようなウィンドウでもこのようにドラッグすることが可能です。*.csv、*.json などのファイルも表示や編集することができます。 ### セルの使用 上記のウィンドウとタブと同様に、JupyterLab ではノートブックのセルをドラッグアンドドロップして移動することができます。 JupyterLab は、1 つのノートブックから別のノートブックにセルをドラッグする機能もサポートしています。 移動したいセルの左側の領域をクリックして、それをドラッグします。  JupyterLab では、Shift キーを押しながら複数のセルを選択することもできます。前述のようにこれらのセルを移動するか、右クリックして [Copy Cells] を選択してコピーします。また、右クリックのメニューには、[Create New View For Output] を含む多くのオプションがあります。[Create New View For Output] を使用すると、任意のセルの実行結果を別のタブで表示することができ、重ねたり、並べて表示したりすることができます。  JupyterLab には他にも様々なセルの操作ができるので、いろいろと探してみてください！\nマップ ウィジェットとの連携 バージョン 1.5.0 以上の Python API では、2D 回転、3D モード、3D レンダラーのサポートなどマップ ウィジェットの機能が多数追加されています。これらの機能の詳細については、ガイドページ（米国ESRI ページ）でご紹介しています。このガイドでは、マップ ウィジェットと JupyterLab のシームレスな連携を紹介します。 \nPython API の MapView クラスのデフォルトの表示動作は、Jupyter Notebook と同じで、ウィジェットはセルの出力にマップが表示されます。JupyterLab では、これに加えて以下のようなボタンが表示されます。 \nこのボタンを押すと、ウィジェットが新しいウィンドウで表示されます。 このウィンドウは、他のすべてのウィンドウと同様に、タブでの表示、分割などが可能です。 ウィジェットを元に戻すには、以下のボタンを押します。 \nここからは、実際にコードを試してみましょう。 以下のセルを実行します。\nfrom arcgis.gis import GIS # JupyterLab へ地図を表示する gis = GIS() map = gis.map() map   Web マップ と Web シーン Web マップ、Web シーン の両方とも、このボタンを使用することができます。\nfrom arcgis.mapping import WebMap webmap_item = gis.content.get(\u0026quot;ab42b088573d4253a22a8b38ee698ccd\u0026quot;) webmap = WebMap(webmap_item) webmap  from arcgis.mapping import WebScene webscene_item = gis.content.get(\u0026quot;421433baeb8d487b903d4a89df79149b\u0026quot;) webscene = WebScene(webscene_item) webscene   プログラムによるウィンドウの制御 ここまではこの機能をマウスで実行しましたが、Pythonを使用して制御することもできます。 MapView ウィジェットの各インスタンスには、tab_mode プロパティと toggle_window_view（） メソッドがあります。tab_mode を設定すると、地図ウィジェットの新しいウィンドウへの移動方法が変更されます。 この動作を試すには、以下のコードを実行してみてください。\n# 対象の地図を表示する map = gis.map() map  # コメントをひとつずつオフにして実行し、map で表示している地図の UI ボタンを都度押してみてください。 # map.tab_mode = \u0026quot;split-bottom\u0026quot; # map.tab_mode = \u0026quot;split-right\u0026quot; # map.tab_mode = \u0026quot;auto\u0026quot; # map.tab_mode = \u0026quot;tab-after\u0026quot;   UI ボタンによる新しいウィンドウでの地図表示は、toggle_window_view（） メソッドを使用することでも制御できます。次のコードでは、マップが表示されたらメソッドを使用して新しいウィンドウで表示させます。新しいウィンドウに戻すときも、このメソッドを使用可能です。 以下のコードを実行してみてください。\nfrom arcgis.widgets import MapView # 対象の地図を表示する map = MapView(gis=gis) map  map.toggle_window_view()   タイトル（タブに表示されるテキスト）と tab_mode をメソッドを呼び出すたびに指定することも可能です。\n# 対象の地図を表示する map = gis.map(mode=\u0026quot;3D\u0026quot;) map  # このセルを実行して、新しいウィンドウに地図を表示します map.toggle_window_view(title=\u0026quot;My 3D Map\u0026quot;, tab_mode=\u0026quot;split-top\u0026quot;) # ウィンドウを元に戻す map.toggle_window_view()  import time # このセルを実行して全てのタブモードの挙動を確認してみてください tab_modes = ['auto', 'split-top' 'split-bottom', 'split-left', 'split-right', 'tab-before', 'tab-after'] for tab_mode in tab_modes: # 新しいウィンドウで開く map.toggle_window_view(title=tab_mode, tab_mode=tab_mode) time.sleep(4) # ウィンドウを元に戻す map.toggle_window_view() time.sleep(4)   最後に、3 つ以上の Web シーンを表示すると仮定した表示方法をご紹介します。各マップ ID で構成したリストから、1 度だけ処理を実行し、3 つの　Web シーンを一度にすべて新しいタブに表示します。\n#このセルの内容を1度で実行する from arcgis.gis import GIS from arcgis.widgets import MapView gis = GIS() for webscene_id in ['31874da8a16d45bfbc1273422f772270', '91b46c2b162c48dba264b2190e1dbcff', '46c47340708f446ba7f112f139e8ae5e']: webscene_item = gis.content.get(webscene_id) map = MapView(gis=gis, item=webscene_item, mode=\u0026quot;3D\u0026quot;) map.toggle_window_view(title=webscene_item.title, tab_mode='tab-after')   より詳細な情報は、マップ ウィジェットの API リファレンスを参照してください。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/samples/",
	"title": "サンプル集",
	"tags": [],
	"description": "開発にすぐに使えるサンプル データ/コードを紹介します。",
	"content": " 開発にすぐに使えるサンプル データ/コードを紹介します。\nサンプル データ 開発でサンプルとして利用可能なデータです。以下は抜粋ですので、他のサンプル データを探したい場合は、マップ ビューアーでレイヤー検索してみてください。\n マップ  Web マップ（ArcGIS for Developers 開発ガイドのサンプル Web マップ）  フィーチャ レイヤー  tokyo_23（東京都における東京23区、市部、町村部（郡部）（町村部（島部）以外））  タイル レイヤー  南海トラフ巨大地震の被害想定（震度/最大クラス） 南海トラフ巨大地震の被害想定（液状化/最大クラス）   サンプル コード GitHub にて開発サンプルとなるソースコードを公開しています。\n JavaScript  arcgis-samples-js: ArcGIS API for JavaScript のサンプル集 data-visualization-js: JavaScript で始めるデータ ビジュアライゼーションのサンプル webmap-startup-template-js: Web マップを使用した開発手法を伝えるためのアプリケーション テンプレートのサンプル  .NET  arcgis-samples-dotnet: ArcGIS Runtime SDK for .NET のサンプル集 startup-sample-dotnet: .NET SDK のスタートアップ サンプル アプリケーション webmap-startup-template-dotnet: Web マップを使用した開発手法を伝えるためのアプリケーションのサンプル  Android  arcgis-samples-android: ArcGIS Runtime SDK for Android のサンプル集  iOS  arcgis-samples-ios: ArcGIS Runtime SDK for iOS (Objective-C/Swift) のサンプル集 startup-swift-ios: iOS SDK のスタートアップ サンプル アプリケーション  Python  arcgis-samples-python-api   "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/android/create-startup-app-android10.2/",
	"title": "スタートアップ ガイド（10.2.x）",
	"tags": [],
	"description": "",
	"content": " 開発環境 ArcGIS Runtime SDK for Android は Android Strdio に対応しています。開発環境は Android Studio をご用意ください。\nまたこの後使用するサンプル アプリは ArcGIS Runtime SDK のライブラリを Android Library プロジェクトとして参照する方法を用いています。 ArcGIS Runtime SDK のライブラリをローカル環境にダウンロードしてお使いになりたい方はこちらの The SDK download（英語）手順をご覧ください。\nなお、ArcGIS Runtime SDK を使用するには ArcGIS Online 開発者アカウントが必要です。作成方法は「開発者アカウントの作成」をご参照ください。\nサンプル プロジェクトのダウンロード このリポジトリ（arcgis-dev-resources）には開発を試してみたい方向けのサンプル コードが含まれています。ダウンロードする方法は 2 通りあります。\n リポジトリをご自身のアカウントに Fork（複製）\n GitHub にログインして、arcgis-dev-resources ページを開いて [Fork] をクリックすると、ご自身のアカウントに同じリポジトリが作成されます。 Fork 後はご自身のローカル マシンにクローンを作成します。  zip ファイルでダウンロード（※GitHub アカウントをお持ちでない方向け）\n  arcgis-dev-resources ページを開いて [Download ZIP] をクリックするとプロジェクト ファイル一式が手に入ります。\n地図の表示 まずはダウンロードしたサンプル プロジェクトを実行してみましょう。\n ダウンロードしたサンプル プロジェクト（arcgis-dev-resources/startup/android/map）を Android Studio で開きます。\n MainActivity.java の 30 行目の \u0026lt;Web マップ ID\u0026gt; と記載されている箇所に Web マップの作成で作成した Web マップ ID を上書きします。32 行目の以下のコードでは、上で設定した Web マップ ID を含んだ WebMap の URL を MapView へ受け渡しています。\nmapView = new MapView(this, webmapUrl, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;);   まだ Web マップを作成しておらず、すぐに試してみたい方はサンプル Web マップをご利用ください。\n サンプル プロジェクトを実行すると、以下のように地図が表示されます。  Web マップを表示するには、最初に地図を表示するビュー（MapView クラス）を作成し、作成したビュー上で Web マップを開きます。\n現在位置の表示 Android の位置情報サービスと連携し、端末の現在位置を地図上に表示します。\nでは以下に倣ってソース コードを修正・追加してみてください。\n 現在位置の変化を受け取るための LocationListner を実装します。今回はすでに実装してあるコードを有効化します。 MainActivity.java の 41 行目から 70 行目までのコメント化されたコードをコメント解除してください。（コメント解除したい範囲を選択して Ctrl + / を押下） ```java // LocationListner を実装 private class MyLocationListener implements LocationListener {\npublic MyLocationListener() { super(); } Point mLocation = null; SpatialReference wm = SpatialReference.create(102100); SpatialReference egs = SpatialReference.create(4326);\npublic void onLocationChanged(Location loc) { if (loc == null) return; // 現在位置を取得する mLocation = new Point(loc.getLongitude(), loc.getLatitude()); Point point = (Point) GeometryEngine.project(mLocation, egs, wm); // 表示縮尺を設定して現在位置へズーム mapView.zoomToResolution(point, 20.0); }\npublic void onProviderDisabled(String provider) { }\npublic void onProviderEnabled(String provider) { }\npublic void onStatusChanged(String provider, int status, Bundle extras) { }\n  }\n この中で現在位置を取得しています。 1. `onCreate` メソッド（38 行目）へ以下のコードを追加します。 ```java // MapView 上に現在位置を表示するために LocationDisplayManager を取得 LocationDisplayManager locationDisplayManager; locationDisplayManager = mapView.getLocationDisplayManager(); // LocationDisplayManager に LocationListner を設定 locationDisplayManager.setLocationListener(new MyLocationListener()); // 現在位置を中央にして地図を表示する設定 locationDisplayManager.setAutoPanMode(LocationDisplayManager.AutoPanMode.LOCATION); // 現在位置の表示を開始 locationDisplayManager.start();   プロジェクトを実行すると、以下のように現在位置を表す青い丸のシンボルが地図上に表示されます。   エミュレータで実行する場合は以下の要領で位置情報を疑似的に有効にします。 2. Android Studio の [Tools] → [Android] → [Android Device Monitor] を選択し、Android Device Monitor を起動します。 2. 左側の Devices タブで該当のエミュレータ名をクリックして選択し、右側の Emulator Control タブをクリックします。 2. 下の方に Location Controls というセクションがあるので、その中の Manual タブを選択します。 2. Longitude（経度）とLatitude（緯度）へ任意の値を入力します。\nアプリの動作が確認できたら ArcGIS の OAuth 認証について学びましょう！\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/dotnet/create-startup-app-dotnet10.2/",
	"title": "スタートアップ ガイド（10.2.x）",
	"tags": [],
	"description": "",
	"content": " ﻿## 開発環境\nArcGIS Runtime SDK for .NET を使用した開発には、Visual Studio が必要です。\nまた、この後使用するサンプル アプリは ArcGIS Runtime SDK のライブラリを Nuget パッケージとして参照する方法を用いています。 ArcGIS Runtime SDK のライブラリをローカル環境にダウンロードしてお使いになりたい方は ローカル環境にダウンロードしてお使いになりたい方は ドキュメント ダウンロードのページにあるインストール ガイドをご覧ください。\nなお、ArcGIS Runtime SDK を使用するには ArcGIS Online 開発者アカウントが必要です。作成方法は「開発者アカウントの作成」をご参照ください。\nサンプル プロジェクトのダウンロード このリポジトリ（arcgis-dev-resources）には開発を試してみたい方向けのサンプル コードが含まれています。ダウンロードする際の方法は 2 通りあります。\n リポジトリをご自身のアカウントに Fork（複製）\n GitHub にログインして、arcgis-dev-resources ページを開いて [Fork] をクリックすると、ご自身のアカウントに同じリポジトリが作成されます。 Fork 後はご自身のローカル マシンにクローンを作成します。  zip ファイルでダウンロード（※GitHub アカウントをお持ちでない方向け）\n  arcgis-dev-resources ページを開いて [Download ZIP] をクリックするとプロジェクト ファイル一式が手に入ります。\n既知の制限 既知の問題により、ソリューションを正しくデバッグ実行するには、ソリューションのクローンもしくはダウンロード先のディレクトリパスに日本語などの 2 バイト文字を含めないでください（※ ArcGIS Runtime SDK for .NET を別途ご使用のマシンにインストールする場合は、この制限事項は適用されません）。\n地図の表示 まずはダウンロードしたサンプル プロジェクトを実行してみましょう。\n ダウンロードしたサンプル プロジェクト（arcgis-dev-resources/startup/dotnet/map/sample.sln）を Visual Studio で開きます。\n mainWindow.xaml.cs の 54 行目にある以下のコードの \u0026lt;Web マップ ID\u0026gt; と記載されている箇所に Web マップの作成で作成した Web マップ ID を上書きします。\n  var item = await ArcGISPortalItem.CreateAsync(portal, \u0026quot;Web マップ ID\u0026quot;);  まだ Web マップを作成しておらず、すぐに試してみたい方はサンプル Web マップをご利用ください。\n サンプル プロジェクトを実行すると、以下のように地図が表示されます。  Web マップを表示するには、ポータル サイトから指定した ID を持つ Web マップを取得し、MapView のマップとして表示します。\n住所検索機能の追加 ArcGIS Online のジオコーディング サービスを利用した住所検索機能を追加します。[検索] ボタンをクリックすることで、テキスト ボックス内の文字列を使用して、住所検索を行うサンプルです。\n MainWindow.xaml.cs に住所検索機能で使用する以下のメンバー変数を定義します。\n WORLD_GEOCODE_SERVICE_URL\nArcGIS Online のジオコーディング サービスの URL です。ArcGIS for Developers の開発者はこのクラウド サービスを利用して住所検索を実行することができます。\n onlineLocatorTask\n住所検索を実行するための OnlineLocatorTask クラスです。\n   //ArcGIS Online ジオコーディングサービスの URL private const string WORLD_GEOCODE_SERVICE_URL = \u0026quot;http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer\u0026quot;; //住所検索用のジオコーディング タスク private OnlineLocatorTask onlineLocatorTask;   コンストラクター内でメンバー変数として定義した OnlineLocatorTask クラスを初期化します。初期化時のパラメーターとして ArcGIS Online のジオコーディング サービスの URL を指定します。OnlineLocatorTask クラスが住所検索のリクエストを発行する際にこの URL が使用されます。  /// \u0026lt;summary\u0026gt; /// コンストラクタ /// \u0026lt;/summary\u0026gt; public MainWindow() { InitializeComponent(); //住所検索用のジオコーディング タスクを初期化 onlineLocatorTask = new OnlineLocatorTask(new Uri(WORLD_GEOCODE_SERVICE_URL)); }   住所検索に使用する検索文字列などを指定する住所検索パラメーターを作成します。パラメーターの作成には OnlineLocatorFindParameters クラスを使用します。\n//住所検索用のパラメータを作成 OnlineLocatorFindParameters parameters = new OnlineLocatorFindParameters(addressTextBox.Text) { MaxLocations = 5, OutSpatialReference = SpatialReferences.WebMercator, OutFields = OutFields.All };  OnlineLocatorTask クラスの FindAsync 非同期メソッドを使用して住所検索を実行します。パラメーターとして事前に作成した住所検索パラメーターを指定しています。\n  //住所の検索 IList\u0026lt;LocatorFindResult\u0026gt; resultCandidates = await onlineLocatorTask.FindAsync(parameters, CancellationToken.None);   住所検索を実行し結果の取得に成功したら、検索結果に対して地図上に表示するなどの何らかの処理を実行します。サンプル アプリケーションでは、ジオコーディング サービスから返された検索結果候補の一番最初の検索結果候補（最も一致していると思われる検索結果）を地図上に拡大表示します。 ```C# //常に最初の候補を採用\nLocatorFindResult candidate = resultCandidates.FirstOrDefault();\n  //最初の候補からグラフィックを作成\nGraphic locatedPoint = new Graphic() { Geometry = candidate.Feature.Geometry };\n//住所検索結果表示用のグラフィックスオーバーレイにグラフィックを追加\ngeocodeResultGraphicsLayer.Graphics.Add(locatedPoint);\n//追加したグラフィックの周辺に地図を拡大\nawait mainMapView.SetViewAsync((MapPoint)locatedPoint.Geometry, 36112);\n``` アプリの動作が確認できたら ArcGIS の OAuth 認証について学びましょう！\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/ios/create-startup-app-ios10.2/",
	"title": "スタートアップ ガイド（10.2.x）",
	"tags": [],
	"description": "",
	"content": " SDK のインストール ArcGIS Runtime SDK for iOS のライブラリをインストールします。\n SDK のダウンロードページ にアクセスします（開発者アカウント でサインインします）。 ArcGIS Runtime SDK for iOS の箇所の [Download] をクリックして、インストーラーをダウンロードします。  ダウンロードしたインストーラー（.pkg ファイル）を実行して SDK をインストールします。  サンプル プロジェクトのダウンロード このリポジトリ（arcgis-dev-resources）には開発を試してみたい方向けのサンプル コードが含まれています。ダウンロードする際の方法は 2 通りあります。\n リポジトリをご自身のアカウントに Fork（複製）\n GitHub にログインして、arcgis-dev-resources ページを開いて [Fork] をクリックすると、ご自身のアカウントに同じリポジトリが作成されます。 Fork 後はご自身のローカル マシンにクローンを作成します。  zip ファイルでダウンロード（※GitHub アカウントをお持ちでない方向け）\n  arcgis-dev-resources ページを開いて [Download ZIP] をクリックするとプロジェクト ファイル一式が手に入ります。\n地図の表示 まずはダウンロードしたサンプル プロジェクトを実行してみましょう。\n ダウンロードしたサンプル プロジェクト（arcgis-dev-resources/startup/ios/map/sample.xcodeproj）を Xcode で開きます。 ViewController.swift の 24 行目にある以下のコードの \u0026lt;Web マップ ID\u0026gt; と記載されている箇所に Web マップの作成 で作成した Web マップ ID を上書きします。\nwebmap = AGSWebMap(itemId: \u0026quot;\u0026lt;Web マップ ID\u0026gt;\u0026quot;, credential: nil)  まだ Web マップを作成しておらず、すぐに試してみたい方はサンプル Web マップをご利用ください。\n サンプル プロジェクトを実行すると、以下のように地図が表示されます。 Web マップを表示するには、最初に地図を表示するビュー（AGSMapView クラス）を作成し、作成したビュー上で Web マップを開きます。\n  現在位置の表示 iOS の位置情報サービスと連携し、端末の現在位置を地図上に表示します。  地図の読み込みが完了したイベントをハンドリングするために、デリゲート プロトコル(AGSMapViewLayerDelegate) を宣言します。ViewController.swift の 13 行目を以下のコードに置き換えます。\n// デリゲート プロトコルの宣言 class ViewController: UIViewController, AGSMapViewLayerDelegate {  地図の読み込みのデリゲートを自身に設定します。viewDidLoad() 関数の最後に以下のコードを追加します。\n// AGSMapView のデリゲートを自身に設定 mapView.layerDelegate = self  地図の読み込み完了時に実行されるデリゲート メソッド内に現在位置を表示する処理を記述します。ViewController.swift に以下のコードを記述します。\n// AGSMapView のデリゲート メソッド（地図の読み込み完了時に実行） func mapViewDidLoad(_ mapView: AGSMapView!) { // 位置情報の表示モードを設定 mapView.locationDisplay.autoPanMode = .default // 地図が現在位置にズームされる際の表示縮尺の設定 mapView.locationDisplay.zoomScale = 100000 // 現在位置の表示を開始 mapView.locationDisplay.startDataSource() }  プロジェクトを実行すると、以下のように現在位置を表す青い丸のシンボルが地図上に表示されます。 位置情報の表示モードについてはナビゲーションに便利な位置情報の表示モードをご覧ください。   シミュレータで実行する場合は、iOS シミュレータの [Debug] → [Location] メニューで設定することで、端末の位置情報を擬似表現できます。\nアプリが起動すると「マップ上での現在位置確認に位置情報サービスを使用します。」と位置情報サービスの使用を確認するメッセージが表示されます。このメッセージはサンプル プロジェクトの Info.plist ファイルの NSLocationWhenInUseUsageDescription プロパティで設定できます。\nアプリの動作が確認できたら ArcGIS の OAuth 認証について学びましょう！\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/visualization/data-visualization-procedure-3d/",
	"title": "データ可視化の手順（3D）",
	"tags": [],
	"description": "",
	"content": " ArcGIS Online が提供するシーン ビューアーを使用して、3D マップにデータを可視化する方法を紹介します。\n 3D マップを作成したい シンボルを変更したい 高さを表現したい  3D マップを作成したい シーン ビューアー → [新しいシーン] → [レイヤーの追加] → [シーンの保存]\nArcGIS Online などに公開されている Web サービスを、レイヤーとしてマップに追加し、様々なレイヤーを組み合わせて 3D マップを作成することができます。3D マップの保存には、コンテンツを作成する権限が必要です（権限を持っていない場合でも 3D マップは作成できますが、保存することはできません）。\n シーン ビューアーを開きます。シーン ビューアーを開いた時点でベースとなる背景地図(ベースマップ)は自動的に表示されます。\n [レイヤーの追加] をクリックします。\n [レイヤーの検索]、[レイヤー URL の入力] いずれかのレイヤーの追加方法を選択します。\n  それぞれのレイヤー追加方法は、以下の通りです。\nレイヤーの検索  [レイヤーの検索] ボックスにキーワードを入力し、[検索] をクリックします。\n 検索結果は下部のボックス内に表示され、[追加] をクリックします。\n [完了] をクリックし、レイヤーの追加を終了します。\n  レイヤー URL の入力 URL を指定して、ArcGIS Server Web サービスのレイヤーを追加することができます。\nシンボルを変更したい シーン ビューアー → [レイヤー] → [レイヤーの構成] → [スタイル]\nシンボルの色や形を変更します。コンテンツを作成する権限を持っている場合に可能です。\nシンボルを変更できるのは、フィーチャ レイヤーまたはシーン レイヤーです。\n シーン ビューアーの [レイヤー] が表示されていることを確認し、シンボルを変更したいレイヤーをクリックします。\n [レイヤーの構成] が表示されます。レイヤーの種類により、設定できるシンボルが異なります。\n  フィーチャ レイヤー（ポイント）のシンボル設定  [①表示するメイン属性を選択] ドロップダウン リストから、シンボルの設定を行う属性フィールドを選択します。\n属性値でシンボル設定をしない場合は、[\u0026lt;なし\u0026gt;] を選択します。\n [②描画スタイルを選択] で、変更したい描画方法の [選択] をクリックします。既に選択されている描画スタイルは [オプション] と表示されます。\n2D マーカー / 3D オブジェクト すべてのフィーチャを同じシンボルで表現します。\n2D タイプ / 3D タイプ 樹木の種類、道路クラス、都道府県名など、属性のカテゴリごとにシンボルを割り当てて描画します。\n2D 数と量/ 3D 数と量 数値データをシンボルの色や大きさ、高さで表現します。データの数値が大きいほど、シンボルは大きく、高く表示されます。 ※レイヤーが持つ属性フィールドのタイプに応じて選択できる種類が異なります。例えば、文字列型のフィールドのみで構成されるレイヤーでは、[種類] ドロップダウン リストでサイズや色の指定はできません。\n  フィーチャ レイヤー（ライン/ポリゴン）のシンボル設定  [シンボル] ドロップダウン リストから [シンボルの変更] を選択します。\n シンボルのタイプ（2D または 3D）、大きさ/高さ、色を設定します。\n  シーン レイヤーのシンボル設定  [①表示するメイン属性を選択] ドロップダウン リストから、シンボルの設定を行う属性フィールドを選択します。\n属性値でシンボル設定をしない場合は、[\u0026lt;なし\u0026gt;] を選択します。\n [②描画スタイルを選択] で、変更したい描画方法の [選択] をクリックします。既に選択されている描画スタイルは [オプション] と表示されます。\n色 すべてのフィーチャを同じシンボルで表現します。\nタイプ 樹木の種類、道路クラス、都道府県名など、属性のカテゴリごとにシンボルを割り当てて描画します。\n数と量 数値データをシンボルの色で表現します。 ※レイヤーが持つ属性フィールドのタイプに応じて選択できる種類が異なります。例えば、文字列型のフィールドのみで構成されるレイヤーでは、[種類] ドロップダウン リストでサイズや色の指定はできません。\n [オプション] をクリックすると、シンボルの詳細な設定をすることができます。\n2D マーカー / 3D オブジェクトの場合 [シンボル] - あらかじめ用意されているシンボルから形状を選択します。\n[色] - シンボルの色を選択します。\n[サイズ] - 大きさを設定します。固定値のほかに属性値をもとに大きさを指定することもできます。\n[回転] - 属性値をもとに回転の角度を設定します。\n2D タイプ / 3D タイプの場合 表からスタイルを変更したい値を選択し、[シンボル]、[色]、[サイズ] を設定します。\n属性値をもとに、すべてのシンボルのサイズと回転を指定することも可能です。\n2D 数と量/ 3D 数と量 [スライダー] - スライダーの上部、下部のバーを動かして、最大 / 最小クラスの閾値を変更できます。また、数値をクリックして、直接入力することもできます。\n[シンボル] - あらかじめ用意されているシンボルから形状を選択します。\n[色] - 色のパターンなどを変更します。\n[サイズ] - 最大 / 最小クラスに設定した値の大きさを設定します。\n[回転] - 属性値をもとに回転の角度を設定します。\n色の場合 [テクスチャ] - テクスチャのタイプを選択します。\n[色] - シンボルの色を選択します。\nタイプの場合 表からスタイルを変更したい値を選択し、[テクスチャ]、[色] を設定します。\n数と量の場合 [スライダー] - スライダーの上部、下部のバーを動かして、最大 / 最小クラスの閾値を変更できます。また、数値をクリックして、直接入力することもできます。\n[色] - 色のパターンなどを変更します。\n 設定後、各パネルにおいて [完了] をクリックします。\n  高さを表現したい シーン ビューアー → [レイヤー] → [レイヤーの構成] → [標高モード] レイヤーに含まれる Z 値や、オフセットを定義して、グラフィックの高さを表現することができます。\n シーン ビューアーの [レイヤー] が表示されていることを確認し、高さを表現したいレイヤーをクリックします。 [レイヤーの構成] が表示されます。 [標高モード] でモードを選択し、必要に応じてオフセットを設定します。\n  標高モード 地表 グラフィックは、地表を覆うように配置されます。\nグラフィックに含まれる Z 値は無視されます。また、オフセットを設定することはできません。\n地面を基準 グラフィックは、地面を基準にした高さに配置されます。\nグラフィックに Z 値が含まれる場合、Z 値を使用して高さは表現されます。\nシーンを基準 グラフィックは、シーンを基準にした高さに配置されます。\nグラフィックに含まれる Z 値は無視されます。\n絶対高度 グラフィックは、測地系を基準にした高さに配置されます。\n絶対高度は、各グラフィックの Z 値により決まります。[地面を基準] と似ていますが、[絶対高度] は地表の高さを無視します。\n※レイヤーの種類により、選択できるモードが異なります。例えば、シーン レイヤーでは、[絶対高度] 以外のモードは指定はできません。\nオフセット オフセットは、すべてのグラフィックに高さを加えます。例えば、オフセットに 100 メートルを設定した場合、グラフィックは現在の高さから 100 メートル上に表示されます。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/python/",
	"title": "ArcGIS API for Python",
	"tags": [],
	"description": "ArcGIS API for Python の開発に役立つガイド集です。",
	"content": "ArcGIS API for Python の開発に役立つガイド集です。\n\rArcGIS API for Python のコンセプト\rArcGIS API for Python のプロダクト コンセプトと動作要件について紹介します。\n\r\rArcGIS API for Python のための基礎環境：conda入門\rconda の基本について簡単に紹介します。\n\r\rインストール ガイド\rArcGIS API for Python の環境構築方法を紹介します。\n\r\rJupyter Notebook を使ってみよう\rArcGIS API for Python の実行に便利な JupyterLab の初期設定方法と使用方法を簡単に紹介します。\n\r\rJupyter Lab を使ってみよう\rArcGIS API for Python の実行に便利な Jupyter Notebook の基本的な起動と使用方法を簡単に紹介します。\n\r\rスクリプト実行の自動化\rタスクスケジューラや cron を使用した Python スクリプトの実行の自動化について紹介します。\n\r\rmatplotlib での日本語利用について\rArcGIS API for Python で利用されているグラフ描画ライブラリの matplotlib で日本語を使う方法を説明します。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/javascript/custom-font/",
	"title": "カスタム フォント",
	"tags": [],
	"description": "独自のフォントを使用する手順を紹介します。",
	"content": " ArcGIS API for JavaScirpt のバージョン 4.10 以降、MapView 上のフィーチャ レイヤーのラベルやテキスト シンボルで使用するフォントは、pbf (Protocolbuffer Binary Format) で配信する必要があります。 デフォルトでは、pbf フォントは Esri が https://static.arcgis.com/fonts でホストしているフォントを使用できます。 利用可能なフォントの一覧は、Esri のガイドで確認できます（\u0026rdquo;Read more\u0026rdquo; をクリックしてページを展開してください）。\nデフォルトで提供されていないフォントを使用したい場合は、自身で pbf フォントを作成し Web サーバーで配信することで、API から使用することができます。このガイドでは ArcGSI API for JavaScript バージョン 4.x で独自のフォントを使用する手順を紹介します。\n※ 本ガイドでご紹介する手順に関しては ESRIジャパンの技術サポート サービスの対象外となります。予めご了承ください。また、フォントの変換・配置を行う場合は、利用されるフォントの利用規約を予めご確認ください。\nフォントの入手 今回は、Google フォント からダウンロードして PBF に変換します。\npbf フォントの作成 pbf ファイルは符号付き距離フィールドのセットとして以下の URL で配信する必要があります。これは MapBox GL JS のスタイル仕様と同じです。\nhttps://fonts/\u0026lt;フォントスタック\u0026gt;/\u0026lt;ユニコード文字範囲\u0026gt;.pbf\npbf ファイルは node-fontnik を使用して、ttf や otf 等のフォントファイルから変換して作成できます。\n node-fontnik をクローンします。  git clone https://github.com/mapbox/node-fontnik.git  node-fontnik フォルダに移動して、モジュールをインストールします。  npm install  fonts フォルダを作成し、作成したフォルダにダウンロードした Google フォントを配置します。 glyphs フォルダと変換後のファイルを出力するサブフォルダ（例: glyphs/KosugiMaru-Regular）を作成します。 build-glyphs を実行して pbf ファイルを作成します。  node-fontnik/bin/build-glyphs fonts/KosugiMaru-Regular.ttf glyphs/KosugiMaru-Regular  glyphs/KosugiMaru-Regular フォルダにユニコード文字範囲の pdf ファイル群が作成されていることを確認します。  PBF フォントの配置 以下のディレクトリ構成にして Web サーバーへ配置します。 IIS を使用する場合は、MIME に .pbf (binary/octet-stream) を登録します。\n「fonts」 フォルダ\n|\u0026ndash;「\u0026lt;フォントファミリー\u0026gt;-\u0026lt;ウェイト\u0026gt;-\u0026lt;スタイル\u0026gt;」フォルダ（例：arial-bold-italic） ※\n|\u0026ndash; pbf ファイル群\n※ \u0026lt;スタイル\u0026gt; は省略可能です。今回は「KosugiMaru-Regular」フォルダを作成します。 詳細は「API の設定」の項目を参照してください。\nAPI の設定  ArcGIS API for JavaScript で参照するフォント リソースの URL を変更します。 フォントの URL の設定は、esri/config クラスの fontsUrl プロパティを使用します。\n マップに表示するフォントを作成します。 フォントの作成は Font クラスを使用します。 family、weight、style の各プロパティに設定した値をもとに設定したフォント URL へリクエストが実行されます。 例えば、family に \u0026ldquo;arial\u0026rdquo;、weight に \u0026ldquo;bold\u0026rdquo;、style に \u0026ldquo;italic\u0026rdquo; を設定した場合は、https://\u0026lt;サーバー名\u0026gt;/fonts/arial-bold-italic フォルダにある pbf ファイルを取得します。 フォントに複数スタイルが存在しない場合は style プロパティは省略可能です。 また、weight プロパティも省略可能ですが、API で指定しない場合は regular が自動で設定され、https://\u0026lt;サーバー名\u0026gt;/fonts/arial-regular がリクエストされます。\n  以下は作成した pbf フォントをテキスト シンボルで表示した画面とサンプルコードです。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot; /\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;initial-scale=1,maximum-scale=1,user-scalable=no\u0026quot;/\u0026gt; \u0026lt;title\u0026gt;font_mapView\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://js.arcgis.com/4.11/esri/themes/light/main.css\u0026quot; /\u0026gt; \u0026lt;style\u0026gt; html, body, #viewDiv { padding: 0; margin: 0; height: 100%; width: 100%; background-color: black; } \u0026lt;/style\u0026gt; \u0026lt;script src=\u0026quot;https://js.arcgis.com/4.11/\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; require([ \u0026quot;esri/Map\u0026quot;, \u0026quot;esri/views/MapView\u0026quot;, \u0026quot;esri/Graphic\u0026quot;, \u0026quot;esri/config\u0026quot; ], function(Map, MapView, Graphic, esriConfig) { // .pbfファイルを独自に配信するURL esriConfig.fontsUrl = \u0026quot;http://\u0026lt;サーバー名\u0026gt;/fonts\u0026quot;; // テキストシンボルの作成 var textSymbol = { type: \u0026quot;text\u0026quot;, color: \u0026quot;white\u0026quot;, text: \u0026quot;KosugiMaru フォントです\u0026quot;, // 表示する文字列 font: { size: 15, family: 'KosugiMaru' // フォントファミリー } }; var point = { type: \u0026quot;point\u0026quot;, longitude: 139.751068, latitude: 35.684482 }; var pointGraphic = new Graphic({ geometry: point, symbol: textSymbol }); var map = new Map({ basemap: \u0026quot;dark-gray-vector\u0026quot; }); const view = new MapView({ container: \u0026quot;viewDiv\u0026quot;, map: map, center: [139.751068, 35.684482], zoom: 12 }); view.graphics.add(pointGraphic); }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;viewDiv\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/python/automate-tasks/",
	"title": "スクリプト実行の自動化",
	"tags": [],
	"description": "タスクスケジューラや cron を使用した Python スクリプトの実行の自動化について紹介します。",
	"content": " ArcGIS API for Python や ArcPy は、タスク スケジューラなどと組み合わせることで、様々な GIS タスクの実行を自動化することが可能です。\nここでは、例として以下のようなディレクトリ構成で実行する Python スクリプトを作成したと想定し、そのスクリプトを Windows 及び Linux で 30 分ごとに無期限で定期実行する方法を紹介します。\npy-script/\n├ config.ini\n└ task.py\ntask.py は実行する Python スクリプト、config.ini は task.py の実行に必要なパラメータを記載した設定ファイルとします。\nWindows のタスク スケジューラを使用する場合 Windows ではタスク スケジューラを使用することでプログラムやスクリプトを決められた時間や一定の間隔で実行することができます。\nタスク スケジューラは以下の手順で設定します。\n タスク スケジューラを開く\n スタート メニューからタスク スケジューラを検索して開く   右側の [操作] ペインから [タスクの作成] をクリック\n 新規タスクを作成するウィザードが開きます   [全般] タブ内のパラメーターを設定する\n 名前：タスクの名前 説明：タスクの説明を記載 セキュリティ オプション：  タスク実行時に使う Windows のユーザーアカウントを指定 [ユーザーがログオンしているかどうかにかかわらず実行する] をクリック [最上位の特権で実行する] にチェックを入れる  [構成] は使用している Windows のバージョンに合わせる (今回は Windows 10)   [トリガー] タブ内のパラメーターを設定する\n [新規] をクリックし、新しいトリガーを作成 [タスクの開始] は [スケジュールに従う] をドロップダウンから選択 任意の開始時間を指定 [繰り返し間隔] にチェックを入れ、30分間を指定 [継続時間] は [無期限] を指定   [操作] タブのパラメーターを設定する\n [操作] のドロップダウンから [プログラムの開始] を選択 [プログラム/スクリプト] で実行する Python の エグゼキュータブル ファイルのパスを指定  上の画像では ArcGIS Pro の Python パッケージ マネージャー で作成した環境の Python を指定しています。 パスが不明な場合、実行したい環境で ArcGIS Pro を起動し、Python ウィンドウを表示させて以下のコードを実行することで確認することができます。  import sys sys.executable   [引数の追加 (オプション)] で実行する Python スクリプトのファイル名を指定 [開始 (オプション)] で Python スクリプトが格納されているディレクトリを指定    指定するパス等にスペースが含まれている場合はダブル クォーテーションで囲んでください。\nまた半角括弧 () が含まれるパスを指定すると正常に動作しないため、ディレクトリ名などを変更してください\n\r OK ボタンをクリックし、要求された場合はユーザーアカウント情報を入力  Linux の cron を使用する場合 Linux で特定のタスクを定期実行する場合は cron が用いられます。\ncron は任意のタスクを任意の時間にバックグラウンドで実行するデーモンです。実行する内容は crontab と呼ばれるテキスト ファイルに記述します。\n設定方法は以下のとおりです。\ncrontab を開く  以下のコマンドを Bash ターミナルから実行   crontab -e   次のような使用するテキスト エディタを選択する画像が表示された場合、任意の番号のテキストエディタを選択します (今回は 1 番を選択)。   crontab を編集する  crontab の編集画面が開くので次のとおり実行する内容を記述  */30 * * * * cd /home/\u0026lt;ユーザー名\u0026gt;/py-script \u0026amp;\u0026amp; /home/\u0026lt;ユーザー名\u0026gt;/anaconda3/envs/arcgis171/bin/python task.py    記述した内容の概要は以下のとおりです  */30 * * * *  30分に一回の実行間隔を指定  cd /home/\u0026lt;ユーザー名\u0026gt;/py-script  cd コマンドでカレントのディレクトリを実行するスクリプトと設定ファイルが格納されているディレクトリに移動 ※ ここではログインしているユーザーのホーム ディレクトリ直下に配置していると想定  \u0026amp;\u0026amp;  連続してコマンドを実行する場合に用いるオペレーター  /home/\u0026lt;ユーザー名\u0026gt;/anaconda3/envs/arcgis171/bin/python  実行する Python のパスを指定  task.py  実行する Python スクリプトを指定     上記の内容は Anaconda3 をインストールして構築した ArcGIS API for Python の実行環境を想定しています。詳細はインストールガイドを参照ください。\nより詳細な cron の使い方はubuntu の Community Help Wiki の Cron How to をご覧下さい。\n\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/python/matplotlib-japanese/",
	"title": "matplotlib での日本語利用について",
	"tags": [],
	"description": "ArcGIS API for Python で利用されているグラフ描画ライブラリの matplotlib で日本語を使う方法を説明します。",
	"content": " ArcGIS API for Python では様々な オープンソース ライブラリを活用していますが、グラフを描画する際は主に matplotlib が使用されています。\nmatplotlib をデフォルトのまま使用すると日本語のテキストは文字化けしてしまいますが、フォント設定を変更することで表示させることが可能です。\n対応環境 ここで説明する方法は、次の環境で設定しました。\n ArcGIS Pro 2.5 ArcGIS API for Python 1.7.0 matplotlib 3.1.1  matplotlib 3.1.0 以上から tcc ファイルに対応するようになったため、フォントを追加でインストールすることなく日本語を表示させることができるようになっています。 それ以前のバージョンをご利用されている場合は、matplotlib のバージョンアップをご検討ください。\n設定方法 設定方法は主に以下の 2 通りがあります。\n スクリプトで matplotlib の設定を都度変更する matplotlib の設定ファイル (matplotlibrc) を編集する  前者の方法では一時的な設定変更、後者では恒久的な設定変更が可能です。 どちらが適しているかはご自身の状況に合わせて選択してください。\nスクリプトで matplotlib の設定を都度変更する 次のコードをスクリプトの最初に実行することでフォント設定を変更することが可能です。\nimport matplotlib.pyplot as plt from matplotlib import rcParams rcParams['font.family'] = 'sans-serif' rcParams['font.sans-serif'] = [\u0026quot;Meiryo\u0026quot;]  rcParams は matplotlib のデフォルト設定が入っているオブジェクトです。\n上記では Windows で利用可能な Meriyo に変更していますが、ご自身の OS 等に応じて適宜フォントファミリー、フォントを変更してください。\n設定したらサンプル コードを実行してみましょう。\nmatplotlib の設定ファイル (matplotlibrc) を編集する 上記の設定方法では毎回スクリプトの最初にコードを実行する必要がありますが、以下の方法でデフォルトのフォントを恒久的に変更することが可能です。\nmatplotlibrc のパスを確認 次のコードを実行して matplotlib の設定ファイルである matplotlibrc のパスを確認します。\nimport matplotlib as mpl mpl.matplotlib_fname()  matplotlibrc を user/.matplotlib にコピー \u0026amp; ペーストで配置 matplotlibrc が格納されているパスへ移動し、ファイルをコピーしたら以下のディレクトリにペーストします。\n C:\\Users\\\u0026lt;ユーザー名\u0026gt;\\.matplotlib  matplotlibrc の内容を修正 ペーストした matplotlibrc のフォント設定部分を書き換えます。\nmatplotlibrc は非常に長いファイルですが、160 行目あたりからフォント設定のセクションが始まります。\n 198 行目にフォント ファミリー、210 行目に sans-serif のフォント設定の箇所があります。\nフォント ファミリーはデフォルトが sans-serif なので、ここではデフォルト設定のままにしておきます。\n210 行目のフォント設定の行で、# を削除し、: の後に日本語のフォントを追加しましょう。\nここでは Meiryo に設定します。設定後の画面は以下のようになります。\n キャッシュの再構築 以上で設定は終了ですが、うまく反映されない場合があるので、念のため以下のコードを実行してキャッシュを再構築します。\nimport matplotlib matplotlib.font_manager._rebuild()  設定が完了したらしたらサンプル コードを実行してみましょう。\nサンプル コード フォント設定が完了したら以下のサンプル コードを実行してみましょう。\nimport matplotlib.pyplot as plt import numpy as np def test_function(x): return 3*x**3 + 2*x**2 + 4*x - 10 x = np.linspace(-3, 3, 200) plt.plot(x, test_function(x), color = \u0026quot;cornflowerblue\u0026quot;, label = \u0026quot;日本語のラベル\u0026quot;) plt.legend(loc = \u0026quot;upper left\u0026quot;) plt.ylim(-120, 120) plt.title(\u0026quot;日本語のタイトル\u0026quot;) plt.xlabel(\u0026quot;日本語のX軸\u0026quot;) plt.ylabel(\u0026quot;日本語のY軸\u0026quot;) plt.grid(True) plt.show()  次のようなグラフが描ければ成功です。\n 参考  matplotlibで日本語 - Qiita matplotlib 公式ドキュメント  Configuring the font family The matplotlibrc file   "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/visualization/",
	"title": "データ ビジュアライゼーション",
	"tags": [],
	"description": "地図にデータを可視化する際の Tips を紹介します。",
	"content": "地図にデータを可視化する際の Tips を紹介します。\n\rデータ可視化のワークフロー\rマップ ビューアーを使用した地図上でのデータ可視化のプロセスを紹介します。\n\r\rデータ可視化の手順\rArcGIS Online 上のデータを可視化するための方法を紹介します。\n\r\r地図上に賢くデータを可視化するための 6 つの方法\rマップ ビューアーを使って地図データを賢く可視化するために おさえておくべき６つの方法を紹介します。\n\r\r"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/hackathon/",
	"title": "ミートアップ",
	"tags": [],
	"description": "ミートアップ参加者を支援するリソースをまとめています。",
	"content": " ミートアップ参加者を支援するリソースをまとめています。\nオープンデータを入手する ArcGIS Open Data では ArcGIS のクラウドで公開されている全世界のオープンデータを検索・参照・ダウンロードが可能です。 自由に使える地理データを取得する方法を紹介します。\n オープンデータの入手 (ArcGIS Open Data コミュニティサイト)  地図にデータを可視化する 座標情報を持った地理データや住所情報を持ったテキストデータなどを可視化して、アプリに組み込むための地図を作成する方法や Tips を紹介します。 なお、データ可視化の作業はコーディングが不要なので、プランナーやデザイナーの方でも取り組んでいただくことができます。\n データ可視化のワークフロー データ可視化の手順 データ可視化の手順（3D） 地図上に賢くデータを可視化するための 6 つの方法  アプリに地図を組み込む アプリに ArcGIS の地図を組み込む際に便利な開発キットやライブラリです。アプリ作成ツールを活用することで、ノンコーディングでアプリを作成することも可能です。\nコードを書く JavaScript  ArcGIS Web API: リファレンス (英語) | 日本語ガイド Leaflet.js (Esri Leaflet): リファレンス (英語) | 日本語ガイド(ブログ記事)  Android  ArcGIS Runtime SDK: リファレンス (英語) | 日本語ガイド  iOS  ArcGIS Runtime SDK: リファレンス (英語) | 日本語ガイド  .NET  ArcGIS Runtime SDK: リファレンス (英語) | 日本語ガイド  コードを書かない アプリケーション ビルダー  Web AppBuilder for ArcGIS: リファレンス | 日本語ガイド  ストーリーマップ  ストーリーマップ: リファレンス  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/webappbuilder/widget-list/",
	"title": "ウィジェット一覧表",
	"tags": [],
	"description": "Web AppBuilder for ArcGIS で提供されているウィジェットの一覧表です。",
	"content": " Web AppBuilder for ArcGIS ウィジェット一覧表 Web AppBuilder for ArcGIS（ArcGIS Online 版、ArcGIS Enterprise 版、Developer Edition 版 ※1）で提供されているウィジェットの一覧表です。\n表の「〇」をクリックすると、ウィジェットの詳細ページ（Web ガイド）にリンクします。表に「-」が記載されているウィジェットは提供されていません。\n 2D ウィジェット 3D ウィジェット 補足事項  2D ウィジェット    ウィジェット 機能概要 ArcGIS Online (2019 年 12 月アップデート) ArcGIS Enterprise バージョン 10.7.1 Developer Edition バージョン 2.15 ※1     情報 情報ウィジェットは、ウィジェットに表示するコンテンツを作成します。 〇 〇 〇   データ追加 データ追加ウィジェットを使用すると、ArcGIS Online または ArcGIS Enterprise のコンテンツからレイヤーを検索するか、URL を入力するか、ローカル ファイルをアップロードすることで、データをマップに追加できます。 〇 〇 〇   解析 解析ウィジェットを使用すると、アプリケーション内で ArcGIS Online または ArcGIS Enterprise の空間解析ツールを簡単に利用できます。 〇 〇 〇   属性テーブル 属性テーブル ウィジェットは、操作レイヤーの属性を表形式で表示します。 〇 〇 〇   属性一括編集 属性の一括編集ウィジェットではフィーチャ (関連フィーチャ、別のレイヤーに基づくフィーチャ、または図形内でスケッチしたフィーチャ) を選択し、共通属性を一括更新できます。 〇 〇 〇   ベースマップ ギャラリー ベースマップ ギャラリー ウィジェットには、ベースマップがギャラリー形式で表示され、ギャラリーの中から 1 つのベースマップを選択してアプリのベースマップにすることができます。 〇 〇 〇   ブックマーク ブックマーク ウィジェットには、アプリに表示されるマップ表示範囲 (空間ブックマーク) のコレクションが格納されます。 〇 〇 〇   Business Analyst Business Analyst ウィジェットを使用すると、マップ上のポイントまたはポリゴン フィーチャのレポートとインフォグラフィックスを実行することで、その詳細情報を表示することができます。 〇 - 〇   チャート チャート ウィジェットには、操作レイヤーから取得された定量属性がデータのグラフィカルな表現として表示されます。 〇 〇 〇   コントローラー コントローラー ウィジェットはパネル内ウィジェット用のコンテナーです。ヘッダー構成とサイドバー構成という 2 種類のコントローラーが事前に組み込まれています。 〇 〇 〇   座標 座標ウィジェットは、マップ上に X と Y の座標値を表示します。 〇 〇 〇   座標変換 座標変換ウィジェットでは、1 つの座標系を使用する座標を入力し、複数の表記形式を使用する別の座標系に出力することができます。 〇 〇 〇   コスト解析 コスト解析ウィジェットを使用すると、作成する各フィーチャにコスト係数を割り当てることができます。 〇 〇 〇   データ集約（ベータ版） データ集約ウィジェットを使用すると、CSV (カンマ区切り値) ファイルに格納されている住所または座標情報から地理フィーチャを作成し、CSV ファイルとターゲット レイヤーのフィールド情報を関連付ける方法を定義できます。 〇 - 〇   ルート案内 ルート案内ウィジェットは、2 つ以上の地点間のターンに基づくルート案内をすばやく効果的に算出する機能を提供します。 〇 〇 〇   地域検索 地域検索ウィジェットを使用すると、選択したポリゴンに関連するポイント フィーチャを検索したり、各フィーチャの詳細を表示したり、選択したポイント フィーチャへのルート案内を取得したりすることができます。 〇 〇 〇   距離と方向 距離と方向ウィジェットは、線、円、楕円、および範囲リングを描画し、重要な情報を視覚化できます。 〇 〇 〇   描画 描画ウィジェットでは、マップ上に任意のグラフィック (図形) を描画できます。 〇 〇 〇   編集 このウィジェットには、フィーチャ サービスのうち編集可能なレイヤーを編集する機能が含まれています。 〇 〇 〇   緊急時応急措置指針 ERG (緊急時応急措置指針) ウィジェットでは、危険物の流出の種類とユーザーが選択したマップ上の場所に基づいて、潜在的な危険を特定できます。 〇 〇 〇   範囲移動 範囲移動ウィジェットを使用すると、マップの前または次の範囲に移動することができます。 〇 〇 〇   フィルター フィルター ウィジェットを使用すると、レイヤー内のフィーチャの表示設定を制限できます。 〇 〇 〇   全画面 全画面ウィジェットでは、全画面モードを使用できます。 〇 〇 〇   ジオコーダー ジオコーダー ウィジェットは、検索ウィジェットに置き換えられました。検索ウィジェットの項目を参照してください。 〇 〇 〇   地理検索 地理検索ウィジェットは、マップ上のポリゴン フィーチャ レイヤーを使用して、CSV ファイル内の位置リストに情報を付加します。 〇 〇 〇   ジオプロセシング ジオプロセシング ウィジェットには、ジオプロセシング タスクを実行するダイナミック ユーザー インターフェイスが組み込まれています。 〇 〇 〇   グリッド オーバーレイ グリッド オーバーレイ ウィジェットでは、Web アプリでクライアント側のリソースを使用して、U.S. MGRS (Military Grid Reference System) グリッドをすばやくレンダリングできます。 〇 〇 〇   インデックス格子線 インデックス格子線 (GRG) を使用すると、アナリストは対象地理領域を分割する際に使用するグリッドを作成できます。 〇 〇 〇   グループ フィルター グループ フィルター ウィジェットでは、マップ内の 1 つ以上のレイヤーに基づき、マップにフィルターを適用できます。 〇 〇 〇   ホーム ボタン ホーム ボタン ウィジェットは、マップを初期表示範囲にズームします。 〇 〇 〇   画像計測 画像計測ウィジェットでは、計測機能を使用してイメージ サービスで測定を実行できます。 〇 〇 〇   インシデント解析 インシデント解析ウィジェットを使用すると、マップ上でインシデントを特定し、インシデントから指定した距離内にあるさまざまなフィーチャ レイヤーの情報を解析できます。 〇 〇 〇   インフォグラフィック インフォグラフィック ウィジェットが提供する 8 種類のグラフィックス テンプレートを使用すると、マップ内とその他のデータ ソースからの属性と統計情報データを視覚化してモニタリングできます。 〇 〇 〇   情報サマリー 情報サマリー ウィジェットを使用して、指定したレイヤーごとに、現在のマップ範囲内のフィーチャの数を表示できます。 〇 〇 〇   レイヤー リスト レイヤー リスト ウィジェットでは、操作レイヤーとそのシンボルがリスト形式で表示され、レイヤーを個別に表示または非表示にすることができます。 〇 〇 〇   凡例 凡例ウィジェットには、マップ内のレイヤーのラベルとシンボルが表示されます。 〇 〇 〇   計測 計測ウィジェットでは、ポリゴンの面積やラインの長さを計測したり、ポイントの座標を検索したりすることができます。 〇 〇 〇   現在地 現在地ウィジェットでは、ネットワークを使用してユーザーの物理的な位置を特定し、マップ上でその位置にズームできます。 〇 〇 〇   近隣検索 近隣検索ウィジェットを使用して、定義した住所または位置のバッファー内のフィーチャを検索したり、それらのフィーチャに関する詳細な情報を表示したり、選択したフィーチャまでのルート案内を取得したりすることができます。 〇 〇 〇   ネットワーク トレース※2 ネットワーク トレース ウィジェットは、任意のジオプロセシング サービスを呼び出して操作するように設計されています。 〇 〇 〇   傾斜ビューアー 傾斜ビューアー ウィジェットは、ArcGIS の [画像座標系 (ICS)] を使用して、ネイティブの座標系で画像を表示し、カメラ位置から自然なビューを提供します。 〇 〇 〇   概観図 概観図ウィジェットは、より大きなエリア内でマップの現在の範囲を表示し、マップ範囲が変更されるたびに更新します。 〇 〇 〇   パーセル ドラフター パーセル ドラフターは、マッピング技術者が土地境界の説明を入力し、クロージャ エラーをチェックするために使用できる Web AppBuilder for ArcGIS の構成です。 〇 〇 〇   印刷 印刷ウィジェットでは、Web アプリを印刷サービスに接続して、現在のマップを印刷できるようにします。 〇 〇 〇   パブリック通知 パブリック通知は、Web AppBuilder for ArcGIS の構成の 1 つで、地方自治体の職員が、所有者および占有者の財産を特定し、宛名ラベルや構造化テキスト ファイルを作成できるようにします。 〇 〇 〇   クエリ クエリ ウィジェットを使用すると、事前に定義されたクエリを実行して、ソース データから情報を取得することができます。 〇 〇 〇   関連テーブル チャート 関連テーブル チャート ウィジェットを使用して、フィーチャ レイヤーの関連テーブルの値のチャート (バー チャート、パイ チャート、または極座標チャート) を作成できます。 〇 〇 〇   フィーチャ レポート フィーチャ レポート ウィジェットでは、ユーザーからのデータ品質のフィードバックを収集および管理できます。 〇 〇 〇   レビューアー ダッシュボード レビューアー ダッシュボード ウィジェットには、ユーザーの GIS データで特定されたデータ品質の問題を集計し、インフォグラフィックスとしてデータ品質結果の統計情報が円グラフおよび棒グラフで表示されます。 〇 〇 〇   縮尺記号 縮尺記号ウィジェットは、マップに縮尺記号を表示します。 〇 〇 〇   スクリーニング スクリーニング ウィジェットを使用すると、対象地域を定義し、指定されたレイヤーを解析して、潜在的な影響がないか確認できます。 〇 〇 〇   検索 検索ウィジェットを使用すると、エンド ユーザーはマップ上で場所を見つけたり、フィーチャを検索したりできます。 〇 〇 〇   選択 選択ウィジェットを使用すると、マップ上のフィーチャを対話的に選択し、選択したフィーチャに対してアクションを行えます。 〇 〇 〇   共有 共有ウィジェットでは、アプリをソーシャル メディア アカウントにポストしたり、リンクを電子メールで送信したり、Web サイトやブログに埋め込んだりして共有することができます。 〇 〇 〇   状況認識 状況認識ウィジェットでは、マップ上の位置を指定し、指定の領域内にあるフィーチャ レイヤーの情報を解析することができます。 〇 〇 〇   スマート エディター スマート エディター ウィジェットを使用すると、フィーチャおよびその関連レコードを容易に編集できます。 〇 〇 〇   スプラッシュ スプラッシュ ウィジェットは、アプリのスプラッシュ画面上の表示コンテンツを定義します。 〇 〇 〇   ストリーム ストリーム ウィジェットを使用すると、ストリーミング フィーチャ レイヤーからのリアルタイムのデータ フィードを可視化および制御できます。 〇 〇 〇   適合性モデラー 適合性モデラー ウィジェットを使用すると、活動に最適な場所の検索、危険性の予測、事象が発生する可能性が高い場所の識別が可能になります。 〇 〇 〇   サマリー サマリー ウィジェットを使用すると、現在のマップ内のフィーチャ レイヤーから、表示されているマップ範囲内にある数値属性を集計できます。 〇 〇 〇   スワイプ スワイプ ウィジェットを使用して、マップ内のさまざまなレイヤーのコンテンツを簡単に比較できます。 〇 〇 〇   脅威分析 公共安全の担当者と初動対応者は、イベントの計画時に安全な距離と区域を特定します。 〇 〇 〇   タイム スライダー タイム スライダー ウィジェットを使用して時系列レイヤーをマップに表示し、アニメーションを再生して、データが時間とともにどのように変化するかを確認できます。 〇 〇 〇   可視解析 可視解析ウィジェットは、指定された距離、観測点の高さ、および視野に基づいて、観測点から見えるものを特定します。 〇 〇 〇   ズーム スライダー ズーム スライダー ウィジェットは、マップ表示に対話型のズーム コントロールを提供します。 〇 〇 〇    3D ウィジェット    ウィジェット 機能概要 ArcGIS Online (2019 年 12 月アップデート) ArcGIS Enterprise バージョン 10.7.1 Developer Edition バージョン 2.15 ※1     3DFx 3DFx ウィジェットが提供する一連の 3D アニメーション アプローチを使用して、地理情報を直感的で対話的な 3D 環境で視覚化および解析することができます。 〇 〇 〇   情報 情報ウィジェットは、ウィジェットに表示するコンテンツを作成します。 〇 〇 〇   ベースマップ ギャラリー ベースマップ ギャラリー ウィジェットには、組織から提供されるベースマップを表す画像のコレクション、またはユーザー定義の一連のマップ/イメージ サービスが表示されます。 〇 〇 〇   コンパス コンパス ウィジェットをクリックすると、シーンが北向きで再描画されます。 〇 〇 〇   座標 座標ウィジェットは、X,Y 座標、標高、およびカメラの高度の値を 3D アプリに表示します。 〇 〇 〇   日光 日光ウィジェットでは、時刻と月を変化させて日差しと影がシーンに与える影響を変更できます。 〇 〇 〇   全画面 全画面ウィジェットを使用して、全画面モードを開始できます。 〇 〇 〇   ホーム ボタン ホーム ボタン ウィジェットをクリックすると、最初のカメラ位置に戻ります。 〇 〇 〇   レイヤー リスト レイヤー リスト ウィジェットは、シーン内の 2D レイヤーまたは 3D レイヤーをリスト表示します。 〇 〇 〇   凡例 凡例ウィジェットには、シーン内のレイヤーのラベルとシンボルが表示されます。 〇 〇 〇   計測 3D アプリの計測ウィジェットでは、2 つのポイント間の水平、垂直、および直線距離、ポリゴンの面積および周囲長を計測できます。 〇 〇 〇   現在地 現在地ウィジェットでは、ネットワークを使用してユーザーの物理的な位置を特定し、マップ上でその位置にズームできます。 〇 〇 〇   ナビゲート ナビゲート ウィジェットを使用して、シーンを回転したり画面移動したりします。 〇 〇 〇   検索 検索ウィジェットを使用して、シーン内で場所を見つけることができます。 〇 〇 〇   共有 共有ウィジェットでは、3D アプリをソーシャル メディア アカウントにポストしたり、リンクを電子メールで送信したり、Web サイトやブログに埋め込んだりして共有することができます。 〇 〇 〇   スライド スライド ウィジェットは、シーンのさまざまなビューを表示します。 〇 〇 〇   スプラッシュ スプラッシュ ウィジェットは、アプリのスプラッシュ画面上の表示コンテンツを定義します。 〇 〇 〇   ズーム スライダー ズーム スライダー ウィジェットは、マップ表示に対話型のズーム コントロールを提供します。 〇 〇 〇    補足事項  ※1: Developer Edition 版のガイドは英語です。ウィジェットの説明を日本語でご覧になりたい場合は、ArcGIS Online まはた ArcGIS Enterprise のヘルプを参照してください（ウィジェットの説明に関しては、基本的にどのガイドも共通です）。 ※2: 日本国内サポート対象外のウィジェットです。  "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tips/webappbuilder/create-startup-app-wab/",
	"title": "スタートアップ ガイド",
	"tags": [],
	"description": "",
	"content": " Web AppBuilder for ArcGIS とは？ Web AppBuilder for ArcGIS（以下、Web AppBuilder）は、コーディング不要、インタラクティブな操作で Web アプリを作成可能なアプリケーション ビルダーです。\nWeb AppBuilder は、Web マップと呼ばれる、さまざまなデータを地図上に重ね合わせ、表示スタイルやポップアップを定義したマップをもとにアプリを作成します。\nアプリの外観を決めるテーマと、機能を提供するウィジェットを選択していくことで、独自のアプリを作成していきます。\nWeb アプリの作成  Web マップの作成\nハッカソン向け資料 - 地図にデータを可視化する を参考に、アプリで使用する Web マップを作成します。\n Web AppBuilder の起動\n作成した Web マップを保存したら、[共有] をクリックします。[Web アプリの作成] から [Web AppBuilder] を選択、[開始] をクリックして Web AppBuilder を起動します。  テーマの選択\nアプリの外観は、テーマと呼ばれるテンプレートによって決められます。テーマには、色を設定するスタイルや、ウィジェットの配置を定義するレイアウトなどが含まれます。\n ウィジェットの追加\nアプリの機能は、ウィジェットを選択することで追加していきます。追加したい機能を持つウィジェットを選択して、アプリ固有の設定は構成パネルで決めます。ウィジェットを組み合わせることで、さまざまな目的に適したアプリを作成することができます。  アプリの保存、起動\nアプリを作成できたら保存して起動してみましょう。   Web AppBuilder for ArcGIS (Developer Edition) ポータルサイトに組み込まれた Web AppBuilder を利用してアプリを作成するほかに、開発者向けに Developer Edition が提供されています。\nDeveloper Edition は、テーマやウィジェットを開発可能で、Web AppBuilder に独自の機能を追加することができます。 Web AppBuilder が提供するテーマやウィジェットを活用したアプリを作成できるので、コストを抑えたアプリ開発を実現します。\n"
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/",
	"title": "ArcGIS for Developer 開発リソース集",
	"tags": [],
	"description": "",
	"content": "  \nArcGIS for Developer 開発リソース集 ArcGIS をはじめて使う開発者の方向けに、開発者アカウントの作成から、マップの作成、API/SDK を利用したアプリの開発まで、ArcGIS for Developers を利用したアプリ開発の基本的な流れを紹介します。\nArcGIS for Developers が提供するサービスの詳細は ESRIジャパン製品ページをご覧ください。\nスタートアップ ガイド\r マップの作成  ArcGIS をはじめて使う方向けに開発者アカウントやマップの作成方法を紹介します。  アプリの作成  API/SDK を使用したシンプルな地図アプリの作成方法を紹介します。  認証  有償のサービスやプライベート コンテンツへアクセスするアプリに必要な認証について紹介します。   \r\rその他にも各 API/SDK を使用した開発をサポートするドキュメントをまとめた技術 Tips 集も公開していますので、ArcGIS for Developer を利用したアプリ開発の基本的な流れを理解した後はこちらも併せてご覧ください。 API/SDK  ArcGIS API for JavaScript  Web ブラウザー ベースのアプリを効率よく開発するための最適な開発用 API です。１つのアプリでデスクトップ、タブレット、スマートフォンに対応が可能です。GIS の基本機能から HTML5 を採用した高度な機能までサポートします。  ArcGIS Runtime SDK for .NET  Windows プラットフォーム上で動作するネイティブ GIS アプリの開発キットです。Windows デスクトップ、Windows ストア、Windows Phone の 3 つのプラットフォームに開発ライブラリを提供します。  ArcGIS Runtime SDK for Android  GIS 機能を搭載した Android ネイティブ アプリの開発を支援する開発キットです。Google の提供する Android アプリ開発に最適化した統合開発環境である Android Studio に対応しています。  ArcGIS Runtime SDK for iOS  iOS 専用のネイティブ GIS アプリの開発キットです。Objective-C または Swift を使用して iOS 専用の カスタム アプリを開発したり、既存のアプリに GIS の機能を統合することができます。  ArcGIS API for Python  Web GIS (ArcGIS Online / ArcGIS Enterprise) を活用してマップと地理空間データを扱うための Python ベースの API です。GIS データの可視化や解析の実行だけでなく、ユーザー、グループ、アイテムなどを管理するためのシンプルで使いやすいツールを提供します。   　開発者オープン コミュニティ  Esri GitHub  米国 Esri 社のスタッフが作成したサンプル プログラムを GitHub で共有しています。  Esri Japan GitHub  ESRIジャパンのスタッフが作成したサンプル プログラムを GitHub で共有しています。  GeoNet  米国 Esri 社が運営する ArcGIS ユーザー コミュニティ サイトです。世界中のユーザーと ArcGIS に関する技術情報を共有することができます。  GeoNet ArcGIS 開発者コミュニティ  ESRIジャパンのスタッフが GeoNet 上で開発者向けの技術ブログを発信しています。   "
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://esrijapan.github.io/arcgis-dev-resources/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]